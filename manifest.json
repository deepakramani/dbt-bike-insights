{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.3", "generated_at": "2025-04-05T20:51:04.186617Z", "invocation_id": "8a8ac68b-f45d-4d21-a645-b4dc8e6e858e", "env": {}, "project_name": "dbt_transform", "project_id": "fa3c66600585ff8268e127403c654d0b", "user_id": "eb2a3619-5d61-46ff-b38d-2817a2a918f1", "send_anonymous_usage_stats": true, "adapter_type": "duckdb"}, "nodes": {"model.dbt_transform.copy_gold_tables_to_duckdb": {"database": "dwh", "schema": "main", "name": "copy_gold_tables_to_duckdb", "resource_type": "model", "package_name": "dbt_transform", "path": "copy_gold_tables_to_duckdb.sql", "original_file_path": "models/copy_gold_tables_to_duckdb.sql", "unique_id": "model.dbt_transform.copy_gold_tables_to_duckdb", "fqn": ["dbt_transform", "copy_gold_tables_to_duckdb"], "alias": "copy_gold_tables_to_duckdb", "checksum": {"name": "sha256", "checksum": "7ff2f4460311f005ffe6070c6618cdcc5dcc6b099e37d5f026232ac5d5fd914b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885922.863796, "relation_name": "\"dwh\".\"main\".\"copy_gold_tables_to_duckdb\"", "raw_code": "/*\n  Model: copy_gold_tables\n\n  Description:\n    Syncs gold-layer tables from PostgreSQL to DuckDB by invoking the `copy_all_from_postgres_gold` macro.\n    Copies `fact_sales`, `dim_customers`, and `dim_products` from the Postgres `gold` schema to the DuckDB `gold` schema.\n    Materializes a dummy table (`gold.copy_gold_tables`) with a single row to satisfy dbt.\n\n  Dependencies:\n    - Macro: `copy_all_from_postgres_gold` (defined in macros/copy_all_from_postgres_gold.sql).\n    - Environment variables: POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_HOST, POSTGRES_PORT, POSTGRES_DB.\n    - DuckDB `postgres_scanner` extension (auto-installed).\n\n  Usage:\n    Run via dbt: `dbt run --select copy_gold_tables --profile dbt_duckdb`\n\n  Output:\n    - Creates/replaces DuckDB tables: `gold.fact_sales`, `gold.dim_customers`, `gold.dim_products`.\n    - Materializes `gold.copy_gold_tables` with one row (`status = 1`).\n*/\n{% if target.type == 'duckdb' %} -- for dbt docs generate errors\n  {{ copy_all_from_postgres_gold([\n      {'pg_schema': 'gold', 'pg_table': 'fact_sales', 'duckdb_schema': 'gold', 'duckdb_table': 'fact_sales'},\n      {'pg_schema': 'gold', 'pg_table': 'dim_customers_current', 'duckdb_schema': 'gold', 'duckdb_table': 'dim_customers_current'},\n      {'pg_schema': 'gold', 'pg_table': 'dim_products_current', 'duckdb_schema': 'gold', 'duckdb_table': 'dim_products_current'},\n      {'pg_schema': 'gold', 'pg_table': 'dim_customers_hist', 'duckdb_schema': 'gold', 'duckdb_table': 'dim_customers_hist'},\n      {'pg_schema': 'gold', 'pg_table': 'dim_products_hist', 'duckdb_schema': 'gold', 'duckdb_table': 'dim_products_hist'}\n  ]) }}\n{% else %}\n  -- This query will be used for documentation generation but never executed\n  SELECT \n      1 as placeholder_col\n  WHERE FALSE\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.copy_all_from_postgres_gold"], "nodes": []}, "compiled_path": "target/compiled/dbt_transform/models/copy_gold_tables_to_duckdb.sql", "compiled": true, "compiled_code": "/*\n  Model: copy_gold_tables\n\n  Description:\n    Syncs gold-layer tables from PostgreSQL to DuckDB by invoking the `copy_all_from_postgres_gold` macro.\n    Copies `fact_sales`, `dim_customers`, and `dim_products` from the Postgres `gold` schema to the DuckDB `gold` schema.\n    Materializes a dummy table (`gold.copy_gold_tables`) with a single row to satisfy dbt.\n\n  Dependencies:\n    - Macro: `copy_all_from_postgres_gold` (defined in macros/copy_all_from_postgres_gold.sql).\n    - Environment variables: POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_HOST, POSTGRES_PORT, POSTGRES_DB.\n    - DuckDB `postgres_scanner` extension (auto-installed).\n\n  Usage:\n    Run via dbt: `dbt run --select copy_gold_tables --profile dbt_duckdb`\n\n  Output:\n    - Creates/replaces DuckDB tables: `gold.fact_sales`, `gold.dim_customers`, `gold.dim_products`.\n    - Materializes `gold.copy_gold_tables` with one row (`status = 1`).\n*/\n -- for dbt docs generate errors\n  \n    -- Return a dummy result to satisfy dbt\n    SELECT 1 AS status\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_transform.bz_crm_cust_info": {"database": "dwh", "schema": "bronze", "name": "bz_crm_cust_info", "resource_type": "model", "package_name": "dbt_transform", "path": "bronze/bz_crm_cust_info.sql", "original_file_path": "models/bronze/bz_crm_cust_info.sql", "unique_id": "model.dbt_transform.bz_crm_cust_info", "fqn": ["dbt_transform", "bronze", "bz_crm_cust_info"], "alias": "bz_crm_cust_info", "checksum": {"name": "sha256", "checksum": "6b7a7823a9bf7fe8ac2bab2add480cbdfd1fb5bb6c06a3014632aa63411024cd"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "cst_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Raw CRM customer information with added updated_at timestamp.", "columns": {"cst_id": {"name": "cst_id", "description": "Unique identifier for the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_key": {"name": "cst_key", "description": "Customer key from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_firstname": {"name": "cst_firstname", "description": "First name of the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_lastname": {"name": "cst_lastname", "description": "Last name of the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_marital_status": {"name": "cst_marital_status", "description": "Marital status of the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_gndr": {"name": "cst_gndr", "description": "Gender of the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_create_date": {"name": "cst_create_date", "description": "Date the customer record was created in CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_email": {"name": "cst_email", "description": "Email address of the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_place": {"name": "cst_place", "description": "Place or city of residence from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_postal_code": {"name": "cst_postal_code", "description": "Postal code of the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_at": {"name": "ingested_at", "description": "Timestamp when the record was ingested into raw layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the record was last updated in bronze layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/bronze/schema.yml", "build_path": null, "unrendered_config": {"schema": "bronze", "materialized": "incremental", "unique_key": "cst_id"}, "created_at": 1743885923.380983, "relation_name": "\"dwh\".\"bronze\".\"bz_crm_cust_info\"", "raw_code": "{{ config(\n    unique_key='cst_id'\n) }}\nWITH deduped AS (\n    SELECT \n        cst_id,\n        cst_key,\n        cst_firstname,\n        cst_lastname,\n        cst_marital_status,\n        cst_gndr,\n        cst_create_date,\n        CASE \n            WHEN COALESCE(unaccent(email), 'unknown') = 'unknown' THEN 'unknown'\n            ELSE REGEXP_REPLACE(\n                LOWER(\n                    -- Remove spaces in the local part (before @)\n                    REGEXP_REPLACE(\n                        COALESCE(unaccent(email), 'unknown'),\n                        '([^@]+)( )([^@]*@.*)',\n                        '\\1.\\3'\n                    )\n                ),\n                ' ',\n                '.'\n            )\n        END AS cst_email, -- schema evolution\n        COALESCE(place_of_residence, NULL) AS cst_place,\n        COALESCE(postal_code, NULL) AS cst_postal_code,\n        ingested_at,\n        ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY ingested_at DESC, cst_create_date DESC) AS rn\n    FROM {{ source('bronze_source', 'raw_crm_cust_info') }}\n    WHERE cst_id IS NOT NULL\n)\nSELECT \n    *,\n    CURRENT_TIMESTAMP::TIMESTAMP AS updated_at -- for snapshot tracking. Typecasting to avoid timezone\nFROM deduped\nWHERE rn = 1\n{% if is_incremental() %}\n    AND ingested_at > (SELECT MAX(ingested_at) FROM {{ this }})\n{% endif %}", "language": "sql", "refs": [], "sources": [["bronze_source", "raw_crm_cust_info"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_transform.bronze_source.raw_crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/bz_crm_cust_info.sql", "compiled": true, "compiled_code": "\nWITH deduped AS (\n    SELECT \n        cst_id,\n        cst_key,\n        cst_firstname,\n        cst_lastname,\n        cst_marital_status,\n        cst_gndr,\n        cst_create_date,\n        CASE \n            WHEN COALESCE(unaccent(email), 'unknown') = 'unknown' THEN 'unknown'\n            ELSE REGEXP_REPLACE(\n                LOWER(\n                    -- Remove spaces in the local part (before @)\n                    REGEXP_REPLACE(\n                        COALESCE(unaccent(email), 'unknown'),\n                        '([^@]+)( )([^@]*@.*)',\n                        '\\1.\\3'\n                    )\n                ),\n                ' ',\n                '.'\n            )\n        END AS cst_email, -- schema evolution\n        COALESCE(place_of_residence, NULL) AS cst_place,\n        COALESCE(postal_code, NULL) AS cst_postal_code,\n        ingested_at,\n        ROW_NUMBER() OVER (PARTITION BY cst_id ORDER BY ingested_at DESC, cst_create_date DESC) AS rn\n    FROM \"sql_dwh_db\".\"raw\".\"raw_crm_cust_info\"\n    WHERE cst_id IS NOT NULL\n)\nSELECT \n    *,\n    CURRENT_TIMESTAMP::TIMESTAMP AS updated_at -- for snapshot tracking. Typecasting to avoid timezone\nFROM deduped\nWHERE rn = 1\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["cst_id"], "time_spine": null}, "model.dbt_transform.bz_erp_loc_a101": {"database": "dwh", "schema": "bronze", "name": "bz_erp_loc_a101", "resource_type": "model", "package_name": "dbt_transform", "path": "bronze/bz_erp_loc_a101.sql", "original_file_path": "models/bronze/bz_erp_loc_a101.sql", "unique_id": "model.dbt_transform.bz_erp_loc_a101", "fqn": ["dbt_transform", "bronze", "bz_erp_loc_a101"], "alias": "bz_erp_loc_a101", "checksum": {"name": "sha256", "checksum": "f8908d5682e1c05820690be62279c4f9d3e0f2c65bc61f3ff4ac7435935a518e"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "cid", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Raw ERP customer location data with added updated_at timestamp.", "columns": {"cid": {"name": "cid", "description": "Customer ID from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cntry": {"name": "cntry", "description": "Country of the customer from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_at": {"name": "ingested_at", "description": "Timestamp when the record was ingested into raw layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the record was last updated in bronze layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/bronze/schema.yml", "build_path": null, "unrendered_config": {"schema": "bronze", "materialized": "incremental", "unique_key": "cid"}, "created_at": 1743885923.3878, "relation_name": "\"dwh\".\"bronze\".\"bz_erp_loc_a101\"", "raw_code": "{{ config(\n    unique_key= 'cid'\n) }}\nWITH source AS (\n    SELECT \n        *,--(has ingested_at for incremental filtering)\n        CURRENT_TIMESTAMP::TIMESTAMP AS updated_at -- for snapshot tracking\n    FROM {{ source('bronze_source', 'raw_erp_loc_a101') }}\n)\nSELECT \n    *\nFROM source\n{% if is_incremental() %}\nWHERE ingested_at > (SELECT MAX(ingested_at) FROM {{ this }})\n{% endif %}", "language": "sql", "refs": [], "sources": [["bronze_source", "raw_erp_loc_a101"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_transform.bronze_source.raw_erp_loc_a101"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/bz_erp_loc_a101.sql", "compiled": true, "compiled_code": "\nWITH source AS (\n    SELECT \n        *,--(has ingested_at for incremental filtering)\n        CURRENT_TIMESTAMP::TIMESTAMP AS updated_at -- for snapshot tracking\n    FROM \"sql_dwh_db\".\"raw\".\"raw_erp_loc_a101\"\n)\nSELECT \n    *\nFROM source\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_transform.bz_erp_px_cat_g1v2": {"database": "dwh", "schema": "bronze", "name": "bz_erp_px_cat_g1v2", "resource_type": "model", "package_name": "dbt_transform", "path": "bronze/bz_erp_px_cat_g1v2.sql", "original_file_path": "models/bronze/bz_erp_px_cat_g1v2.sql", "unique_id": "model.dbt_transform.bz_erp_px_cat_g1v2", "fqn": ["dbt_transform", "bronze", "bz_erp_px_cat_g1v2"], "alias": "bz_erp_px_cat_g1v2", "checksum": {"name": "sha256", "checksum": "d233140caf5e5c47a1e1fb08d8b6212cd62ae540033a24b4387d164c1781164c"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Raw ERP product category data with added updated_at timestamp.", "columns": {"id": {"name": "id", "description": "Category ID from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cat": {"name": "cat", "description": "Product category from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subcat": {"name": "subcat", "description": "Product subcategory from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "maintenance": {"name": "maintenance", "description": "Maintenance status of the product from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_at": {"name": "ingested_at", "description": "Timestamp when the record was ingested into raw layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the record was last updated in bronze layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/bronze/schema.yml", "build_path": null, "unrendered_config": {"schema": "bronze", "materialized": "incremental", "unique_key": "id"}, "created_at": 1743885923.3891041, "relation_name": "\"dwh\".\"bronze\".\"bz_erp_px_cat_g1v2\"", "raw_code": "{{ config(\n    unique_key= 'id'\n) }}\nWITH source AS (\n    SELECT \n        *,--(has ingested_at for incremental filtering)\n        CURRENT_TIMESTAMP::TIMESTAMP AS updated_at -- for snapshot tracking\n    FROM {{ source('bronze_source', 'raw_erp_px_cat_g1v2') }}\n)\nSELECT \n    *\nFROM source\n{% if is_incremental() %}\nWHERE ingested_at > (SELECT MAX(ingested_at) FROM {{ this }})\n{% endif %}", "language": "sql", "refs": [], "sources": [["bronze_source", "raw_erp_px_cat_g1v2"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_transform.bronze_source.raw_erp_px_cat_g1v2"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/bz_erp_px_cat_g1v2.sql", "compiled": true, "compiled_code": "\nWITH source AS (\n    SELECT \n        *,--(has ingested_at for incremental filtering)\n        CURRENT_TIMESTAMP::TIMESTAMP AS updated_at -- for snapshot tracking\n    FROM \"sql_dwh_db\".\"raw\".\"raw_erp_px_cat_g1v2\"\n)\nSELECT \n    *\nFROM source\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_transform.bz_crm_prd_info": {"database": "dwh", "schema": "bronze", "name": "bz_crm_prd_info", "resource_type": "model", "package_name": "dbt_transform", "path": "bronze/bz_crm_prd_info.sql", "original_file_path": "models/bronze/bz_crm_prd_info.sql", "unique_id": "model.dbt_transform.bz_crm_prd_info", "fqn": ["dbt_transform", "bronze", "bz_crm_prd_info"], "alias": "bz_crm_prd_info", "checksum": {"name": "sha256", "checksum": "cf5c7bb6a7bf5efd44af43b7254e6f5afd04e41690914c1394905b22d06b2437"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "prd_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Raw CRM product information with added updated_at timestamp.", "columns": {"prd_id": {"name": "prd_id", "description": "Unique identifier for the product from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "prd_key": {"name": "prd_key", "description": "Product key from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "prd_nm": {"name": "prd_nm", "description": "Name of the product from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "prd_cost": {"name": "prd_cost", "description": "Cost of the product from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "prd_line": {"name": "prd_line", "description": "Product line category from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "prd_start_dt": {"name": "prd_start_dt", "description": "Start date of product availability from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "prd_end_dt": {"name": "prd_end_dt", "description": "End date of product availability from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_at": {"name": "ingested_at", "description": "Timestamp when the record was ingested into raw layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the record was last updated in bronze layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/bronze/schema.yml", "build_path": null, "unrendered_config": {"schema": "bronze", "materialized": "incremental", "unique_key": "prd_id"}, "created_at": 1743885923.383373, "relation_name": "\"dwh\".\"bronze\".\"bz_crm_prd_info\"", "raw_code": "{{ config(\n    unique_key='prd_id'\n) }}\n\nWITH source AS (\n    SELECT \n        prd_id,\n        prd_key,\n        prd_nm,\n        COALESCE(prd_cost, 0) AS prd_cost,  -- Schema evolution\n        prd_line,\n        prd_start_dt,\n        prd_end_dt,\n        ingested_at,\n        CURRENT_TIMESTAMP::TIMESTAMP AS updated_at -- for snapshot tracking\n    FROM {{ source('bronze_source', 'raw_crm_prd_info') }}\n    WHERE prd_id IS NOT NULL\n)\nSELECT \n    *\nFROM source\n{% if is_incremental() %}\nWHERE ingested_at > (SELECT MAX(ingested_at) FROM {{ this }})\n{% endif %}", "language": "sql", "refs": [], "sources": [["bronze_source", "raw_crm_prd_info"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_transform.bronze_source.raw_crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/bz_crm_prd_info.sql", "compiled": true, "compiled_code": "\n\nWITH source AS (\n    SELECT \n        prd_id,\n        prd_key,\n        prd_nm,\n        COALESCE(prd_cost, 0) AS prd_cost,  -- Schema evolution\n        prd_line,\n        prd_start_dt,\n        prd_end_dt,\n        ingested_at,\n        CURRENT_TIMESTAMP::TIMESTAMP AS updated_at -- for snapshot tracking\n    FROM \"sql_dwh_db\".\"raw\".\"raw_crm_prd_info\"\n    WHERE prd_id IS NOT NULL\n)\nSELECT \n    *\nFROM source\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["prd_id"], "time_spine": null}, "model.dbt_transform.bz_crm_sales_details": {"database": "dwh", "schema": "bronze", "name": "bz_crm_sales_details", "resource_type": "model", "package_name": "dbt_transform", "path": "bronze/bz_crm_sales_details.sql", "original_file_path": "models/bronze/bz_crm_sales_details.sql", "unique_id": "model.dbt_transform.bz_crm_sales_details", "fqn": ["dbt_transform", "bronze", "bz_crm_sales_details"], "alias": "bz_crm_sales_details", "checksum": {"name": "sha256", "checksum": "cb9bce8c202bd8935cfeed2349e73c12195be6a32374421c65ed6cf9435c145f"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "sls_ord_num", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Raw CRM sales details with added updated_at timestamp.", "columns": {"sls_ord_num": {"name": "sls_ord_num", "description": "Sales order number from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_prd_key": {"name": "sls_prd_key", "description": "Product key associated with the sale from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_cust_id": {"name": "sls_cust_id", "description": "Customer ID associated with the sale from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_order_dt": {"name": "sls_order_dt", "description": "Order date as an integer (e.g., 20230405) from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_ship_dt": {"name": "sls_ship_dt", "description": "Shipping date as an integer (e.g., 20230405) from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_due_dt": {"name": "sls_due_dt", "description": "Due date as an integer (e.g., 20230405) from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_sales": {"name": "sls_sales", "description": "Total sales amount from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_quantity": {"name": "sls_quantity", "description": "Quantity sold from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_price": {"name": "sls_price", "description": "Unit price from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_at": {"name": "ingested_at", "description": "Timestamp when the record was ingested into raw layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the record was last updated in bronze layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/bronze/schema.yml", "build_path": null, "unrendered_config": {"schema": "bronze", "materialized": "incremental", "unique_key": "sls_ord_num"}, "created_at": 1743885923.385875, "relation_name": "\"dwh\".\"bronze\".\"bz_crm_sales_details\"", "raw_code": "{{\n    config(\n        unique_key='sls_ord_num'\n    )\n}}\nWITH source AS (\nSELECT\n    sls_ord_num,\n    sls_prd_key,\n    sls_cust_id,\n    CASE \n        WHEN sls_order_dt::VARCHAR ~ '^[0-9]{8}$' \n        THEN TO_DATE(sls_order_dt::VARCHAR, 'YYYYMMDD')\n        ELSE NULL\n    END AS sls_order_dt,\n    CASE \n        WHEN sls_ship_dt::VARCHAR ~ '^[0-9]{8}$' \n        THEN TO_DATE(sls_ship_dt::VARCHAR, 'YYYYMMDD')\n        ELSE NULL\n    END AS sls_ship_dt,\n    CASE \n        WHEN sls_due_dt::VARCHAR ~ '^[0-9]{8}$' \n        THEN TO_DATE(sls_due_dt::VARCHAR, 'YYYYMMDD')\n        ELSE NULL\n    END AS sls_due_dt,\n    sls_sales,\n    sls_quantity,\n    sls_price,\n    ingested_at,\n    CURRENT_TIMESTAMP AS updated_at -- for snapshot tracking\n    FROM {{ source('bronze_source', 'raw_crm_sales_details') }}\n)\nSELECT \n    *\nFROM source\n{% if is_incremental() %}\nWHERE ingested_at > (SELECT MAX(ingested_at) FROM {{ this }})\n{% endif %}", "language": "sql", "refs": [], "sources": [["bronze_source", "raw_crm_sales_details"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_transform.bronze_source.raw_crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/bz_crm_sales_details.sql", "compiled": true, "compiled_code": "\nWITH source AS (\nSELECT\n    sls_ord_num,\n    sls_prd_key,\n    sls_cust_id,\n    CASE \n        WHEN sls_order_dt::VARCHAR ~ '^[0-9]{8}$' \n        THEN TO_DATE(sls_order_dt::VARCHAR, 'YYYYMMDD')\n        ELSE NULL\n    END AS sls_order_dt,\n    CASE \n        WHEN sls_ship_dt::VARCHAR ~ '^[0-9]{8}$' \n        THEN TO_DATE(sls_ship_dt::VARCHAR, 'YYYYMMDD')\n        ELSE NULL\n    END AS sls_ship_dt,\n    CASE \n        WHEN sls_due_dt::VARCHAR ~ '^[0-9]{8}$' \n        THEN TO_DATE(sls_due_dt::VARCHAR, 'YYYYMMDD')\n        ELSE NULL\n    END AS sls_due_dt,\n    sls_sales,\n    sls_quantity,\n    sls_price,\n    ingested_at,\n    CURRENT_TIMESTAMP AS updated_at -- for snapshot tracking\n    FROM \"sql_dwh_db\".\"raw\".\"raw_crm_sales_details\"\n)\nSELECT \n    *\nFROM source\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_transform.bz_erp_cust_az12": {"database": "dwh", "schema": "bronze", "name": "bz_erp_cust_az12", "resource_type": "model", "package_name": "dbt_transform", "path": "bronze/bz_erp_cust_az12.sql", "original_file_path": "models/bronze/bz_erp_cust_az12.sql", "unique_id": "model.dbt_transform.bz_erp_cust_az12", "fqn": ["dbt_transform", "bronze", "bz_erp_cust_az12"], "alias": "bz_erp_cust_az12", "checksum": {"name": "sha256", "checksum": "4e90cd5352d0ae47eb596f0923234742904a076f1a0359fb1df985cf6180302d"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "cid", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Raw ERP customer details with added updated_at timestamp.", "columns": {"cid": {"name": "cid", "description": "Customer ID from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bdate": {"name": "bdate", "description": "Birthdate of the customer from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gen": {"name": "gen", "description": "Gender of the customer from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_at": {"name": "ingested_at", "description": "Timestamp when the record was ingested into raw layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the record was last updated in bronze layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/bronze/schema.yml", "build_path": null, "unrendered_config": {"schema": "bronze", "materialized": "incremental", "unique_key": "cid"}, "created_at": 1743885923.386981, "relation_name": "\"dwh\".\"bronze\".\"bz_erp_cust_az12\"", "raw_code": "{{ config(\n    unique_key= 'cid'\n) }}\nWITH source AS (\n    SELECT \n        *,--(has ingested_at for incremental filtering)\n        CURRENT_TIMESTAMP::TIMESTAMP AS updated_at -- for snapshot tracking\n    FROM {{ source('bronze_source', 'raw_erp_cust_az12') }}\n    WHERE cid IS NOT NULL  -- Basic validation\n)\nSELECT \n    *\nFROM source\n{% if is_incremental() %}\nWHERE ingested_at > (SELECT MAX(ingested_at) FROM {{ this }})\n{% endif %}", "language": "sql", "refs": [], "sources": [["bronze_source", "raw_erp_cust_az12"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.dbt_transform.bronze_source.raw_erp_cust_az12"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/bz_erp_cust_az12.sql", "compiled": true, "compiled_code": "\nWITH source AS (\n    SELECT \n        *,--(has ingested_at for incremental filtering)\n        CURRENT_TIMESTAMP::TIMESTAMP AS updated_at -- for snapshot tracking\n    FROM \"sql_dwh_db\".\"raw\".\"raw_erp_cust_az12\"\n    WHERE cid IS NOT NULL  -- Basic validation\n)\nSELECT \n    *\nFROM source\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_transform.crm_prd_info": {"database": "dwh", "schema": "silver", "name": "crm_prd_info", "resource_type": "model", "package_name": "dbt_transform", "path": "silver/crm_prd_info.sql", "original_file_path": "models/silver/crm_prd_info.sql", "unique_id": "model.dbt_transform.crm_prd_info", "fqn": ["dbt_transform", "silver", "crm_prd_info"], "alias": "crm_prd_info", "checksum": {"name": "sha256", "checksum": "e4dde8d01e3c14ea018a0a4f69a19cd2c85518054202d40671a2a1f9ac5f297f"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "prd_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Cleaned and standardized CRM product information.", "columns": {"prd_id": {"name": "prd_id", "description": "Unique identifier for each product from CRM (bz_crm_prd_info.prd_id).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cat_id": {"name": "cat_id", "description": "Category ID of the product, derived from prd_key in CRM (bz_crm_prd_info.prd_key).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "prd_code": {"name": "prd_code", "description": "Derived identifier key of the product from CRM (bz_crm_prd_info.prd_key).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "prd_nm": {"name": "prd_nm", "description": "Name of the product from CRM (bz_crm_prd_info.prd_nm).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "prd_cost": {"name": "prd_cost", "description": "Cost of the product from CRM (bz_crm_prd_info.prd_cost).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "prd_line": {"name": "prd_line", "description": "Product line category from CRM (bz_crm_prd_info.prd_line), standardized to 'Mountains', 'Road', 'Sales', 'Touring', or 'n/a'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "prd_start_date": {"name": "prd_start_date", "description": "Start date of product availability from CRM (bz_crm_prd_info.prd_start_dt).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "prd_end_date": {"name": "prd_end_date", "description": "End date of product availability from CRM (bz_crm_prd_info.prd_end_dt).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_at": {"name": "ingested_at", "description": "Timestamp when the record was ingested into the raw layer, passed from bronze (bz_crm_prd_info.ingested_at).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the record was last updated in bronze (bz_crm_prd_info.updated_at).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/silver/schema.yml", "build_path": null, "unrendered_config": {"schema": "silver", "materialized": "incremental", "unique_key": "prd_id"}, "created_at": 1743885923.584597, "relation_name": "\"dwh\".\"silver\".\"crm_prd_info\"", "raw_code": "{{ config(\n    unique_key= 'prd_id'\n) }}\n\nWITH source_table AS (\n    SELECT \n        *\n    FROM {{ ref('bz_crm_prd_info') }}\n),\ncleaned_data AS (\n    SELECT\n        prd_id,\n        replace(substr(prd_key, 1,5),'-','_') as cat_id,\n        substr(prd_key, 7, length(prd_key)) as prd_code,\n        prd_nm,\n        prd_cost,\n        case\n            when upper(trim(prd_line)) = 'M' then 'Mountains'\n            when upper(trim(prd_line)) = 'R' then 'Road'\n            when upper(trim(prd_line)) = 'S' then 'Sales'\n            when upper(trim(prd_line)) = 'T' then 'Touring'\n            else 'n/a'\n        end as prd_line,\n        CASE\n            WHEN prd_start_dt IS NULL THEN '2006-01-01'  -- Default for missing start\n            WHEN prd_end_dt IS NOT NULL AND prd_end_dt < prd_start_dt THEN prd_end_dt\n            ELSE prd_start_dt\n        END AS prd_start_date,\n        CASE\n            WHEN prd_end_dt IS NULL THEN '9999-12-31'  -- Default for missing end\n            WHEN prd_end_dt < prd_start_dt THEN prd_start_dt\n            ELSE prd_end_dt\n        END AS prd_end_date,\n        ingested_at, -- remove if irrelevant downstream\n        updated_at\n    FROM source_table\n)\nSELECT \n    *\nFROM cleaned_data\n{% if is_incremental() %}\nWHERE updated_at > (SELECT MAX(updated_at) FROM {{ this }})\n{% endif %}", "language": "sql", "refs": [{"name": "bz_crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_transform.bz_crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/crm_prd_info.sql", "compiled": true, "compiled_code": "\n\nWITH source_table AS (\n    SELECT \n        *\n    FROM \"dwh\".\"bronze\".\"bz_crm_prd_info\"\n),\ncleaned_data AS (\n    SELECT\n        prd_id,\n        replace(substr(prd_key, 1,5),'-','_') as cat_id,\n        substr(prd_key, 7, length(prd_key)) as prd_code,\n        prd_nm,\n        prd_cost,\n        case\n            when upper(trim(prd_line)) = 'M' then 'Mountains'\n            when upper(trim(prd_line)) = 'R' then 'Road'\n            when upper(trim(prd_line)) = 'S' then 'Sales'\n            when upper(trim(prd_line)) = 'T' then 'Touring'\n            else 'n/a'\n        end as prd_line,\n        CASE\n            WHEN prd_start_dt IS NULL THEN '2006-01-01'  -- Default for missing start\n            WHEN prd_end_dt IS NOT NULL AND prd_end_dt < prd_start_dt THEN prd_end_dt\n            ELSE prd_start_dt\n        END AS prd_start_date,\n        CASE\n            WHEN prd_end_dt IS NULL THEN '9999-12-31'  -- Default for missing end\n            WHEN prd_end_dt < prd_start_dt THEN prd_start_dt\n            ELSE prd_end_dt\n        END AS prd_end_date,\n        ingested_at, -- remove if irrelevant downstream\n        updated_at\n    FROM source_table\n)\nSELECT \n    *\nFROM cleaned_data\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["prd_id"], "time_spine": null}, "model.dbt_transform.crm_sales_details": {"database": "dwh", "schema": "silver", "name": "crm_sales_details", "resource_type": "model", "package_name": "dbt_transform", "path": "silver/crm_sales_details.sql", "original_file_path": "models/silver/crm_sales_details.sql", "unique_id": "model.dbt_transform.crm_sales_details", "fqn": ["dbt_transform", "silver", "crm_sales_details"], "alias": "crm_sales_details", "checksum": {"name": "sha256", "checksum": "ac1e23caf8d6cb230fa1cbcaef023de60a08a6f873048f36dd5a9c4fa83b1aca"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "sls_ord_num", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Cleaned and standardized CRM sales transaction details.", "columns": {"sls_ord_num": {"name": "sls_ord_num", "description": "Order number of the sales transaction from CRM (bz_crm_sales_details.sls_ord_num).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_prd_key": {"name": "sls_prd_key", "description": "Product key sold in the transaction from CRM (bz_crm_sales_details.sls_prd_key).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_cust_id": {"name": "sls_cust_id", "description": "Customer ID who made the order from CRM (bz_crm_sales_details.sls_cust_id).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_order_dt": {"name": "sls_order_dt", "description": "Date when the order was placed, cleaned from CRM (bz_crm_sales_details.sls_order_dt).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_ship_dt": {"name": "sls_ship_dt", "description": "Date when the order was shipped, cleaned from CRM (bz_crm_sales_details.sls_ship_dt).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_due_dt": {"name": "sls_due_dt", "description": "Date when the order was due, cleaned from CRM (bz_crm_sales_details.sls_due_dt).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_sales": {"name": "sls_sales", "description": "Total sales amount from CRM (bz_crm_sales_details.sls_sales).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_quantity": {"name": "sls_quantity", "description": "Quantity of items sold from CRM (bz_crm_sales_details.sls_quantity).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sls_price": {"name": "sls_price", "description": "Unit price of the item from CRM (bz_crm_sales_details.sls_price).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_at": {"name": "ingested_at", "description": "Timestamp when the record was ingested into the raw layer, passed from bronze (bz_crm_sales_details.ingested_at).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the record was last updated in bronze (bz_crm_sales_details.updated_at).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/silver/schema.yml", "build_path": null, "unrendered_config": {"schema": "silver", "materialized": "incremental", "unique_key": "sls_ord_num"}, "created_at": 1743885923.5855901, "relation_name": "\"dwh\".\"silver\".\"crm_sales_details\"", "raw_code": "{{\n    config(\n        unique_key='sls_ord_num'\n    )\n}}\n-- Configures the model to enforce a unique key on sls_ord_num, though this is more informational since deduplication happens within the query via ROW_NUMBER(). This signals intent to DBT for potential optimizations or downstream checks.\n\nWITH deduped AS (\n    -- Purpose: Removes duplicate sales records from the bronze layer, keeping only the most recent entry\n    -- for each unique combination of order number (sls_ord_num) and product key (sls_prd_key).\n    SELECT *\n    FROM (\n        SELECT \n            *,\n            -- ROW_NUMBER assigns a unique number to each row within a partition of sls_ord_num and sls_prd_key,\n            -- ordered by updated_at DESC to prioritize the latest record. This ensures we handle cases where\n            -- the same order-product pair appears multiple times due to updates or ingestion errors.\n            ROW_NUMBER() OVER (PARTITION BY sls_ord_num, sls_prd_key ORDER BY updated_at DESC) AS rn\n        FROM {{ ref('bz_crm_sales_details') }}  \n        -- References the bronze table with raw sales data, \n        -- already converted to DATE types from INT.\n    ) t\n    WHERE rn = 1  \n    -- Filters to keep only the first row (latest record) per partition, effectively deduplicating.\n),\n\nproduct_lifecycle AS (\n    -- Purpose: Joins sales data with product lifecycle info to determine the active lifecycle period \n    -- for each sale, handling cases where a product (sls_prd_key) has multiple start/end dates in crm_prd_info.\n    SELECT \n        d.sls_ord_num,\n        d.sls_prd_key,\n        d.sls_cust_id,\n        d.sls_order_dt,  -- Comes from bronze as DATE or NULL (e.g., 0 \u2192 NULL).\n        d.sls_ship_dt,   -- Comes from bronze as DATE, validated as non-NULL in WHERE clause.\n        d.sls_due_dt,\n        d.sls_quantity,\n        d.sls_price,\n        d.sls_sales,\n        d.ingested_at,\n        d.updated_at,\n        p.prd_start_date,  -- Product lifecycle start date from crm_prd_info.\n        p.prd_end_date,    -- Product lifecycle end date from crm_prd_info.\n        -- ROW_NUMBER ranks lifecycle rows for each sls_ord_num, sls_prd_key pair. \n        -- The CASE prioritizes lifecycles where sls_ship_dt falls within prd_start_date and prd_end_date (rn = 1),\n        -- falling back to the latest end date (DESC) if no match (rn > 1). This ensures we pick the active \n        -- lifecycle for the shipment date, addressing multiple lifecycle entries per product.\n        ROW_NUMBER() OVER (PARTITION BY d.sls_ord_num, d.sls_prd_key \n                          ORDER BY CASE \n                                      WHEN d.sls_ship_dt >= p.prd_start_date \n                                           AND d.sls_ship_dt < p.prd_end_date \n                                      THEN 1 \n                                      ELSE 2 \n                                  END, p.prd_end_date DESC) AS rn\n    FROM deduped d\n    LEFT JOIN {{ ref('crm_prd_info') }} p  \n    -- LEFT JOIN ensures all sales records are kept, even if no \n    -- product info exists, though all sls_prd_key values should match.\n        ON d.sls_prd_key = p.prd_code\n    WHERE d.sls_ship_dt IS NOT NULL  \n    -- Ensures we only process rows with a valid shipment date, as this is \n    -- critical for lifecycle checks and fallback for sls_order_dt.\n),\n\ncleaned_sales_dates AS (\n    -- Purpose: Cleans and finalizes date fields, ensuring sls_order_dt is populated correctly using \n    -- sls_ship_dt when needed, based on the active product lifecycle.\n    SELECT \n        sls_ord_num,\n        sls_prd_key,\n        sls_cust_id,\n        -- CASE logic for sls_order_dt:\n        -- 1. If sls_order_dt is not NULL (valid from bronze), use it as-is.\n        -- 2. If sls_order_dt is NULL and sls_ship_dt falls within the active lifecycle (ensured by rn = 1),\n        --    use sls_ship_dt as a fallback. This addresses cases where the original order date was invalid (e.g., 0).\n        -- 3. Else, set to NULL (rare due to WHERE rn = 1 and lifecycle check).\n        CASE \n            WHEN sls_order_dt IS NOT NULL THEN sls_order_dt\n            WHEN sls_ship_dt >= prd_start_date \n                 AND sls_ship_dt < prd_end_date \n            THEN sls_ship_dt\n            ELSE NULL\n        END AS sls_order_dt,\n        sls_ship_dt,\n        sls_due_dt,\n        sls_quantity,\n        sls_price,\n        sls_sales,\n        ingested_at,\n        updated_at\n    FROM product_lifecycle\n    WHERE rn = 1  \n    -- Filters to only the top-ranked lifecycle row per sls_ord_num, sls_prd_key, ensuring we use the active lifecycle where sls_ship_dt fits, avoiding ambiguity from multiple matches.\n),\n\ncalculated_sales AS (\n    -- Purpose: Adjusts sales price and total sales values based on data quality rules, ensuring consistency \n    -- and accuracy in financial metrics.\n    SELECT \n        *,\n        -- Adjusts sls_price:\n        -- If sls_price is NULL or negative, calculate it as sls_sales / sls_quantity (avoiding division by 0 \n        -- with NULLIF). Otherwise, keep the original price. This corrects invalid or missing price data.\n        CASE \n            WHEN sls_price IS NULL OR sls_price < 0 \n            THEN sls_sales / NULLIF(sls_quantity, 0)\n            ELSE sls_price \n        END AS adjusted_sls_price,\n        -- Adjusts sls_sales:\n        -- If sls_sales is NULL, negative, or inconsistent with quantity * price, recalculate as \n        -- sls_quantity * ABS(sls_price) to ensure positive, logical totals. Otherwise, keep the original.\n        CASE \n            WHEN sls_sales IS NULL OR sls_sales < 0 OR sls_sales != sls_quantity * ABS(sls_price) \n            THEN sls_quantity * ABS(sls_price)\n            ELSE sls_sales \n        END AS adjusted_sls_sales\n    FROM cleaned_sales_dates\n)\n\nSELECT \n    -- Final output selects all cleaned and adjusted fields, renaming adjusted_sls_price and \n    -- adjusted_sls_sales to sls_price and sls_sales for downstream consistency.\n    sls_ord_num,\n    sls_prd_key,\n    sls_cust_id,\n    sls_order_dt,\n    sls_ship_dt,\n    sls_due_dt,\n    sls_quantity,\n    adjusted_sls_price AS sls_price,\n    adjusted_sls_sales AS sls_sales,\n    ingested_at,\n    updated_at\nFROM calculated_sales\n{% if is_incremental() %}\nWHERE updated_at > (SELECT MAX(updated_at) FROM {{ this }})  \n-- Incremental clause ensures only new or \n-- updated records are processed, improving \n-- performance on subsequent runs.\n{% endif %}", "language": "sql", "refs": [{"name": "bz_crm_sales_details", "package": null, "version": null}, {"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_transform.bz_crm_sales_details", "model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/crm_sales_details.sql", "compiled": true, "compiled_code": "\n-- Configures the model to enforce a unique key on sls_ord_num, though this is more informational since deduplication happens within the query via ROW_NUMBER(). This signals intent to DBT for potential optimizations or downstream checks.\n\nWITH deduped AS (\n    -- Purpose: Removes duplicate sales records from the bronze layer, keeping only the most recent entry\n    -- for each unique combination of order number (sls_ord_num) and product key (sls_prd_key).\n    SELECT *\n    FROM (\n        SELECT \n            *,\n            -- ROW_NUMBER assigns a unique number to each row within a partition of sls_ord_num and sls_prd_key,\n            -- ordered by updated_at DESC to prioritize the latest record. This ensures we handle cases where\n            -- the same order-product pair appears multiple times due to updates or ingestion errors.\n            ROW_NUMBER() OVER (PARTITION BY sls_ord_num, sls_prd_key ORDER BY updated_at DESC) AS rn\n        FROM \"dwh\".\"bronze\".\"bz_crm_sales_details\"  \n        -- References the bronze table with raw sales data, \n        -- already converted to DATE types from INT.\n    ) t\n    WHERE rn = 1  \n    -- Filters to keep only the first row (latest record) per partition, effectively deduplicating.\n),\n\nproduct_lifecycle AS (\n    -- Purpose: Joins sales data with product lifecycle info to determine the active lifecycle period \n    -- for each sale, handling cases where a product (sls_prd_key) has multiple start/end dates in crm_prd_info.\n    SELECT \n        d.sls_ord_num,\n        d.sls_prd_key,\n        d.sls_cust_id,\n        d.sls_order_dt,  -- Comes from bronze as DATE or NULL (e.g., 0 \u2192 NULL).\n        d.sls_ship_dt,   -- Comes from bronze as DATE, validated as non-NULL in WHERE clause.\n        d.sls_due_dt,\n        d.sls_quantity,\n        d.sls_price,\n        d.sls_sales,\n        d.ingested_at,\n        d.updated_at,\n        p.prd_start_date,  -- Product lifecycle start date from crm_prd_info.\n        p.prd_end_date,    -- Product lifecycle end date from crm_prd_info.\n        -- ROW_NUMBER ranks lifecycle rows for each sls_ord_num, sls_prd_key pair. \n        -- The CASE prioritizes lifecycles where sls_ship_dt falls within prd_start_date and prd_end_date (rn = 1),\n        -- falling back to the latest end date (DESC) if no match (rn > 1). This ensures we pick the active \n        -- lifecycle for the shipment date, addressing multiple lifecycle entries per product.\n        ROW_NUMBER() OVER (PARTITION BY d.sls_ord_num, d.sls_prd_key \n                          ORDER BY CASE \n                                      WHEN d.sls_ship_dt >= p.prd_start_date \n                                           AND d.sls_ship_dt < p.prd_end_date \n                                      THEN 1 \n                                      ELSE 2 \n                                  END, p.prd_end_date DESC) AS rn\n    FROM deduped d\n    LEFT JOIN \"dwh\".\"silver\".\"crm_prd_info\" p  \n    -- LEFT JOIN ensures all sales records are kept, even if no \n    -- product info exists, though all sls_prd_key values should match.\n        ON d.sls_prd_key = p.prd_code\n    WHERE d.sls_ship_dt IS NOT NULL  \n    -- Ensures we only process rows with a valid shipment date, as this is \n    -- critical for lifecycle checks and fallback for sls_order_dt.\n),\n\ncleaned_sales_dates AS (\n    -- Purpose: Cleans and finalizes date fields, ensuring sls_order_dt is populated correctly using \n    -- sls_ship_dt when needed, based on the active product lifecycle.\n    SELECT \n        sls_ord_num,\n        sls_prd_key,\n        sls_cust_id,\n        -- CASE logic for sls_order_dt:\n        -- 1. If sls_order_dt is not NULL (valid from bronze), use it as-is.\n        -- 2. If sls_order_dt is NULL and sls_ship_dt falls within the active lifecycle (ensured by rn = 1),\n        --    use sls_ship_dt as a fallback. This addresses cases where the original order date was invalid (e.g., 0).\n        -- 3. Else, set to NULL (rare due to WHERE rn = 1 and lifecycle check).\n        CASE \n            WHEN sls_order_dt IS NOT NULL THEN sls_order_dt\n            WHEN sls_ship_dt >= prd_start_date \n                 AND sls_ship_dt < prd_end_date \n            THEN sls_ship_dt\n            ELSE NULL\n        END AS sls_order_dt,\n        sls_ship_dt,\n        sls_due_dt,\n        sls_quantity,\n        sls_price,\n        sls_sales,\n        ingested_at,\n        updated_at\n    FROM product_lifecycle\n    WHERE rn = 1  \n    -- Filters to only the top-ranked lifecycle row per sls_ord_num, sls_prd_key, ensuring we use the active lifecycle where sls_ship_dt fits, avoiding ambiguity from multiple matches.\n),\n\ncalculated_sales AS (\n    -- Purpose: Adjusts sales price and total sales values based on data quality rules, ensuring consistency \n    -- and accuracy in financial metrics.\n    SELECT \n        *,\n        -- Adjusts sls_price:\n        -- If sls_price is NULL or negative, calculate it as sls_sales / sls_quantity (avoiding division by 0 \n        -- with NULLIF). Otherwise, keep the original price. This corrects invalid or missing price data.\n        CASE \n            WHEN sls_price IS NULL OR sls_price < 0 \n            THEN sls_sales / NULLIF(sls_quantity, 0)\n            ELSE sls_price \n        END AS adjusted_sls_price,\n        -- Adjusts sls_sales:\n        -- If sls_sales is NULL, negative, or inconsistent with quantity * price, recalculate as \n        -- sls_quantity * ABS(sls_price) to ensure positive, logical totals. Otherwise, keep the original.\n        CASE \n            WHEN sls_sales IS NULL OR sls_sales < 0 OR sls_sales != sls_quantity * ABS(sls_price) \n            THEN sls_quantity * ABS(sls_price)\n            ELSE sls_sales \n        END AS adjusted_sls_sales\n    FROM cleaned_sales_dates\n)\n\nSELECT \n    -- Final output selects all cleaned and adjusted fields, renaming adjusted_sls_price and \n    -- adjusted_sls_sales to sls_price and sls_sales for downstream consistency.\n    sls_ord_num,\n    sls_prd_key,\n    sls_cust_id,\n    sls_order_dt,\n    sls_ship_dt,\n    sls_due_dt,\n    sls_quantity,\n    adjusted_sls_price AS sls_price,\n    adjusted_sls_sales AS sls_sales,\n    ingested_at,\n    updated_at\nFROM calculated_sales\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_transform.erp_cust_az12": {"database": "dwh", "schema": "silver", "name": "erp_cust_az12", "resource_type": "model", "package_name": "dbt_transform", "path": "silver/erp_cust_az12.sql", "original_file_path": "models/silver/erp_cust_az12.sql", "unique_id": "model.dbt_transform.erp_cust_az12", "fqn": ["dbt_transform", "silver", "erp_cust_az12"], "alias": "erp_cust_az12", "checksum": {"name": "sha256", "checksum": "20752a4ee7c95f97a3a380bb20898b9be49fdd595119d7a96ee2c26495f31d1c"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "cid", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Cleaned and standardized ERP customer information.", "columns": {"cid": {"name": "cid", "description": "Customer ID from ERP (bz_erp_cust_az12.cid).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "bdate": {"name": "bdate", "description": "Birthdate of the customer from ERP (bz_erp_cust_az12.bdate).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "gen": {"name": "gen", "description": "Gender of the customer from ERP (bz_erp_cust_az12.gen), standardized to 'Male', 'Female', or 'n/a'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_at": {"name": "ingested_at", "description": "Timestamp when the record was ingested into the raw layer, passed from bronze (bz_erp_cust_az12.ingested_at).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the record was last updated in bronze (bz_erp_cust_az12.updated_at).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/silver/schema.yml", "build_path": null, "unrendered_config": {"schema": "silver", "materialized": "incremental", "unique_key": "cid"}, "created_at": 1743885923.586375, "relation_name": "\"dwh\".\"silver\".\"erp_cust_az12\"", "raw_code": "{{ config(\n    unique_key= 'cid'\n) }}\n\nWITH source as (\n    SELECT \n        *\n    FROM {{ ref('bz_erp_cust_az12') }}\n\n),\ncleaned_erp_cust as (\n    SELECT \n        CASE\n            WHEN cid LIKE 'NAS%' THEN Substr(cid, 4, Length(cid))\n            ELSE cid\n            END AS cid,\n            CASE\n            WHEN bdate > CURRENT_DATE THEN NULL\n            ELSE bdate\n            END AS bdate,\n            CASE\n            WHEN Upper(Trim(gen)) IN ( 'M', 'MALE' ) THEN 'Male'\n            WHEN Upper(Trim(gen)) IN ( 'F', 'FEMALE' ) THEN 'Female'\n            ELSE 'n/a'\n            END AS gen,\n            ingested_at,\n            updated_at\n    FROM source\n)\nSELECT \n    *\nFROM cleaned_erp_cust\n{% if is_incremental() %}\nWHERE updated_at > (SELECT MAX(updated_at) FROM {{ this }})\n{% endif %}", "language": "sql", "refs": [{"name": "bz_erp_cust_az12", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_transform.bz_erp_cust_az12"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/erp_cust_az12.sql", "compiled": true, "compiled_code": "\n\nWITH source as (\n    SELECT \n        *\n    FROM \"dwh\".\"bronze\".\"bz_erp_cust_az12\"\n\n),\ncleaned_erp_cust as (\n    SELECT \n        CASE\n            WHEN cid LIKE 'NAS%' THEN Substr(cid, 4, Length(cid))\n            ELSE cid\n            END AS cid,\n            CASE\n            WHEN bdate > CURRENT_DATE THEN NULL\n            ELSE bdate\n            END AS bdate,\n            CASE\n            WHEN Upper(Trim(gen)) IN ( 'M', 'MALE' ) THEN 'Male'\n            WHEN Upper(Trim(gen)) IN ( 'F', 'FEMALE' ) THEN 'Female'\n            ELSE 'n/a'\n            END AS gen,\n            ingested_at,\n            updated_at\n    FROM source\n)\nSELECT \n    *\nFROM cleaned_erp_cust\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_transform.erp_px_cat_g1v2": {"database": "dwh", "schema": "silver", "name": "erp_px_cat_g1v2", "resource_type": "model", "package_name": "dbt_transform", "path": "silver/erp_px_cat_g1v2.sql", "original_file_path": "models/silver/erp_px_cat_g1v2.sql", "unique_id": "model.dbt_transform.erp_px_cat_g1v2", "fqn": ["dbt_transform", "silver", "erp_px_cat_g1v2"], "alias": "erp_px_cat_g1v2", "checksum": {"name": "sha256", "checksum": "04fe02f66a52238d7c825602dbc18136b73ee43907dfe72915f2d2ee694f773e"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Cleaned and standardized ERP product category data.", "columns": {"id": {"name": "id", "description": "Product category ID from ERP (bz_erp_px_cat_g1v2.id).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cat": {"name": "cat", "description": "High-level product category from ERP (bz_erp_px_cat_g1v2.cat).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "subcat": {"name": "subcat", "description": "Product subcategory from ERP (bz_erp_px_cat_g1v2.subcat).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "maintenance_status": {"name": "maintenance_status", "description": "Maintenance status of the product category from ERP (bz_erp_px_cat_g1v2.maintenance), standardized to 'Yes' or 'No'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_at": {"name": "ingested_at", "description": "Timestamp when the record was ingested into the raw layer, passed from bronze (bz_erp_px_cat_g1v2.ingested_at).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the record was last updated in bronze (bz_erp_px_cat_g1v2.updated_at).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/silver/schema.yml", "build_path": null, "unrendered_config": {"schema": "silver", "materialized": "incremental", "unique_key": "id"}, "created_at": 1743885923.58782, "relation_name": "\"dwh\".\"silver\".\"erp_px_cat_g1v2\"", "raw_code": "{{\n    config(\n        unique_key='id'\n    )\n}}\nWITH source AS (\n    SELECT\n        * \n    FROM {{ ref('bz_erp_px_cat_g1v2') }}\n),\ncleaned_prd_cat AS (\n    SELECT\n        TRIM(id) AS id,\n        TRIM(cat) AS cat,\n        TRIM(subcat) AS subcat,\n        TRIM(maintenance) AS maintenance_status,\n        ingested_at,\n        updated_at\n    FROM source\n)\nSELECT \n    *\nFROM cleaned_prd_cat\n{% if is_incremental() %}\nWHERE updated_at > (SELECT MAX(updated_at) FROM {{ this }})\n{% endif %}", "language": "sql", "refs": [{"name": "bz_erp_px_cat_g1v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_transform.bz_erp_px_cat_g1v2"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/erp_px_cat_g1v2.sql", "compiled": true, "compiled_code": "\nWITH source AS (\n    SELECT\n        * \n    FROM \"dwh\".\"bronze\".\"bz_erp_px_cat_g1v2\"\n),\ncleaned_prd_cat AS (\n    SELECT\n        TRIM(id) AS id,\n        TRIM(cat) AS cat,\n        TRIM(subcat) AS subcat,\n        TRIM(maintenance) AS maintenance_status,\n        ingested_at,\n        updated_at\n    FROM source\n)\nSELECT \n    *\nFROM cleaned_prd_cat\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_transform.erp_loc_a101": {"database": "dwh", "schema": "silver", "name": "erp_loc_a101", "resource_type": "model", "package_name": "dbt_transform", "path": "silver/erp_loc_a101.sql", "original_file_path": "models/silver/erp_loc_a101.sql", "unique_id": "model.dbt_transform.erp_loc_a101", "fqn": ["dbt_transform", "silver", "erp_loc_a101"], "alias": "erp_loc_a101", "checksum": {"name": "sha256", "checksum": "d28f16a77e49e7c7a77a656245dbd8b54c9c4583d56e75f1100f6e1418d78202"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "cid", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Cleaned and standardized ERP customer location data.", "columns": {"cid": {"name": "cid", "description": "Customer ID from ERP (bz_erp_loc_a101.cid).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cntry": {"name": "cntry", "description": "Country location of the customer from ERP (bz_erp_loc_a101.cntry).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_at": {"name": "ingested_at", "description": "Timestamp when the record was ingested into the raw layer, passed from bronze (bz_erp_loc_a101.ingested_at).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the record was last updated in bronze (bz_erp_loc_a101.updated_at).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/silver/schema.yml", "build_path": null, "unrendered_config": {"schema": "silver", "materialized": "incremental", "unique_key": "cid"}, "created_at": 1743885923.5869381, "relation_name": "\"dwh\".\"silver\".\"erp_loc_a101\"", "raw_code": "{{\n    config(\n        unique_key='cid'\n    )\n}}\nWITH source AS (\n    SELECT\n        * \n    FROM {{ ref('bz_erp_loc_a101') }}\n),\ncleaned_erp_loc as (\n    SELECT\n        replace (cid, '-', '') AS cid,\n        CASE\n            WHEN TRIM(cntry) = 'DE' THEN 'Germany'\n            WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'\n            WHEN TRIM(cntry) = ''\n            OR TRIM(cntry) IS NULL THEN 'n/a'\n            ELSE TRIM(cntry)\n        END AS cntry,\n        ingested_at,\n        updated_at\n    FROM source\n)\nSELECT \n    *\nFROM cleaned_erp_loc\n\n{% if is_incremental() %}\nWHERE updated_at > (SELECT MAX(updated_at) FROM {{ this }})\n{% endif %}", "language": "sql", "refs": [{"name": "bz_erp_loc_a101", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_transform.bz_erp_loc_a101"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/erp_loc_a101.sql", "compiled": true, "compiled_code": "\nWITH source AS (\n    SELECT\n        * \n    FROM \"dwh\".\"bronze\".\"bz_erp_loc_a101\"\n),\ncleaned_erp_loc as (\n    SELECT\n        replace (cid, '-', '') AS cid,\n        CASE\n            WHEN TRIM(cntry) = 'DE' THEN 'Germany'\n            WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'\n            WHEN TRIM(cntry) = ''\n            OR TRIM(cntry) IS NULL THEN 'n/a'\n            ELSE TRIM(cntry)\n        END AS cntry,\n        ingested_at,\n        updated_at\n    FROM source\n)\nSELECT \n    *\nFROM cleaned_erp_loc\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_transform.crm_cust_info": {"database": "dwh", "schema": "silver", "name": "crm_cust_info", "resource_type": "model", "package_name": "dbt_transform", "path": "silver/crm_cust_info.sql", "original_file_path": "models/silver/crm_cust_info.sql", "unique_id": "model.dbt_transform.crm_cust_info", "fqn": ["dbt_transform", "silver", "crm_cust_info"], "alias": "crm_cust_info", "checksum": {"name": "sha256", "checksum": "e308ddc33442198d442bef73213015280185a180fe80c57e8a1051972d13b843"}, "config": {"enabled": true, "alias": null, "schema": "silver", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "cst_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Cleaned and standardized CRM customer information including personal details and status.", "columns": {"cst_id": {"name": "cst_id", "description": "Unique identifier for the customer from CRM (bz_crm_cust_info.cst_id).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_code": {"name": "cst_code", "description": "Unique customer key from CRM (bz_crm_cust_info.cst_key).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_firstname": {"name": "cst_firstname", "description": "First name of the customer from CRM (bz_crm_cust_info.cst_firstname).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_lastname": {"name": "cst_lastname", "description": "Last name of the customer from CRM (bz_crm_cust_info.cst_lastname).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_marital_status": {"name": "cst_marital_status", "description": "Customer's marital status from CRM (bz_crm_cust_info.cst_marital_status), standardized to 'Married', 'Single', or 'n/a'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_gndr": {"name": "cst_gndr", "description": "Gender of the customer from CRM (bz_crm_cust_info.cst_gndr), standardized to 'Male', 'Female', or 'n/a'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_email": {"name": "cst_email", "description": "Email address of the customer from CRM (bz_crm_cust_info.email).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_place": {"name": "cst_place", "description": "Place or city of residence from CRM (bz_crm_cust_info.place_of_residence).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_postal_code": {"name": "cst_postal_code", "description": "Postal code of the customer from CRM (bz_crm_cust_info.postal_code).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "cst_create_date": {"name": "cst_create_date", "description": "Date the customer profile was created in CRM (bz_crm_cust_info.cst_create_date).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "ingested_at": {"name": "ingested_at", "description": "Timestamp when the record was ingested into the raw layer, passed from bronze (bz_crm_cust_info.ingested_at).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_at": {"name": "updated_at", "description": "Timestamp when the record was last updated in bronze (bz_crm_cust_info.updated_at), used to monitor changes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/silver/schema.yml", "build_path": null, "unrendered_config": {"schema": "silver", "materialized": "incremental", "unique_key": "cst_id"}, "created_at": 1743885923.582737, "relation_name": "\"dwh\".\"silver\".\"crm_cust_info\"", "raw_code": "{{ config(\n    unique_key= 'cst_id'\n) }}\nWITH source AS (\n    SELECT \n        *\n    FROM {{ ref('bz_crm_cust_info') }}\n),\ncleaned_customer AS (\n    SELECT\n        cst_id,\n        cst_key AS cst_code,\n        TRIM(cst_firstname) AS cst_firstname,\n        TRIM(cst_lastname) AS cst_lastname,\n        CASE\n            WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'\n            WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'\n            ELSE 'n/a'\n        END AS cst_marital_status,\n        CASE\n            WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'\n            WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'\n            ELSE 'n/a'\n        END AS cst_gndr,\n        cst_create_date::DATE as cst_create_date,\n        COALESCE(TRIM(cst_email), 'unknown') AS cst_email,\n        COALESCE(cst_place, 'unknown') AS cst_place,\n        COALESCE(TRIM(CAST(cst_postal_code AS VARCHAR)), 'unknown') AS cst_postal_code,\n        ingested_at,\n        updated_at\n    FROM\n        source\n)\nSELECT\n    *\nFROM\n    cleaned_customer\n\n{% if is_incremental() %}\nWHERE updated_at > (SELECT MAX(updated_at) FROM {{ this }})\n{% endif %}", "language": "sql", "refs": [{"name": "bz_crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_transform.bz_crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/crm_cust_info.sql", "compiled": true, "compiled_code": "\nWITH source AS (\n    SELECT \n        *\n    FROM \"dwh\".\"bronze\".\"bz_crm_cust_info\"\n),\ncleaned_customer AS (\n    SELECT\n        cst_id,\n        cst_key AS cst_code,\n        TRIM(cst_firstname) AS cst_firstname,\n        TRIM(cst_lastname) AS cst_lastname,\n        CASE\n            WHEN UPPER(TRIM(cst_marital_status)) = 'M' THEN 'Married'\n            WHEN UPPER(TRIM(cst_marital_status)) = 'S' THEN 'Single'\n            ELSE 'n/a'\n        END AS cst_marital_status,\n        CASE\n            WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'\n            WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'\n            ELSE 'n/a'\n        END AS cst_gndr,\n        cst_create_date::DATE as cst_create_date,\n        COALESCE(TRIM(cst_email), 'unknown') AS cst_email,\n        COALESCE(cst_place, 'unknown') AS cst_place,\n        COALESCE(TRIM(CAST(cst_postal_code AS VARCHAR)), 'unknown') AS cst_postal_code,\n        ingested_at,\n        updated_at\n    FROM\n        source\n)\nSELECT\n    *\nFROM\n    cleaned_customer\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["cst_id"], "time_spine": null}, "model.dbt_transform.fact_sales": {"database": "dwh", "schema": "gold", "name": "fact_sales", "resource_type": "model", "package_name": "dbt_transform", "path": "gold/fact_sales.sql", "original_file_path": "models/gold/fact_sales.sql", "unique_id": "model.dbt_transform.fact_sales", "fqn": ["dbt_transform", "gold", "fact_sales"], "alias": "fact_sales", "checksum": {"name": "sha256", "checksum": "c97a39749cfafe07ee189f80c0866eed8c63f5f58bc74764571e211111d3f23c"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "depends_on": ["{{ ref(\"dim_customers_current\") }}", "{{ ref(\"dim_products_current\") }}"]}, "tags": [], "description": "Sales fact table derived from the dim_customers and dim_products", "columns": {"sales_details_key": {"name": "sales_details_key", "description": "Unique surrogate key for each sales transaction. Generated using md5 algorithm combining columns sales_order_number, product_key and customer_key.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sales_order_number": {"name": "sales_order_number", "description": "Identifier for the sales order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_key": {"name": "product_key", "description": "Foreign key linking to the dim_products.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_key": {"name": "customer_key", "description": "Foreign key linking to the dim_customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sales_amount": {"name": "sales_amount", "description": "Total sales amount for the transaction from CRM, adjusted in silver layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sales_quantity": {"name": "sales_quantity", "description": "Total sales amount for the transaction from CRM, adjusted in silver layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sales_price": {"name": "sales_price", "description": "Unit price of each product from CRM, adjusted in silver layer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sales_order_date": {"name": "sales_order_date", "description": "Date when the order was placed, cleaned from CRM data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sales_shipping_date": {"name": "sales_shipping_date", "description": "Shipping date of the order, cleaned from CRM data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "sales_due_date": {"name": "sales_due_date", "description": "Due date for the sales order, cleaned from CRM data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/gold/schema.yml", "build_path": null, "unrendered_config": {"schema": "gold", "materialized": "view", "depends_on": ["{{ ref(\"dim_customers_current\") }}", "{{ ref(\"dim_products_current\") }}"]}, "created_at": 1743885923.722772, "relation_name": "\"dwh\".\"gold\".\"fact_sales\"", "raw_code": "{{ config(\n    depends_on=['{{ ref(\"dim_customers_current\") }}', '{{ ref(\"dim_products_current\") }}']\n) }}\n\nWITH customer_dim AS (\n    SELECT *\n    FROM {{ ref('dim_customers_current') }}\n),\nproducts_dim AS (\n    SELECT *\n    FROM {{ ref('dim_products_current') }}\n),\nsource_sales_data AS (\n    SELECT *\n    FROM {{ ref('crm_sales_details') }}\n),\naggregated_sales_data AS (\n    SELECT\n        sd.sls_ord_num AS sales_order_number,\n        sd.sls_order_dt AS sales_order_date,\n        sd.sls_ship_dt AS sales_shipping_date,\n        sd.sls_due_dt AS sales_due_date,\n        sd.sls_sales AS sales_amount,\n        sd.sls_quantity AS sales_quantity,\n        sd.sls_price AS sales_price,\n        dp.product_key,\n        dc.customer_key\n    FROM source_sales_data sd\n    LEFT JOIN customer_dim dc ON sd.sls_cust_id = dc.customer_id\n    LEFT JOIN products_dim dp ON sd.sls_prd_key = dp.product_code\n)\nSELECT\n    MD5(COALESCE(sales_order_number, '') || COALESCE(product_key::VARCHAR, '0') || COALESCE(customer_key::VARCHAR, '0')) AS sales_details_key,  -- Fixed name and null handling\n    product_key,\n    customer_key,\n    sales_order_number,\n    sales_order_date,\n    sales_shipping_date,\n    sales_due_date,\n    sales_amount,\n    sales_quantity,\n    sales_price\nFROM aggregated_sales_data", "language": "sql", "refs": [{"name": "dim_customers_current", "package": null, "version": null}, {"name": "dim_products_current", "package": null, "version": null}, {"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_transform.dim_customers_current", "model.dbt_transform.dim_products_current", "model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/fact_sales.sql", "compiled": true, "compiled_code": "\n\nWITH customer_dim AS (\n    SELECT *\n    FROM \"dwh\".\"gold\".\"dim_customers_current\"\n),\nproducts_dim AS (\n    SELECT *\n    FROM \"dwh\".\"gold\".\"dim_products_current\"\n),\nsource_sales_data AS (\n    SELECT *\n    FROM \"dwh\".\"silver\".\"crm_sales_details\"\n),\naggregated_sales_data AS (\n    SELECT\n        sd.sls_ord_num AS sales_order_number,\n        sd.sls_order_dt AS sales_order_date,\n        sd.sls_ship_dt AS sales_shipping_date,\n        sd.sls_due_dt AS sales_due_date,\n        sd.sls_sales AS sales_amount,\n        sd.sls_quantity AS sales_quantity,\n        sd.sls_price AS sales_price,\n        dp.product_key,\n        dc.customer_key\n    FROM source_sales_data sd\n    LEFT JOIN customer_dim dc ON sd.sls_cust_id = dc.customer_id\n    LEFT JOIN products_dim dp ON sd.sls_prd_key = dp.product_code\n)\nSELECT\n    MD5(COALESCE(sales_order_number, '') || COALESCE(product_key::VARCHAR, '0') || COALESCE(customer_key::VARCHAR, '0')) AS sales_details_key,  -- Fixed name and null handling\n    product_key,\n    customer_key,\n    sales_order_number,\n    sales_order_date,\n    sales_shipping_date,\n    sales_due_date,\n    sales_amount,\n    sales_quantity,\n    sales_price\nFROM aggregated_sales_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["sales_details_key"], "time_spine": null}, "model.dbt_transform.dim_customers_current": {"database": "dwh", "schema": "gold", "name": "dim_customers_current", "resource_type": "model", "package_name": "dbt_transform", "path": "gold/dim_customers_current.sql", "original_file_path": "models/gold/dim_customers_current.sql", "unique_id": "model.dbt_transform.dim_customers_current", "fqn": ["dbt_transform", "gold", "dim_customers_current"], "alias": "dim_customers_current", "checksum": {"name": "sha256", "checksum": "5a09d4f298a6d579ee692be0bf7bb3149598aba68248aa4ee976e68553d02718"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Customer dimension table, integrating CRM and ERP customer data.", "columns": {"customer_key": {"name": "customer_key", "description": "Surrogate key for the customer dimension, ensuring uniqueness.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_id": {"name": "customer_id", "description": "Business key representing the customer ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_code": {"name": "customer_code", "description": "Customer key from CRM, used to link with ERP data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_firstname": {"name": "customer_firstname", "description": "First name of the customer from CRM", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_lastname": {"name": "customer_lastname", "description": "Last name of the customer from CRM", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_birthdate": {"name": "customer_birthdate", "description": "Birthdate of the customer from ERP (erp_cust_az12).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_gender": {"name": "customer_gender", "description": "Gender of the customer as recorded in CRM or ERP with preference given to CRM database.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_marital_status": {"name": "customer_marital_status", "description": "Customer's marital status from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_country": {"name": "customer_country", "description": "Country of the customer from ERP (erp_loc_a101).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_email": {"name": "customer_email", "description": "Email address of the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_place": {"name": "customer_place", "description": "Place or city of the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_postal_code": {"name": "customer_postal_code", "description": "Postal code of the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_create_date": {"name": "customer_create_date", "description": "Date when the customer record was created in CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/gold/schema.yml", "build_path": null, "unrendered_config": {"schema": "gold", "materialized": "view"}, "created_at": 1743885923.714029, "relation_name": "\"dwh\".\"gold\".\"dim_customers_current\"", "raw_code": "WITH current_customer_data AS (\n    SELECT\n        cst_id AS customer_id,\n        cst_code AS customer_code,\n        cst_firstname AS customer_firstname,\n        cst_lastname AS customer_lastname,\n        erp_birthdate AS customer_birthdate,\n        CASE\n            WHEN cst_gndr != 'n/a' THEN cst_gndr\n            ELSE COALESCE(erp_gender, 'n/a')\n        END AS customer_gender,\n        cst_marital_status AS customer_marital_status,\n        erp_country AS customer_country,\n        cst_email AS customer_email,\n        cst_place AS customer_place,\n        cst_postal_code AS customer_postal_code,\n        cst_create_date AS customer_create_date\n    FROM {{ ref('customers_snapshot') }}\n    WHERE dbt_valid_to = '9999-12-31'  \n)\nSELECT\n    ROW_NUMBER() OVER (ORDER BY customer_id) AS customer_key,\n    *\nFROM current_customer_data", "language": "sql", "refs": [{"name": "customers_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.dbt_transform.customers_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/dim_customers_current.sql", "compiled": true, "compiled_code": "WITH current_customer_data AS (\n    SELECT\n        cst_id AS customer_id,\n        cst_code AS customer_code,\n        cst_firstname AS customer_firstname,\n        cst_lastname AS customer_lastname,\n        erp_birthdate AS customer_birthdate,\n        CASE\n            WHEN cst_gndr != 'n/a' THEN cst_gndr\n            ELSE COALESCE(erp_gender, 'n/a')\n        END AS customer_gender,\n        cst_marital_status AS customer_marital_status,\n        erp_country AS customer_country,\n        cst_email AS customer_email,\n        cst_place AS customer_place,\n        cst_postal_code AS customer_postal_code,\n        cst_create_date AS customer_create_date\n    FROM \"dwh\".\"snapshots\".\"customers_snapshot\"\n    WHERE dbt_valid_to = '9999-12-31'  \n)\nSELECT\n    ROW_NUMBER() OVER (ORDER BY customer_id) AS customer_key,\n    *\nFROM current_customer_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_key"], "time_spine": null}, "model.dbt_transform.dim_products_current": {"database": "dwh", "schema": "gold", "name": "dim_products_current", "resource_type": "model", "package_name": "dbt_transform", "path": "gold/dim_products_current.sql", "original_file_path": "models/gold/dim_products_current.sql", "unique_id": "model.dbt_transform.dim_products_current", "fqn": ["dbt_transform", "gold", "dim_products_current"], "alias": "dim_products_current", "checksum": {"name": "sha256", "checksum": "d48d4fdf3aa709a02ea650d68f949bdca6e5de7a47eaba27e58c374780d9131f"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Product dimension table, integrating CRM and ERP product data for current state.", "columns": {"product_key": {"name": "product_key", "description": "Surrogate key for the product dimension.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "Business key representing the product ID from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_code": {"name": "product_code", "description": "Product code derived from CRM (part of prd_key).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_name": {"name": "product_name", "description": "Name of the product from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_cat_id": {"name": "product_cat_id", "description": "Category ID derived from CRM (part of prd_key).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_category": {"name": "product_category", "description": "High-level category of the product from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_subcategory": {"name": "product_subcategory", "description": "More specific classification within a product category from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_maintenance_status": {"name": "product_maintenance_status", "description": "Maintenance status of the product from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_cost": {"name": "product_cost", "description": "Cost of the product from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_line": {"name": "product_line", "description": "Product line category from CRM (e.g., Mountains, Road).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_start_date": {"name": "product_start_date", "description": "Date when the product became available from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_end_date": {"name": "product_end_date", "description": "Date when the product was discontinued from CRM (9999-12-31 if active).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/gold/schema.yml", "build_path": null, "unrendered_config": {"schema": "gold", "materialized": "view"}, "created_at": 1743885923.719085, "relation_name": "\"dwh\".\"gold\".\"dim_products_current\"", "raw_code": "WITH aggregated_product_data AS (\n    SELECT\n        prd_id AS product_id,\n        prd_code AS product_code,\n        prd_nm AS product_name,\n        cat_id AS product_cat_id,\n        erp_cat AS product_category,\n        erp_subcat AS product_subcategory,\n        erp_maintenance_status AS product_maintenance_status,\n        prd_cost AS product_cost,\n        prd_line AS product_line,\n        prd_start_date AS product_start_date,\n        prd_end_date AS product_end_date\n    FROM {{ ref('products_snapshot') }}\n    WHERE dbt_valid_to = '9999-12-31'\n)\nSELECT\n    ROW_NUMBER() OVER (ORDER BY product_id) AS product_key,\n    *\nFROM aggregated_product_data", "language": "sql", "refs": [{"name": "products_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.dbt_transform.products_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/dim_products_current.sql", "compiled": true, "compiled_code": "WITH aggregated_product_data AS (\n    SELECT\n        prd_id AS product_id,\n        prd_code AS product_code,\n        prd_nm AS product_name,\n        cat_id AS product_cat_id,\n        erp_cat AS product_category,\n        erp_subcat AS product_subcategory,\n        erp_maintenance_status AS product_maintenance_status,\n        prd_cost AS product_cost,\n        prd_line AS product_line,\n        prd_start_date AS product_start_date,\n        prd_end_date AS product_end_date\n    FROM \"dwh\".\"snapshots\".\"products_snapshot\"\n    WHERE dbt_valid_to = '9999-12-31'\n)\nSELECT\n    ROW_NUMBER() OVER (ORDER BY product_id) AS product_key,\n    *\nFROM aggregated_product_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["product_key"], "time_spine": null}, "model.dbt_transform.dim_products_hist": {"database": "dwh", "schema": "gold", "name": "dim_products_hist", "resource_type": "model", "package_name": "dbt_transform", "path": "gold/dim_products_hist.sql", "original_file_path": "models/gold/dim_products_hist.sql", "unique_id": "model.dbt_transform.dim_products_hist", "fqn": ["dbt_transform", "gold", "dim_products_hist"], "alias": "dim_products_hist", "checksum": {"name": "sha256", "checksum": "e4da844f216353fc2dfedc040c0c26d2f460bcb5f11500e1cb68581ef6b5b776"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Historical product dimension table with SCD2 versioning, integrating CRM and ERP data.", "columns": {"product_key": {"name": "product_key", "description": "Surrogate key for each historical version of a product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_id": {"name": "product_id", "description": "Business key representing the product ID from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_code": {"name": "product_code", "description": "Product code derived from CRM (part of prd_key).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_name": {"name": "product_name", "description": "Name of the product from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_cat_id": {"name": "product_cat_id", "description": "Category ID derived from CRM (part of prd_key).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_category": {"name": "product_category", "description": "High-level category of the product from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_subcategory": {"name": "product_subcategory", "description": "More specific classification within a product category from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_maintenance_status": {"name": "product_maintenance_status", "description": "Maintenance status of the product from ERP.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_cost": {"name": "product_cost", "description": "Cost of the product from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_line": {"name": "product_line", "description": "Product line category from CRM (e.g., Mountains, Road).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_start_date": {"name": "product_start_date", "description": "Date when the product became available from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "product_end_date": {"name": "product_end_date", "description": "Date when the product was discontinued from CRM (9999-12-31 if active).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "valid_from": {"name": "valid_from", "description": "Start date of this version\u2019s validity (SCD2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "valid_to": {"name": "valid_to", "description": "End date of this version\u2019s validity (SCD2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/gold/schema.yml", "build_path": null, "unrendered_config": {"schema": "gold", "materialized": "view"}, "created_at": 1743885923.720296, "relation_name": "\"dwh\".\"gold\".\"dim_products_hist\"", "raw_code": "WITH aggregated_product_h AS (\n    SELECT\n        prd_id AS product_id,\n        prd_code AS product_code,\n        prd_nm AS product_name,\n        cat_id AS product_cat_id,\n        erp_cat AS product_category,\n        erp_subcat AS product_subcategory,\n        erp_maintenance_status AS product_maintenance_status,\n        prd_cost AS product_cost,\n        prd_line AS product_line,\n        prd_start_date AS product_start_date,\n        prd_end_date AS product_end_date,\n        dbt_valid_from AS valid_from,\n        dbt_valid_to AS valid_to\n    FROM {{ ref('products_snapshot') }}\n)\nSELECT\n    ROW_NUMBER() OVER (ORDER BY product_id, valid_from) AS product_key,\n    *\nFROM aggregated_product_h", "language": "sql", "refs": [{"name": "products_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.dbt_transform.products_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/dim_products_hist.sql", "compiled": true, "compiled_code": "WITH aggregated_product_h AS (\n    SELECT\n        prd_id AS product_id,\n        prd_code AS product_code,\n        prd_nm AS product_name,\n        cat_id AS product_cat_id,\n        erp_cat AS product_category,\n        erp_subcat AS product_subcategory,\n        erp_maintenance_status AS product_maintenance_status,\n        prd_cost AS product_cost,\n        prd_line AS product_line,\n        prd_start_date AS product_start_date,\n        prd_end_date AS product_end_date,\n        dbt_valid_from AS valid_from,\n        dbt_valid_to AS valid_to\n    FROM \"dwh\".\"snapshots\".\"products_snapshot\"\n)\nSELECT\n    ROW_NUMBER() OVER (ORDER BY product_id, valid_from) AS product_key,\n    *\nFROM aggregated_product_h", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["product_key"], "time_spine": null}, "model.dbt_transform.dim_customers_hist": {"database": "dwh", "schema": "gold", "name": "dim_customers_hist", "resource_type": "model", "package_name": "dbt_transform", "path": "gold/dim_customers_hist.sql", "original_file_path": "models/gold/dim_customers_hist.sql", "unique_id": "model.dbt_transform.dim_customers_hist", "fqn": ["dbt_transform", "gold", "dim_customers_hist"], "alias": "dim_customers_hist", "checksum": {"name": "sha256", "checksum": "6ac7120fc4f8d4a88a90539d3a85dea24b36873c6e99ceafa2d38bf267503bb4"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Historical customer dimension table with SCD2 versioning, integrating CRM and ERP data.", "columns": {"customer_key": {"name": "customer_key", "description": "Surrogate key for each historical version of a customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_id": {"name": "customer_id", "description": "Business key representing the customer ID from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_code": {"name": "customer_code", "description": "Customer key from CRM, used to link with ERP data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_firstname": {"name": "customer_firstname", "description": "First name of the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_lastname": {"name": "customer_lastname", "description": "Last name of the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_birthdate": {"name": "customer_birthdate", "description": "Birthdate of the customer from ERP (erp_cust_az12).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_gender": {"name": "customer_gender", "description": "Gender of the customer, prioritizing CRM (cst_gndr) over ERP (gen), defaulting to 'n/a'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_marital_status": {"name": "customer_marital_status", "description": "Customer's marital status from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_country": {"name": "customer_country", "description": "Country of the customer from ERP (erp_loc_a101).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_email": {"name": "customer_email", "description": "Email address of the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_place": {"name": "customer_place", "description": "Place or city of the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_postal_code": {"name": "customer_postal_code", "description": "Postal code of the customer from CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "customer_create_date": {"name": "customer_create_date", "description": "Date when the customer record was created in CRM.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "valid_from": {"name": "valid_from", "description": "Start date of this version's validity (SCD2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "valid_to": {"name": "valid_to", "description": "End date of this version's validity (SCD2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/gold/schema.yml", "build_path": null, "unrendered_config": {"schema": "gold", "materialized": "view"}, "created_at": 1743885923.715755, "relation_name": "\"dwh\".\"gold\".\"dim_customers_hist\"", "raw_code": "WITH customers_snapshot_h AS (\n    SELECT \n        cst_id,\n        cst_code,\n        cst_firstname,\n        cst_lastname,\n        erp_birthdate,\n        cst_marital_status,\n        cst_gndr,\n        cst_email,\n        cst_place,\n        erp_country,\n        cst_postal_code,\n        erp_gender,\n        cst_create_date,\n        dbt_valid_from,\n        dbt_valid_to\n    FROM {{ ref('customers_snapshot') }}\n),\naggregated_customer_data AS (\n    SELECT\n        cst_id AS customer_id,\n        cst_code AS customer_code,\n        cst_firstname AS customer_firstname,\n        cst_lastname AS customer_lastname,\n        erp_birthdate AS customer_birthdate,\n        CASE\n            WHEN cst_gndr != 'n/a' THEN cst_gndr\n            ELSE COALESCE(erp_gender, 'n/a')\n        END AS customer_gender,\n        cst_marital_status AS customer_marital_status,\n        erp_country AS customer_country,\n        cst_email AS customer_email,\n        cst_place AS customer_place,\n        cst_postal_code AS customer_postal_code,\n        cst_create_date AS customer_create_date,\n        dbt_valid_from AS valid_from,\n        dbt_valid_to AS valid_to\n    FROM customers_snapshot_h\n)\nSELECT\n    ROW_NUMBER() OVER (ORDER BY customer_id, valid_from) AS customer_key,\n    *\nFROM aggregated_customer_data", "language": "sql", "refs": [{"name": "customers_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["snapshot.dbt_transform.customers_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/dim_customers_hist.sql", "compiled": true, "compiled_code": "WITH customers_snapshot_h AS (\n    SELECT \n        cst_id,\n        cst_code,\n        cst_firstname,\n        cst_lastname,\n        erp_birthdate,\n        cst_marital_status,\n        cst_gndr,\n        cst_email,\n        cst_place,\n        erp_country,\n        cst_postal_code,\n        erp_gender,\n        cst_create_date,\n        dbt_valid_from,\n        dbt_valid_to\n    FROM \"dwh\".\"snapshots\".\"customers_snapshot\"\n),\naggregated_customer_data AS (\n    SELECT\n        cst_id AS customer_id,\n        cst_code AS customer_code,\n        cst_firstname AS customer_firstname,\n        cst_lastname AS customer_lastname,\n        erp_birthdate AS customer_birthdate,\n        CASE\n            WHEN cst_gndr != 'n/a' THEN cst_gndr\n            ELSE COALESCE(erp_gender, 'n/a')\n        END AS customer_gender,\n        cst_marital_status AS customer_marital_status,\n        erp_country AS customer_country,\n        cst_email AS customer_email,\n        cst_place AS customer_place,\n        cst_postal_code AS customer_postal_code,\n        cst_create_date AS customer_create_date,\n        dbt_valid_from AS valid_from,\n        dbt_valid_to AS valid_to\n    FROM customers_snapshot_h\n)\nSELECT\n    ROW_NUMBER() OVER (ORDER BY customer_id, valid_from) AS customer_key,\n    *\nFROM aggregated_customer_data", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_key"], "time_spine": null}, "model.dbt_transform.report_products": {"database": "dwh", "schema": "analytics", "name": "report_products", "resource_type": "model", "package_name": "dbt_transform", "path": "analytics/report_products.sql", "original_file_path": "models/analytics/report_products.sql", "unique_id": "model.dbt_transform.report_products", "fqn": ["dbt_transform", "analytics", "report_products"], "alias": "report_products", "checksum": {"name": "sha256", "checksum": "efa1de47b5287ed434fea4143ed0325584ce7515f1f5259deec4ba41bdebcea3"}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ create_product_struct() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Generates a comprehensive products report.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/analytics/schema.yml", "build_path": null, "unrendered_config": {"schema": "analytics", "materialized": "view", "pre-hook": ["{{ create_product_struct() }}"]}, "created_at": 1743885923.868536, "relation_name": "\"dwh\".\"analytics\".\"report_products\"", "raw_code": "/*\n===============================================================================\nProduct Report\n===============================================================================\nPurpose:\n    - This report consolidates key product metrics and behaviors.\n\nHighlights:\n    1. Gathers essential fields such as product name, category, subcategory, and cost.\n    2. Segments products by revenue to identify High-Performers, Mid-Range, or Low-Performers.\n    3. Aggregates product-level metrics:\n       - total orders\n       - total sales\n       - total quantity sold\n       - total customers (unique)\n       - lifespan (in months)\n    4. Calculates valuable KPIs:\n       - recency (months since last sale. use '2015-01-01' as current_date)\n       - average order revenue (AOR)\n       - average monthly revenue\n===============================================================================\n*/\n{{ config(\n    materialized='view',\n    pre_hook=[\n        \"{{ create_product_struct() }}\"\n    ]\n) }}\n\nWITH dim_products_table AS (\n    SELECT *\n    FROM  {{ source('analytics_source','dim_products_current') }}\n),\nfact_sales_table as (\n    SELECT *\n    FROM {{ source('analytics_source','fact_sales') }}\n),\nproduct_base_query AS (\n    SELECT\n        dp.product_key,\n        dp.product_code,\n        dp.product_name,\n        dp.product_cost,\n        dp.product_category,\n        dp.product_subcategory,\n        dp.product_maintenance_status,\n        fs.sales_order_date,\n        fs.sales_quantity,\n        fs.sales_order_number,\n        fs.sales_amount,\n        fs.customer_key\n    FROM fact_sales_table fs\n    left join dim_products_table dp on fs.product_key = dp.product_key\n),\nproduct_agg AS (\n    SELECT\n        row(\n            product_key,\n            product_code,\n            product_name,\n            product_cost,\n            product_category,\n            product_subcategory,\n            product_maintenance_status\n        )::analytics.product_struct\n        AS product_info,\n        sum(sales_amount) as total_sales,\n        count(distinct sales_order_number) as total_orders,\n        count(distinct customer_key) as total_customers,\n        max(sales_order_date) as last_sale_date,\n        date_diff('month', min(sales_order_date), max(sales_order_date)) as lifespan_in_month,\n        avg(COALESCE(sales_amount/NULLIF(sales_quantity,0),0))::DECIMAL as avg_selling_price\n    from product_base_query\n    group by all\n)\nSELECT\n    *,\n    date_diff('month', last_sale_date, '2015-01-01'::DATE) AS recency_in_months,\n    CASE\n        WHEN recency_in_months BETWEEN 0 and 5 THEN 'Recently active'\n        WHEN recency_in_months BETWEEN 6 and 12 THEN 'Moderately active'\n        WHEN recency_in_months BETWEEN 13 and 24 THEN 'Possibly stagnate'\n        ELSE 'Potentially discontinued/dormant'\n    END AS recency_status,\n\tCASE\n\t\tWHEN total_sales > 50_000 THEN 'High-Performer'\n\t\tWHEN total_sales BETWEEN 10_000 AND 50_000 THEN 'Mid-Range'\n\t\tELSE 'Low-Performer'\n\tEND AS product_status,\n    -- Average Order Revenue (AOR)\n\tCOALESCE(total_sales/NULLIF(total_orders,0), 0)::DECIMAL as avg_order_revenue,\n\t-- Average Monthly Revenue\n    COALESCE(total_sales/NULLIF(lifespan_in_month,0), total_sales)::DECIMAL as avg_monthly_revenue\nFROM product_agg", "language": "sql", "refs": [], "sources": [["analytics_source", "dim_products_current"], ["analytics_source", "fact_sales"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.create_product_struct"], "nodes": ["source.dbt_transform.analytics_source.dim_products_current", "source.dbt_transform.analytics_source.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/models/analytics/report_products.sql", "compiled": true, "compiled_code": "/*\n===============================================================================\nProduct Report\n===============================================================================\nPurpose:\n    - This report consolidates key product metrics and behaviors.\n\nHighlights:\n    1. Gathers essential fields such as product name, category, subcategory, and cost.\n    2. Segments products by revenue to identify High-Performers, Mid-Range, or Low-Performers.\n    3. Aggregates product-level metrics:\n       - total orders\n       - total sales\n       - total quantity sold\n       - total customers (unique)\n       - lifespan (in months)\n    4. Calculates valuable KPIs:\n       - recency (months since last sale. use '2015-01-01' as current_date)\n       - average order revenue (AOR)\n       - average monthly revenue\n===============================================================================\n*/\n\n\nWITH dim_products_table AS (\n    SELECT *\n    FROM  \"dwh\".\"gold\".\"dim_products_current\"\n),\nfact_sales_table as (\n    SELECT *\n    FROM \"dwh\".\"gold\".\"fact_sales\"\n),\nproduct_base_query AS (\n    SELECT\n        dp.product_key,\n        dp.product_code,\n        dp.product_name,\n        dp.product_cost,\n        dp.product_category,\n        dp.product_subcategory,\n        dp.product_maintenance_status,\n        fs.sales_order_date,\n        fs.sales_quantity,\n        fs.sales_order_number,\n        fs.sales_amount,\n        fs.customer_key\n    FROM fact_sales_table fs\n    left join dim_products_table dp on fs.product_key = dp.product_key\n),\nproduct_agg AS (\n    SELECT\n        row(\n            product_key,\n            product_code,\n            product_name,\n            product_cost,\n            product_category,\n            product_subcategory,\n            product_maintenance_status\n        )::analytics.product_struct\n        AS product_info,\n        sum(sales_amount) as total_sales,\n        count(distinct sales_order_number) as total_orders,\n        count(distinct customer_key) as total_customers,\n        max(sales_order_date) as last_sale_date,\n        date_diff('month', min(sales_order_date), max(sales_order_date)) as lifespan_in_month,\n        avg(COALESCE(sales_amount/NULLIF(sales_quantity,0),0))::DECIMAL as avg_selling_price\n    from product_base_query\n    group by all\n)\nSELECT\n    *,\n    date_diff('month', last_sale_date, '2015-01-01'::DATE) AS recency_in_months,\n    CASE\n        WHEN recency_in_months BETWEEN 0 and 5 THEN 'Recently active'\n        WHEN recency_in_months BETWEEN 6 and 12 THEN 'Moderately active'\n        WHEN recency_in_months BETWEEN 13 and 24 THEN 'Possibly stagnate'\n        ELSE 'Potentially discontinued/dormant'\n    END AS recency_status,\n\tCASE\n\t\tWHEN total_sales > 50_000 THEN 'High-Performer'\n\t\tWHEN total_sales BETWEEN 10_000 AND 50_000 THEN 'Mid-Range'\n\t\tELSE 'Low-Performer'\n\tEND AS product_status,\n    -- Average Order Revenue (AOR)\n\tCOALESCE(total_sales/NULLIF(total_orders,0), 0)::DECIMAL as avg_order_revenue,\n\t-- Average Monthly Revenue\n    COALESCE(total_sales/NULLIF(lifespan_in_month,0), total_sales)::DECIMAL as avg_monthly_revenue\nFROM product_agg", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.dbt_transform.report_customers": {"database": "dwh", "schema": "analytics", "name": "report_customers", "resource_type": "model", "package_name": "dbt_transform", "path": "analytics/report_customers.sql", "original_file_path": "models/analytics/report_customers.sql", "unique_id": "model.dbt_transform.report_customers", "fqn": ["dbt_transform", "analytics", "report_customers"], "alias": "report_customers", "checksum": {"name": "sha256", "checksum": "53440201454607eab089852a2f99325b41ee7a26b7fcdb0c4fcf9d9ce8850465"}, "config": {"enabled": true, "alias": null, "schema": "analytics", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [{"sql": "{{ create_customer_bio_struct() }}", "transaction": true, "index": null}], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": [], "description": "Generates a comprehensive customers report.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://models/analytics/schema.yml", "build_path": null, "unrendered_config": {"schema": "analytics", "materialized": "view", "pre-hook": ["{{ create_customer_bio_struct() }}"]}, "created_at": 1743885923.868235, "relation_name": "\"dwh\".\"analytics\".\"report_customers\"", "raw_code": "/*\n===============================================================================\nCustomer Report\n===============================================================================\nPurpose:\n    - This report consolidates key customer metrics and behaviors\n\nHighlights:\n    1. Gathers essential fields such as names, ages, and transaction details.\n\t2. Segments customers into categories (VIP, Regular, New) and age groups.\n    3. Aggregates customer-level metrics:\n\t   - total orders\n\t   - total sales\n\t   - total quantity purchased\n\t   - total products\n\t   - lifespan (in months)\n    4. Calculates valuable KPIs:\n\t    - recency (months since last order. Use '2015-01-01' as current_date)\n\t\t- average order value\n\t\t- average monthly spend\n===============================================================================\n*/\n{{ config(\n    materialized='view',\n    pre_hook=[\n        \"{{ create_customer_bio_struct() }}\"\n    ]\n) }}\n\nWITH dim_customers_table AS (\n    SELECT *\n    FROM {{ source('analytics_source','dim_customers_current') }}\n),\nfact_sales_table as (\n    SELECT *\n    FROM {{ source('analytics_source','fact_sales') }}\n), \ncustomer_base_query as(\n    SELECT\n        CONCAT(dc.customer_firstname, ' ', dc.customer_lastname) as customer_name,\n        dc.customer_key,\n        dc.customer_birthdate,\n        dc.customer_gender,\n        dc.customer_country,\n        dc.customer_marital_status,\n        date_diff('year', dc.customer_birthdate, current_date()) as age_in_years,\n        customer_email,\n        customer_place,\n        customer_postal_code,\n        fs.product_key,\n        fs.sales_order_number,\n        fs.sales_order_date,\n        fs.sales_amount,\n        fs.sales_quantity\n    from fact_sales_table fs\n    left join dim_customers_table dc on fs.customer_key = dc.customer_key\n    -- where fs.sales_order_date is not null\n),\ncustomer_agg as (\n    select\n        row(customer_name,\n            customer_key,\n            age_in_years,\n            customer_birthdate,\n            customer_gender,\n            customer_country,\n            customer_marital_status,\n            customer_email,\n            customer_place,\n            customer_postal_code)::analytics.customer_bio_struct\n        as customer_bio,\n        sum(sales_amount) as total_spending,\n        count(distinct sales_order_number) as total_orders,\n        sum(sales_quantity) as total_quantity,\n        COUNT(DISTINCT product_key) AS total_products,\n\t    MAX(sales_order_date) AS last_order_date,\n\t    date_diff('month', MIN(sales_order_date), MAX(sales_order_date)) AS lifespan_in_months\n    from customer_base_query\n    group by all\n)\nselect\n    customer_bio,\n    CASE\n        WHEN customer_bio.customer_age < 20 THEN 'LESS THAN 20'\n        WHEN customer_bio.customer_age BETWEEN 20 and 29 THEN '20-29'\n        WHEN customer_bio.customer_age BETWEEN 30 and 39 THEN '30-39'\n        WHEN customer_bio.customer_age BETWEEN 40 and 49 THEN '40-49'\n        WHEN customer_bio.customer_age BETWEEN 50 and 59 THEN '50-59'\n        ELSE 'Above 60'\n    END as age_group,\n    lifespan_in_months,\n    CASE\n        WHEN lifespan_in_months >=12 AND total_spending > 5000 then 'VIP'\n        WHEN lifespan_in_months >=12 AND total_spending <= 5000 then 'Regular'\n        ELSE 'NEW'\n    END as customer_status,\n    last_order_date,\n    date_diff('month', last_order_date, '2015-01-01'::DATE) as recency_in_months,\n    CASE\n        WHEN recency_in_months BETWEEN 0 and 3 THEN 'Recently active'\n        WHEN recency_in_months BETWEEN 4 and 10 THEN 'Moderately active'\n        WHEN recency_in_months BETWEEN 11 and 24 THEN 'Rarely active'\n        ELSE 'Potentially inactive'\n    END AS recency_status,\n    total_orders,\n    total_products,\n    total_quantity,\n    total_spending,\n    -- Compute average order value (AVO)\n    COALESCE(total_spending/NULLIF(total_orders,0),0)::DECIMAL as avg_order_value,\n    -- compute average monthly spend\n    COALESCE(total_spending/NULLIF(lifespan_in_months,0),total_orders)::DECIMAL as avg_monthly_spend,\nfrom customer_agg", "language": "sql", "refs": [], "sources": [["analytics_source", "dim_customers_current"], ["analytics_source", "fact_sales"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.create_customer_bio_struct"], "nodes": ["source.dbt_transform.analytics_source.dim_customers_current", "source.dbt_transform.analytics_source.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/models/analytics/report_customers.sql", "compiled": true, "compiled_code": "/*\n===============================================================================\nCustomer Report\n===============================================================================\nPurpose:\n    - This report consolidates key customer metrics and behaviors\n\nHighlights:\n    1. Gathers essential fields such as names, ages, and transaction details.\n\t2. Segments customers into categories (VIP, Regular, New) and age groups.\n    3. Aggregates customer-level metrics:\n\t   - total orders\n\t   - total sales\n\t   - total quantity purchased\n\t   - total products\n\t   - lifespan (in months)\n    4. Calculates valuable KPIs:\n\t    - recency (months since last order. Use '2015-01-01' as current_date)\n\t\t- average order value\n\t\t- average monthly spend\n===============================================================================\n*/\n\n\nWITH dim_customers_table AS (\n    SELECT *\n    FROM \"dwh\".\"gold\".\"dim_customers_current\"\n),\nfact_sales_table as (\n    SELECT *\n    FROM \"dwh\".\"gold\".\"fact_sales\"\n), \ncustomer_base_query as(\n    SELECT\n        CONCAT(dc.customer_firstname, ' ', dc.customer_lastname) as customer_name,\n        dc.customer_key,\n        dc.customer_birthdate,\n        dc.customer_gender,\n        dc.customer_country,\n        dc.customer_marital_status,\n        date_diff('year', dc.customer_birthdate, current_date()) as age_in_years,\n        customer_email,\n        customer_place,\n        customer_postal_code,\n        fs.product_key,\n        fs.sales_order_number,\n        fs.sales_order_date,\n        fs.sales_amount,\n        fs.sales_quantity\n    from fact_sales_table fs\n    left join dim_customers_table dc on fs.customer_key = dc.customer_key\n    -- where fs.sales_order_date is not null\n),\ncustomer_agg as (\n    select\n        row(customer_name,\n            customer_key,\n            age_in_years,\n            customer_birthdate,\n            customer_gender,\n            customer_country,\n            customer_marital_status,\n            customer_email,\n            customer_place,\n            customer_postal_code)::analytics.customer_bio_struct\n        as customer_bio,\n        sum(sales_amount) as total_spending,\n        count(distinct sales_order_number) as total_orders,\n        sum(sales_quantity) as total_quantity,\n        COUNT(DISTINCT product_key) AS total_products,\n\t    MAX(sales_order_date) AS last_order_date,\n\t    date_diff('month', MIN(sales_order_date), MAX(sales_order_date)) AS lifespan_in_months\n    from customer_base_query\n    group by all\n)\nselect\n    customer_bio,\n    CASE\n        WHEN customer_bio.customer_age < 20 THEN 'LESS THAN 20'\n        WHEN customer_bio.customer_age BETWEEN 20 and 29 THEN '20-29'\n        WHEN customer_bio.customer_age BETWEEN 30 and 39 THEN '30-39'\n        WHEN customer_bio.customer_age BETWEEN 40 and 49 THEN '40-49'\n        WHEN customer_bio.customer_age BETWEEN 50 and 59 THEN '50-59'\n        ELSE 'Above 60'\n    END as age_group,\n    lifespan_in_months,\n    CASE\n        WHEN lifespan_in_months >=12 AND total_spending > 5000 then 'VIP'\n        WHEN lifespan_in_months >=12 AND total_spending <= 5000 then 'Regular'\n        ELSE 'NEW'\n    END as customer_status,\n    last_order_date,\n    date_diff('month', last_order_date, '2015-01-01'::DATE) as recency_in_months,\n    CASE\n        WHEN recency_in_months BETWEEN 0 and 3 THEN 'Recently active'\n        WHEN recency_in_months BETWEEN 4 and 10 THEN 'Moderately active'\n        WHEN recency_in_months BETWEEN 11 and 24 THEN 'Rarely active'\n        ELSE 'Potentially inactive'\n    END AS recency_status,\n    total_orders,\n    total_products,\n    total_quantity,\n    total_spending,\n    -- Compute average order value (AVO)\n    COALESCE(total_spending/NULLIF(total_orders,0),0)::DECIMAL as avg_order_value,\n    -- compute average monthly spend\n    COALESCE(total_spending/NULLIF(lifespan_in_months,0),total_orders)::DECIMAL as avg_monthly_spend,\nfrom customer_agg", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "snapshot.dbt_transform.products_snapshot": {"database": "dwh", "schema": "snapshots", "name": "products_snapshot", "resource_type": "snapshot", "package_name": "dbt_transform", "path": "products_snapshot.sql", "original_file_path": "snapshots/products_snapshot.sql", "unique_id": "snapshot.dbt_transform.products_snapshot", "fqn": ["dbt_transform", "products_snapshot", "products_snapshot"], "alias": "products_snapshot", "checksum": {"name": "sha256", "checksum": "50f3cd1c166a0e2bd9a32164c1c8734d2ae7cda0ca8099a11bc56a59e15a82dd"}, "config": {"enabled": true, "alias": null, "schema": "snapshots", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "prd_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "strategy": "timestamp", "target_schema": null, "target_database": null, "updated_at": "snapshot_updated_at", "check_cols": null, "snapshot_meta_column_names": {"dbt_valid_to": null, "dbt_valid_from": null, "dbt_scd_id": null, "dbt_updated_at": null, "dbt_is_deleted": null}, "dbt_valid_to_current": "'9999-12-31'::timestamp", "hard_deletes": "new_record"}, "tags": [], "description": "Combined snapshot of product data from CRM and ERP sources in silver schema.", "columns": {"cat_id": {"name": "cat_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "prd_cost": {"name": "prd_cost", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "erp_maintenance_status": {"name": "erp_maintenance_status", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_scd_id": {"name": "dbt_scd_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://snapshots/schema.yml", "build_path": null, "unrendered_config": {"schema": "snapshots", "unique_key": "prd_id", "strategy": "timestamp", "updated_at": "snapshot_updated_at", "dbt_valid_to_current": "'9999-12-31'::timestamp", "hard_deletes": "new_record"}, "created_at": 1743885923.891488, "relation_name": "\"dwh\".\"snapshots\".\"products_snapshot\"", "raw_code": "\nSELECT \n    pi.prd_id,\n    pi.prd_code,\n    pi.cat_id,\n    pc.cat AS erp_cat,\n    pc.subcat AS erp_subcat,\n    pi.prd_nm,\n    pi.prd_line,\n    pi.prd_cost,\n    pc.maintenance_status AS erp_maintenance_status,\n    pi.prd_start_date,\n    pi.prd_end_date,\n    GREATEST(pi.updated_at, pc.updated_at) AS snapshot_updated_at\nFROM {{ ref('crm_prd_info') }} AS pi\nLEFT JOIN {{ ref('erp_px_cat_g1v2') }} AS pc\n    ON pi.cat_id = pc.id\n", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}, {"name": "erp_px_cat_g1v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_transform.crm_prd_info", "model.dbt_transform.erp_px_cat_g1v2"]}, "compiled_path": null, "compiled": true, "compiled_code": "\nSELECT \n    pi.prd_id,\n    pi.prd_code,\n    pi.cat_id,\n    pc.cat AS erp_cat,\n    pc.subcat AS erp_subcat,\n    pi.prd_nm,\n    pi.prd_line,\n    pi.prd_cost,\n    pc.maintenance_status AS erp_maintenance_status,\n    pi.prd_start_date,\n    pi.prd_end_date,\n    GREATEST(pi.updated_at, pc.updated_at) AS snapshot_updated_at\nFROM \"dwh\".\"silver\".\"crm_prd_info\" AS pi\nLEFT JOIN \"dwh\".\"silver\".\"erp_px_cat_g1v2\" AS pc\n    ON pi.cat_id = pc.id", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "snapshot.dbt_transform.customers_snapshot": {"database": "dwh", "schema": "snapshots", "name": "customers_snapshot", "resource_type": "snapshot", "package_name": "dbt_transform", "path": "customers_snapshot.sql", "original_file_path": "snapshots/customers_snapshot.sql", "unique_id": "snapshot.dbt_transform.customers_snapshot", "fqn": ["dbt_transform", "customers_snapshot", "customers_snapshot"], "alias": "customers_snapshot", "checksum": {"name": "sha256", "checksum": "0b19989383839fcd3311373c4e5de4805ff575657c042248bd1bc47afd05da9f"}, "config": {"enabled": true, "alias": null, "schema": "snapshots", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "snapshot", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "cst_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "strategy": "timestamp", "target_schema": null, "target_database": null, "updated_at": "snapshot_updated_at", "check_cols": null, "snapshot_meta_column_names": {"dbt_valid_to": null, "dbt_valid_from": null, "dbt_scd_id": null, "dbt_updated_at": null, "dbt_is_deleted": null}, "dbt_valid_to_current": "'9999-12-31'::timestamp", "hard_deletes": "new_record"}, "tags": [], "description": "Combined snapshot of customer data from CRM and ERP sources in silver schema.", "columns": {"cst_code": {"name": "cst_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}, "dbt_scd_id": {"name": "dbt_scd_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://snapshots/schema.yml", "build_path": null, "unrendered_config": {"schema": "snapshots", "unique_key": "cst_id", "strategy": "timestamp", "updated_at": "snapshot_updated_at", "dbt_valid_to_current": "'9999-12-31'::timestamp", "hard_deletes": "new_record"}, "created_at": 1743885923.88975, "relation_name": "\"dwh\".\"snapshots\".\"customers_snapshot\"", "raw_code": "\n\nSELECT\n    ci.cst_id,\n    ci.cst_code,\n    ci.cst_firstname,\n    ci.cst_lastname,\n    ea.bdate AS erp_birthdate,\n    ci.cst_marital_status,\n    ci.cst_gndr,\n    ci.cst_email,\n    ci.cst_place,\n    el.cntry AS erp_country,\n    ci.cst_postal_code,\n    ea.gen AS erp_gender,\n    ci.cst_create_date,\n    GREATEST(ci.updated_at, ea.updated_at, el.updated_at) AS snapshot_updated_at\nFROM {{ ref('crm_cust_info') }} ci\nLEFT JOIN {{ ref('erp_cust_az12') }} ea\n    ON ci.cst_code = ea.cid\nLEFT JOIN {{ ref('erp_loc_a101') }} el\n    ON ci.cst_code = el.cid\n\n", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}, {"name": "erp_cust_az12", "package": null, "version": null}, {"name": "erp_loc_a101", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_transform.crm_cust_info", "model.dbt_transform.erp_cust_az12", "model.dbt_transform.erp_loc_a101"]}, "compiled_path": null, "compiled": true, "compiled_code": "\n\nSELECT\n    ci.cst_id,\n    ci.cst_code,\n    ci.cst_firstname,\n    ci.cst_lastname,\n    ea.bdate AS erp_birthdate,\n    ci.cst_marital_status,\n    ci.cst_gndr,\n    ci.cst_email,\n    ci.cst_place,\n    el.cntry AS erp_country,\n    ci.cst_postal_code,\n    ea.gen AS erp_gender,\n    ci.cst_create_date,\n    GREATEST(ci.updated_at, ea.updated_at, el.updated_at) AS snapshot_updated_at\nFROM \"dwh\".\"silver\".\"crm_cust_info\" ci\nLEFT JOIN \"dwh\".\"silver\".\"erp_cust_az12\" ea\n    ON ci.cst_code = ea.cid\nLEFT JOIN \"dwh\".\"silver\".\"erp_loc_a101\" el\n    ON ci.cst_code = el.cid\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transform.ranking_exploration": {"database": "dwh", "schema": "main", "name": "ranking_exploration", "resource_type": "analysis", "package_name": "dbt_transform", "path": "analysis/ranking_exploration.sql", "original_file_path": "analyses/ranking_exploration.sql", "unique_id": "analysis.dbt_transform.ranking_exploration", "fqn": ["dbt_transform", "analysis", "ranking_exploration"], "alias": "ranking_exploration", "checksum": {"name": "sha256", "checksum": "5ea8f98197a14dd1bfc82607edc6ffbfe76a19e6c461dde858329f9a108def77"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.188525, "relation_name": null, "raw_code": "/*\n===============================================================================\nRanking Analysis\n===============================================================================\nPurpose:\n    - To rank items (e.g., products, customers) based on performance or other metrics.\n    - To identify top performers or laggards.\n\nSQL Functions Used:\n    - Window Ranking Functions: RANK(), DENSE_RANK(), ROW_NUMBER(), TOP\n    - Clauses: GROUP BY, ORDER BY\n===============================================================================\n*/\n\n\n-- Ranking Analysis\n\n-- Which top 5 products Generating the Highest Revenue?\nselect\n    dp.product_key,\n    dp.product_name,\n    dp.product_category,\n    sum(fs.sales_amount) as total_sales_per_product\nfrom {{ source('analytics_source', 'fact_sales') }} fs\nleft join {{ source('analytics_source', 'dim_products_current') }} dp on fs.product_skey = dp.product_skey\ngroup by dp.product_key, dp.product_name, dp.product_category\norder by total_sales_per_product desc\nlimit 5;\n\n/*\n product_key,product_name,product_category,total_sales_per_product\nBK-M68B-46,Mountain-200 Black- 46,Bikes,1373454\nBK-M68B-42,Mountain-200 Black- 42,Bikes,1363128\nBK-M68S-38,Mountain-200 Silver- 38,Bikes,1339394\nBK-M68S-46,Mountain-200 Silver- 46,Bikes,1301029\nBK-M68B-38,Mountain-200 Black- 38,Bikes,1294854\n\n */\n\n-- Complex but Flexibly Ranking Using Window Functions\nwith product_revenue as (\n    SELECT\n        dp.product_name,\n        sum(fs.sales_amount) as total_sales_per_product\n    from {{ source('analytics_source', 'fact_sales') }} fs\n    left join {{ source('analytics_source', 'dim_products_current') }} dp on fs.product_skey = dp.product_skey\n    group by dp.product_name\n),\nranked_products as (\n    select\n        product_name,\n        total_sales_per_product,\n        rank() over(order by total_sales_per_product desc) as ranked_products\n    from product_revenue\n)\nselect *\nfrom ranked_products\nwhere ranked_products <=5;\n/*\nproduct_name,total_sales_per_product,ranked_products\nMountain-200 Black- 46,1373454,1\nMountain-200 Black- 42,1363128,2\nMountain-200 Silver- 38,1339394,3\nMountain-200 Silver- 46,1301029,4\nMountain-200 Black- 38,1294854,5\n*/\n\n-- What are the 5 worst-performing products in terms of sales?\nwith product_revenue as (\n    SELECT\n        dp.product_name,\n        sum(fs.sales_amount) as total_sales_per_product,\n        rank() over (order by sum(fs.sales_amount) desc) as rank_products\n    from {{ source('analytics_source', 'fact_sales') }} fs\n    left join {{ source('analytics_source', 'dim_products_current') }} dp on fs.product_skey = dp.product_skey\n    group by dp.product_name\n)\nselect *\nfrom product_revenue\nwhere rank_products<=5;\n\n\n/*\n product_name,total_sales_per_product,ranked_products\nRacing Socks- L,2430,1\nRacing Socks- M,2682,2\nPatch Kit/8 Patches,6382,3\nBike Wash - Dissolver,7272,4\nTouring Tire Tube,7440,5\n\n */\n\n-- Find the top 10 customers who have generated the highest revenue\nselect dc.customer_key ,dc.customer_firstname, dc.customer_lastname,\n       sum(fs.sales_amount) as total_revenue,\n       dense_rank() over(order by sum(fs.sales_amount) desc) as ranked_customers_d,\n        --rank() over(order by sum(fs.sales_amount) desc) as ranked_customers_r,\nfrom {{ source('analytics_source', 'fact_sales') }} fs\nleft join {{ source('analytics_source', 'dim_customers_current') }} dc on fs.customer_skey = dc.customer_skey\ngroup by dc.customer_key, dc.customer_firstname, dc.customer_lastname\nqualify ranked_customers_d <=10;\n\n\n-- The 3 customers with the fewest orders placed\nwith cte_ as (\n    select  dc.customer_id ,dc.customer_firstname, dc.customer_lastname, count(distinct fs.sales_order_number) as total_orders\nfrom {{ source('analytics_source', 'fact_sales') }} fs\nleft join {{ source('analytics_source', 'dim_customers_current') }} dc on fs.customer_skey = dc.customer_skey\ngroup by dc.customer_id , dc.customer_firstname, dc.customer_lastname\norder by  total_orders\n)\nselect * from cte_\nlimit 3;", "language": "sql", "refs": [], "sources": [["analytics_source", "fact_sales"], ["analytics_source", "dim_products_current"], ["analytics_source", "fact_sales"], ["analytics_source", "dim_products_current"], ["analytics_source", "fact_sales"], ["analytics_source", "dim_products_current"], ["analytics_source", "fact_sales"], ["analytics_source", "dim_customers_current"], ["analytics_source", "fact_sales"], ["analytics_source", "dim_customers_current"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_transform.analytics_source.fact_sales", "source.dbt_transform.analytics_source.dim_products_current", "source.dbt_transform.analytics_source.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/analyses/ranking_exploration.sql", "compiled": true, "compiled_code": "/*\n===============================================================================\nRanking Analysis\n===============================================================================\nPurpose:\n    - To rank items (e.g., products, customers) based on performance or other metrics.\n    - To identify top performers or laggards.\n\nSQL Functions Used:\n    - Window Ranking Functions: RANK(), DENSE_RANK(), ROW_NUMBER(), TOP\n    - Clauses: GROUP BY, ORDER BY\n===============================================================================\n*/\n\n\n-- Ranking Analysis\n\n-- Which top 5 products Generating the Highest Revenue?\nselect\n    dp.product_key,\n    dp.product_name,\n    dp.product_category,\n    sum(fs.sales_amount) as total_sales_per_product\nfrom \"dwh\".\"gold\".\"fact_sales\" fs\nleft join \"dwh\".\"gold\".\"dim_products_current\" dp on fs.product_skey = dp.product_skey\ngroup by dp.product_key, dp.product_name, dp.product_category\norder by total_sales_per_product desc\nlimit 5;\n\n/*\n product_key,product_name,product_category,total_sales_per_product\nBK-M68B-46,Mountain-200 Black- 46,Bikes,1373454\nBK-M68B-42,Mountain-200 Black- 42,Bikes,1363128\nBK-M68S-38,Mountain-200 Silver- 38,Bikes,1339394\nBK-M68S-46,Mountain-200 Silver- 46,Bikes,1301029\nBK-M68B-38,Mountain-200 Black- 38,Bikes,1294854\n\n */\n\n-- Complex but Flexibly Ranking Using Window Functions\nwith product_revenue as (\n    SELECT\n        dp.product_name,\n        sum(fs.sales_amount) as total_sales_per_product\n    from \"dwh\".\"gold\".\"fact_sales\" fs\n    left join \"dwh\".\"gold\".\"dim_products_current\" dp on fs.product_skey = dp.product_skey\n    group by dp.product_name\n),\nranked_products as (\n    select\n        product_name,\n        total_sales_per_product,\n        rank() over(order by total_sales_per_product desc) as ranked_products\n    from product_revenue\n)\nselect *\nfrom ranked_products\nwhere ranked_products <=5;\n/*\nproduct_name,total_sales_per_product,ranked_products\nMountain-200 Black- 46,1373454,1\nMountain-200 Black- 42,1363128,2\nMountain-200 Silver- 38,1339394,3\nMountain-200 Silver- 46,1301029,4\nMountain-200 Black- 38,1294854,5\n*/\n\n-- What are the 5 worst-performing products in terms of sales?\nwith product_revenue as (\n    SELECT\n        dp.product_name,\n        sum(fs.sales_amount) as total_sales_per_product,\n        rank() over (order by sum(fs.sales_amount) desc) as rank_products\n    from \"dwh\".\"gold\".\"fact_sales\" fs\n    left join \"dwh\".\"gold\".\"dim_products_current\" dp on fs.product_skey = dp.product_skey\n    group by dp.product_name\n)\nselect *\nfrom product_revenue\nwhere rank_products<=5;\n\n\n/*\n product_name,total_sales_per_product,ranked_products\nRacing Socks- L,2430,1\nRacing Socks- M,2682,2\nPatch Kit/8 Patches,6382,3\nBike Wash - Dissolver,7272,4\nTouring Tire Tube,7440,5\n\n */\n\n-- Find the top 10 customers who have generated the highest revenue\nselect dc.customer_key ,dc.customer_firstname, dc.customer_lastname,\n       sum(fs.sales_amount) as total_revenue,\n       dense_rank() over(order by sum(fs.sales_amount) desc) as ranked_customers_d,\n        --rank() over(order by sum(fs.sales_amount) desc) as ranked_customers_r,\nfrom \"dwh\".\"gold\".\"fact_sales\" fs\nleft join \"dwh\".\"gold\".\"dim_customers_current\" dc on fs.customer_skey = dc.customer_skey\ngroup by dc.customer_key, dc.customer_firstname, dc.customer_lastname\nqualify ranked_customers_d <=10;\n\n\n-- The 3 customers with the fewest orders placed\nwith cte_ as (\n    select  dc.customer_id ,dc.customer_firstname, dc.customer_lastname, count(distinct fs.sales_order_number) as total_orders\nfrom \"dwh\".\"gold\".\"fact_sales\" fs\nleft join \"dwh\".\"gold\".\"dim_customers_current\" dc on fs.customer_skey = dc.customer_skey\ngroup by dc.customer_id , dc.customer_firstname, dc.customer_lastname\norder by  total_orders\n)\nselect * from cte_\nlimit 3;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transform.performance_analysis": {"database": "dwh", "schema": "main", "name": "performance_analysis", "resource_type": "analysis", "package_name": "dbt_transform", "path": "analysis/performance_analysis.sql", "original_file_path": "analyses/performance_analysis.sql", "unique_id": "analysis.dbt_transform.performance_analysis", "fqn": ["dbt_transform", "analysis", "performance_analysis"], "alias": "performance_analysis", "checksum": {"name": "sha256", "checksum": "fd112dacf2637964bb71bf6404999254a25548a90c3679eb9b7d18ad66f3a9c5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.1985788, "relation_name": null, "raw_code": "/*\n===============================================================================\nPerformance Analysis (Year-over-Year, Month-over-Month)\n===============================================================================\nPurpose:\n    - To measure the performance of products, customers, or regions over time.\n    - For benchmarking and identifying high-performing entities.\n    - To track yearly trends and growth.\n\nSQL Functions Used:\n    - LAG(): Accesses data from previous rows.\n    - AVG() OVER(): Computes average values within partitions.\n    - CASE: Defines conditional logic for trend analysis.\n===============================================================================\n*/\n\n/* Analyze the yearly performance of products by comparing their sales \nto both the average sales performance of the product and the previous year's sales */\n\nwith yearly_sales as (\nselect\n    date_part('year', sales_order_date) as order_year,\n    dp.product_name,\n    sum(fs.sales_amount) as current_sales\nfrom {{ source('analytics_source', 'fact_sales') }} fs\nleft join {{ source('analytics_source', 'dim_products_current') }} dp on fs.product_skey = dp.product_skey\nwhere fs.sales_order_date is not null\ngroup by order_year, dp.product_name\norder by order_year\n),\navg_prev_sales as (select\n    order_year,\n    product_name,\n    current_sales,\n    avg(current_sales) over(partition by product_name) as avg_sales,\n    lag(current_sales) over(partition by product_name order by order_year) as prev_sales\nfrom yearly_sales\norder by product_name,order_year)\nselect\n    *,\n    current_sales - avg_sales as sales_avg_diff,\n    case\n        when (current_sales - avg_sales) > 0 then 'above average'\n        when (current_sales - avg_sales) < 0 then 'below average'\n        else 'average'\n    end as avg_sales_change,\n    current_sales - prev_sales as sales_diff,\n    case\n        when (current_sales - prev_sales) > 0 then 'increase'\n        when (current_sales - prev_sales) < 0 then 'decrease'\n        else 'no change'\n    end as prev_sales_change\nfrom avg_prev_sales;\n\n--month-to-month analysis\nwith monthly_sales as (\nselect\n    date_part('month', sales_order_date) as order_month,\n    dp.product_name,\n    sum(fs.sales_amount) as current_sales\nfrom {{ source('analytics_source', 'fact_sales') }} fs\nleft join {{ source('analytics_source', 'dim_products_current') }} dp on fs.product_skey = dp.product_skey\nwhere fs.sales_order_date is not null\ngroup by order_month, dp.product_name\norder by order_month\n),\navg_prev_sales as (select\n    order_month,\n    product_name,\n    current_sales,\n    avg(current_sales) over(partition by product_name) as avg_sales,\n    lag(current_sales) over(partition by product_name order by order_month) as prev_sales\nfrom monthly_sales\norder by product_name,order_month)\nselect\n    *,\n    current_sales - avg_sales as sales_avg_diff,\n    case\n        when (current_sales - avg_sales) > 0 then 'above average'\n        when (current_sales - avg_sales) < 0 then 'below average'\n        else 'average'\n    end as avg_sales_change,\n    current_sales - prev_sales as sales_diff,\n    case\n        when (current_sales - prev_sales) > 0 then 'increase'\n        when (current_sales - prev_sales) < 0 then 'decrease'\n        else 'no change'\n    end as prev_sales_change\nfrom avg_prev_sales;", "language": "sql", "refs": [], "sources": [["analytics_source", "fact_sales"], ["analytics_source", "dim_products_current"], ["analytics_source", "fact_sales"], ["analytics_source", "dim_products_current"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_transform.analytics_source.fact_sales", "source.dbt_transform.analytics_source.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/analyses/performance_analysis.sql", "compiled": true, "compiled_code": "/*\n===============================================================================\nPerformance Analysis (Year-over-Year, Month-over-Month)\n===============================================================================\nPurpose:\n    - To measure the performance of products, customers, or regions over time.\n    - For benchmarking and identifying high-performing entities.\n    - To track yearly trends and growth.\n\nSQL Functions Used:\n    - LAG(): Accesses data from previous rows.\n    - AVG() OVER(): Computes average values within partitions.\n    - CASE: Defines conditional logic for trend analysis.\n===============================================================================\n*/\n\n/* Analyze the yearly performance of products by comparing their sales \nto both the average sales performance of the product and the previous year's sales */\n\nwith yearly_sales as (\nselect\n    date_part('year', sales_order_date) as order_year,\n    dp.product_name,\n    sum(fs.sales_amount) as current_sales\nfrom \"dwh\".\"gold\".\"fact_sales\" fs\nleft join \"dwh\".\"gold\".\"dim_products_current\" dp on fs.product_skey = dp.product_skey\nwhere fs.sales_order_date is not null\ngroup by order_year, dp.product_name\norder by order_year\n),\navg_prev_sales as (select\n    order_year,\n    product_name,\n    current_sales,\n    avg(current_sales) over(partition by product_name) as avg_sales,\n    lag(current_sales) over(partition by product_name order by order_year) as prev_sales\nfrom yearly_sales\norder by product_name,order_year)\nselect\n    *,\n    current_sales - avg_sales as sales_avg_diff,\n    case\n        when (current_sales - avg_sales) > 0 then 'above average'\n        when (current_sales - avg_sales) < 0 then 'below average'\n        else 'average'\n    end as avg_sales_change,\n    current_sales - prev_sales as sales_diff,\n    case\n        when (current_sales - prev_sales) > 0 then 'increase'\n        when (current_sales - prev_sales) < 0 then 'decrease'\n        else 'no change'\n    end as prev_sales_change\nfrom avg_prev_sales;\n\n--month-to-month analysis\nwith monthly_sales as (\nselect\n    date_part('month', sales_order_date) as order_month,\n    dp.product_name,\n    sum(fs.sales_amount) as current_sales\nfrom \"dwh\".\"gold\".\"fact_sales\" fs\nleft join \"dwh\".\"gold\".\"dim_products_current\" dp on fs.product_skey = dp.product_skey\nwhere fs.sales_order_date is not null\ngroup by order_month, dp.product_name\norder by order_month\n),\navg_prev_sales as (select\n    order_month,\n    product_name,\n    current_sales,\n    avg(current_sales) over(partition by product_name) as avg_sales,\n    lag(current_sales) over(partition by product_name order by order_month) as prev_sales\nfrom monthly_sales\norder by product_name,order_month)\nselect\n    *,\n    current_sales - avg_sales as sales_avg_diff,\n    case\n        when (current_sales - avg_sales) > 0 then 'above average'\n        when (current_sales - avg_sales) < 0 then 'below average'\n        else 'average'\n    end as avg_sales_change,\n    current_sales - prev_sales as sales_diff,\n    case\n        when (current_sales - prev_sales) > 0 then 'increase'\n        when (current_sales - prev_sales) < 0 then 'decrease'\n        else 'no change'\n    end as prev_sales_change\nfrom avg_prev_sales;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transform.magnitude_exploration": {"database": "dwh", "schema": "main", "name": "magnitude_exploration", "resource_type": "analysis", "package_name": "dbt_transform", "path": "analysis/magnitude_exploration.sql", "original_file_path": "analyses/magnitude_exploration.sql", "unique_id": "analysis.dbt_transform.magnitude_exploration", "fqn": ["dbt_transform", "analysis", "magnitude_exploration"], "alias": "magnitude_exploration", "checksum": {"name": "sha256", "checksum": "7f27a1655224b7ed2386d1eac5a010f40a68001232519d6f056ff91f13afcb56"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.2027142, "relation_name": null, "raw_code": "/*\n===============================================================================\nMagnitude Analysis\n===============================================================================\nPurpose:\n    - To quantify data and group results by specific dimensions.\n    - For understanding data distribution across categories.\n\nSQL Functions Used:\n    - Aggregate Functions: SUM(), COUNT(), AVG()\n    - GROUP BY, ORDER BY\n===============================================================================\n*/\n\n-- Find total customers by countries\nselect\n    --'total_customer_per_country' as measure_name,\n    customer_country,\n    count(customer_skey) as total_customer_by_country\nfrom {{ source('analytics_source', 'dim_customers_current') }} -- gold.dim_customers\ngroup by customer_country\norder by total_customer_by_country desc;\n\n/*\ncustomer_country,total_customer_by_country\nUnited States,7482\nAustralia,3591\nUnited Kingdom,1913\nFrance,1810\nGermany,1780\nCanada,1571\nn/a,337\n */\n\n-- Find total customers by gender per country\nselect\n    customer_gender, customer_country,\n    count(customer_skey) as total_customer_by_gender_country\nfrom {{ source('analytics_source', 'dim_customers_current') }}--gold.dim_customers\ngroup by customer_gender, customer_country\norder by total_customer_by_gender_country desc;\n\n/*\n customer_gender,customer_country,total_customer_by_gender_country\nMale,United States,3757\nFemale,United States,3724\nMale,Australia,1814\nFemale,Australia,1777\nMale,United Kingdom,977\nFemale,United Kingdom,932\nMale,France,913\nMale,Germany,903\nFemale,France,891\nFemale,Germany,873\nMale,Canada,804\nFemale,Canada,767\nMale,n/a,173\nFemale,n/a,164\nn/a,France,6\nn/a,United Kingdom,4\nn/a,Germany,4\nn/a,United States,1\n */\n\n-- Find total products by category\nselect\n    product_category,\n    count(product_skey) as total_products_by_category\nfrom {{ source('analytics_source', 'dim_products_current') }}--gold.dim_products\ngroup by product_category\norder by total_products_by_category desc;\n\n/*\n product_category,total_products_by_category\nComponents,127\nBikes,97\nClothing,35\nAccessories,29\nnull,7\n */\n-- What is the average costs in each category?\nselect\n    product_category,\n    round(avg(product_cost),2) as avg_product_cost\n    --count(product_skey) as total_products_by_category\nfrom {{ source('analytics_source', 'dim_products_current') }} --gold.dim_products\ngroup by product_category\norder by avg_product_cost desc;\n\n-- What is the total revenue generated for each category?\nSelect\n    dp.product_category,\n    avg(dp.product_cost) as avg_product_cost_per_category,\n    sum(fs.sales_amount) as total_revenue_per_category\nfrom {{ source('analytics_source', 'fact_sales') }} --gold.fact_sales fs\nleft join {{ source('analytics_source', 'dim_products_current') }} dp on fs.product_skey=dp.product_skey\ngroup by dp.product_category\norder by total_revenue_per_category desc;\n\n/*\n product_category,avg_product_cost_per_category,total_revenue_per_category\nBikes,1131.6479447550148,28316272\nAccessories,7.222015959215339,700262\nClothing,22.29271508625426,339716\n */\n\n-- What is the total revenue generated by each customer?\nSelect\n    dc.customer_key,\n    sum(fs.sales_amount) as top_10_customers\nfrom {{ source('analytics_source', 'fact_sales') }} fs\nleft join {{ source('analytics_source', 'dim_customers_current') }} dc on fs.customer_skey=dc.customer_skey\ngroup by dc.customer_key\norder by top_10_customers desc\nlimit 10;\n\n/*\ncustomer_key,total_revenue_per_customer\nAW00012301,13294\nAW00012132,13294\nAW00012308,13268\nAW00012131,13265\nAW00012300,13242\nAW00012321,13215\nAW00012124,13195\nAW00012307,13172\nAW00012296,13164\nAW00011433,12914\n\n */\n\n-- What is the distribution of sold items across countries?\nSelect\n    dc.customer_country,\n    --dp.product_name,\n    sum(fs.sales_quantity) as total_sold_items\nfrom {{ source('analytics_source', 'fact_sales') }} fs\nleft join {{ source('analytics_source', 'dim_customers_current') }} dc on fs.customer_skey=dc.customer_skey\nleft join {{ source('analytics_source', 'dim_products_current') }} dp on fs.product_skey=dp.product_skey\ngroup by dc.customer_country--,dp.product_name\norder by total_sold_items desc;\n\n/*\n customer_country,total_sold_items\nUnited States,20481\nAustralia,13346\nCanada,7630\nUnited Kingdom,6910\nGermany,5626\nFrance,5559\nn/a,871\n\n */", "language": "sql", "refs": [], "sources": [["analytics_source", "dim_customers_current"], ["analytics_source", "dim_customers_current"], ["analytics_source", "dim_products_current"], ["analytics_source", "dim_products_current"], ["analytics_source", "fact_sales"], ["analytics_source", "dim_products_current"], ["analytics_source", "fact_sales"], ["analytics_source", "dim_customers_current"], ["analytics_source", "fact_sales"], ["analytics_source", "dim_customers_current"], ["analytics_source", "dim_products_current"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_transform.analytics_source.dim_customers_current", "source.dbt_transform.analytics_source.dim_products_current", "source.dbt_transform.analytics_source.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/analyses/magnitude_exploration.sql", "compiled": true, "compiled_code": "/*\n===============================================================================\nMagnitude Analysis\n===============================================================================\nPurpose:\n    - To quantify data and group results by specific dimensions.\n    - For understanding data distribution across categories.\n\nSQL Functions Used:\n    - Aggregate Functions: SUM(), COUNT(), AVG()\n    - GROUP BY, ORDER BY\n===============================================================================\n*/\n\n-- Find total customers by countries\nselect\n    --'total_customer_per_country' as measure_name,\n    customer_country,\n    count(customer_skey) as total_customer_by_country\nfrom \"dwh\".\"gold\".\"dim_customers_current\" -- gold.dim_customers\ngroup by customer_country\norder by total_customer_by_country desc;\n\n/*\ncustomer_country,total_customer_by_country\nUnited States,7482\nAustralia,3591\nUnited Kingdom,1913\nFrance,1810\nGermany,1780\nCanada,1571\nn/a,337\n */\n\n-- Find total customers by gender per country\nselect\n    customer_gender, customer_country,\n    count(customer_skey) as total_customer_by_gender_country\nfrom \"dwh\".\"gold\".\"dim_customers_current\"--gold.dim_customers\ngroup by customer_gender, customer_country\norder by total_customer_by_gender_country desc;\n\n/*\n customer_gender,customer_country,total_customer_by_gender_country\nMale,United States,3757\nFemale,United States,3724\nMale,Australia,1814\nFemale,Australia,1777\nMale,United Kingdom,977\nFemale,United Kingdom,932\nMale,France,913\nMale,Germany,903\nFemale,France,891\nFemale,Germany,873\nMale,Canada,804\nFemale,Canada,767\nMale,n/a,173\nFemale,n/a,164\nn/a,France,6\nn/a,United Kingdom,4\nn/a,Germany,4\nn/a,United States,1\n */\n\n-- Find total products by category\nselect\n    product_category,\n    count(product_skey) as total_products_by_category\nfrom \"dwh\".\"gold\".\"dim_products_current\"--gold.dim_products\ngroup by product_category\norder by total_products_by_category desc;\n\n/*\n product_category,total_products_by_category\nComponents,127\nBikes,97\nClothing,35\nAccessories,29\nnull,7\n */\n-- What is the average costs in each category?\nselect\n    product_category,\n    round(avg(product_cost),2) as avg_product_cost\n    --count(product_skey) as total_products_by_category\nfrom \"dwh\".\"gold\".\"dim_products_current\" --gold.dim_products\ngroup by product_category\norder by avg_product_cost desc;\n\n-- What is the total revenue generated for each category?\nSelect\n    dp.product_category,\n    avg(dp.product_cost) as avg_product_cost_per_category,\n    sum(fs.sales_amount) as total_revenue_per_category\nfrom \"dwh\".\"gold\".\"fact_sales\" --gold.fact_sales fs\nleft join \"dwh\".\"gold\".\"dim_products_current\" dp on fs.product_skey=dp.product_skey\ngroup by dp.product_category\norder by total_revenue_per_category desc;\n\n/*\n product_category,avg_product_cost_per_category,total_revenue_per_category\nBikes,1131.6479447550148,28316272\nAccessories,7.222015959215339,700262\nClothing,22.29271508625426,339716\n */\n\n-- What is the total revenue generated by each customer?\nSelect\n    dc.customer_key,\n    sum(fs.sales_amount) as top_10_customers\nfrom \"dwh\".\"gold\".\"fact_sales\" fs\nleft join \"dwh\".\"gold\".\"dim_customers_current\" dc on fs.customer_skey=dc.customer_skey\ngroup by dc.customer_key\norder by top_10_customers desc\nlimit 10;\n\n/*\ncustomer_key,total_revenue_per_customer\nAW00012301,13294\nAW00012132,13294\nAW00012308,13268\nAW00012131,13265\nAW00012300,13242\nAW00012321,13215\nAW00012124,13195\nAW00012307,13172\nAW00012296,13164\nAW00011433,12914\n\n */\n\n-- What is the distribution of sold items across countries?\nSelect\n    dc.customer_country,\n    --dp.product_name,\n    sum(fs.sales_quantity) as total_sold_items\nfrom \"dwh\".\"gold\".\"fact_sales\" fs\nleft join \"dwh\".\"gold\".\"dim_customers_current\" dc on fs.customer_skey=dc.customer_skey\nleft join \"dwh\".\"gold\".\"dim_products_current\" dp on fs.product_skey=dp.product_skey\ngroup by dc.customer_country--,dp.product_name\norder by total_sold_items desc;\n\n/*\n customer_country,total_sold_items\nUnited States,20481\nAustralia,13346\nCanada,7630\nUnited Kingdom,6910\nGermany,5626\nFrance,5559\nn/a,871\n\n */", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transform.part_to_whole_analysis": {"database": "dwh", "schema": "main", "name": "part_to_whole_analysis", "resource_type": "analysis", "package_name": "dbt_transform", "path": "analysis/part_to_whole_analysis.sql", "original_file_path": "analyses/part_to_whole_analysis.sql", "unique_id": "analysis.dbt_transform.part_to_whole_analysis", "fqn": ["dbt_transform", "analysis", "part_to_whole_analysis"], "alias": "part_to_whole_analysis", "checksum": {"name": "sha256", "checksum": "34e4934d4638fd9e4a311c9cc1d9bdef781b9c581d3df102103130f1dcdcb881"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.20799, "relation_name": null, "raw_code": "/*\n===============================================================================\nPart-to-Whole Analysis\n===============================================================================\nPurpose:\n    - To compare performance or metrics across dimensions or time periods.\n    - To evaluate differences between categories.\n    - Useful for A/B testing or regional comparisons.\n\nSQL Functions Used:\n    - SUM(), AVG(): Aggregates values for comparison.\n    - Window Functions: SUM() OVER() for total calculations.\n===============================================================================\n*/\n-- Which categories contribute the most to overall sales and overall orders?\nwith category_sales_orders as (\nselect\n    dp.product_category,\n    sum(fs.sales_amount) as total_sales,\n    count(fs.sales_order_number) as total_orders\nfrom {{ source('analytics_source', 'fact_sales') }} fs\nleft join {{ source('analytics_source', 'dim_products_current') }} dp on fs.product_skey = dp.product_skey\ngroup by dp.product_category\n),\noverall_calc as (\nselect *,\n       sum(total_sales) over() as overall_sales,\n       sum(total_orders) over() as overall_orders\nfrom category_sales_orders\n)\nselect *,\n       concat(round((total_sales::float/overall_sales)*100,2) , '%') as percentage_of_total,\n       concat(round((total_orders::float/overall_orders)*100,2) , '%') as percentage_of_orders\nfrom overall_calc\norder by total_sales desc;\n\n-- bikes contributes more to sales even if it is only 25% of the order.\n--    accessories have the highest order percentage buy brings in only 2.3% of the revenue.", "language": "sql", "refs": [], "sources": [["analytics_source", "fact_sales"], ["analytics_source", "dim_products_current"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_transform.analytics_source.fact_sales", "source.dbt_transform.analytics_source.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/analyses/part_to_whole_analysis.sql", "compiled": true, "compiled_code": "/*\n===============================================================================\nPart-to-Whole Analysis\n===============================================================================\nPurpose:\n    - To compare performance or metrics across dimensions or time periods.\n    - To evaluate differences between categories.\n    - Useful for A/B testing or regional comparisons.\n\nSQL Functions Used:\n    - SUM(), AVG(): Aggregates values for comparison.\n    - Window Functions: SUM() OVER() for total calculations.\n===============================================================================\n*/\n-- Which categories contribute the most to overall sales and overall orders?\nwith category_sales_orders as (\nselect\n    dp.product_category,\n    sum(fs.sales_amount) as total_sales,\n    count(fs.sales_order_number) as total_orders\nfrom \"dwh\".\"gold\".\"fact_sales\" fs\nleft join \"dwh\".\"gold\".\"dim_products_current\" dp on fs.product_skey = dp.product_skey\ngroup by dp.product_category\n),\noverall_calc as (\nselect *,\n       sum(total_sales) over() as overall_sales,\n       sum(total_orders) over() as overall_orders\nfrom category_sales_orders\n)\nselect *,\n       concat(round((total_sales::float/overall_sales)*100,2) , '%') as percentage_of_total,\n       concat(round((total_orders::float/overall_orders)*100,2) , '%') as percentage_of_orders\nfrom overall_calc\norder by total_sales desc;\n\n-- bikes contributes more to sales even if it is only 25% of the order.\n--    accessories have the highest order percentage buy brings in only 2.3% of the revenue.", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transform.segmentation_analysis": {"database": "dwh", "schema": "main", "name": "segmentation_analysis", "resource_type": "analysis", "package_name": "dbt_transform", "path": "analysis/segmentation_analysis.sql", "original_file_path": "analyses/segmentation_analysis.sql", "unique_id": "analysis.dbt_transform.segmentation_analysis", "fqn": ["dbt_transform", "analysis", "segmentation_analysis"], "alias": "segmentation_analysis", "checksum": {"name": "sha256", "checksum": "ff18cb8d4c6d1ded762741181e2ada6d70d3967d9bfa393c88d9d578f5910b57"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.211367, "relation_name": null, "raw_code": "/*\n===============================================================================\nData Segmentation Analysis\n===============================================================================\nPurpose:\n    - To group data into meaningful categories for targeted insights.\n    - For customer segmentation, product categorization, or regional analysis.\n\nSQL Functions Used:\n    - CASE: Defines custom segmentation logic.\n    - GROUP BY: Groups data into segments.\n===============================================================================\n*/\n\n/*Segment products into cost ranges and \ncount how many products fall into each segment*/\n\nwith product_segments as (\nSELECT\n    product_name,\n    product_key,\n    product_category,\n    product_cost,\n    CASE\n        WHEN product_cost < 100 then 'BELOW 100'\n        WHEN product_cost between 100 and 500 then '100-500'\n        WHEN product_cost between 500  and 1000 then '500-1000'\n        ELSE 'above 1000'\n    END  as product_cost_range\nfrom {{ source('analytics_source', 'dim_products_current') }}\n)\nselect\n    product_cost_range,\n    count(product_key) as total_products\nfrom product_segments\ngroup by product_cost_range\norder by total_products desc;\n\n\n/*Group customers into three segments based on their spending behavior:\n\t- VIP: Customers with at least 12 months of history and spending more than \u20ac5,000.\n\t- Regular: Customers with at least 12 months of history but spending \u20ac5,000 or less.\n\t- New: Customers with a lifespan less than 12 months.\nAnd find the total number of customers by each group\n*/\n\n\nWITH customer_spending as (\n    SELECT\n    dc.customer_key,\n    sum(fs.sales_amount) as total_spending,\n    min(sales_order_date) as first_order,\n    max(sales_order_date) as last_order,\n    datediff('month', min(sales_order_date), max(sales_order_date) ) as lifespan\n    from {{ source('analytics_source', 'fact_sales') }} fs\n    left join {{ source('analytics_source', 'dim_customers_current') }}  dc on fs.customer_skey = dc.customer_skey\ngroup by dc.customer_key\n),\ncustomer_seg as (\nselect\n    *,\n    CASE\n        WHEN lifespan >=12 AND total_spending > 5000 then 'VIP'\n        WHEN lifespan >=12 AND total_spending <= 5000 then 'Regular'\n        ELSE 'NEW'\n    END as customer_status\nfrom customer_spending\n)\nselect\n    customer_status,\n    count(customer_key) as total_customers\nfrom customer_seg\ngroup by customer_status\norder by  total_customers desc;", "language": "sql", "refs": [], "sources": [["analytics_source", "dim_products_current"], ["analytics_source", "fact_sales"], ["analytics_source", "dim_customers_current"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_transform.analytics_source.dim_products_current", "source.dbt_transform.analytics_source.fact_sales", "source.dbt_transform.analytics_source.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/analyses/segmentation_analysis.sql", "compiled": true, "compiled_code": "/*\n===============================================================================\nData Segmentation Analysis\n===============================================================================\nPurpose:\n    - To group data into meaningful categories for targeted insights.\n    - For customer segmentation, product categorization, or regional analysis.\n\nSQL Functions Used:\n    - CASE: Defines custom segmentation logic.\n    - GROUP BY: Groups data into segments.\n===============================================================================\n*/\n\n/*Segment products into cost ranges and \ncount how many products fall into each segment*/\n\nwith product_segments as (\nSELECT\n    product_name,\n    product_key,\n    product_category,\n    product_cost,\n    CASE\n        WHEN product_cost < 100 then 'BELOW 100'\n        WHEN product_cost between 100 and 500 then '100-500'\n        WHEN product_cost between 500  and 1000 then '500-1000'\n        ELSE 'above 1000'\n    END  as product_cost_range\nfrom \"dwh\".\"gold\".\"dim_products_current\"\n)\nselect\n    product_cost_range,\n    count(product_key) as total_products\nfrom product_segments\ngroup by product_cost_range\norder by total_products desc;\n\n\n/*Group customers into three segments based on their spending behavior:\n\t- VIP: Customers with at least 12 months of history and spending more than \u20ac5,000.\n\t- Regular: Customers with at least 12 months of history but spending \u20ac5,000 or less.\n\t- New: Customers with a lifespan less than 12 months.\nAnd find the total number of customers by each group\n*/\n\n\nWITH customer_spending as (\n    SELECT\n    dc.customer_key,\n    sum(fs.sales_amount) as total_spending,\n    min(sales_order_date) as first_order,\n    max(sales_order_date) as last_order,\n    datediff('month', min(sales_order_date), max(sales_order_date) ) as lifespan\n    from \"dwh\".\"gold\".\"fact_sales\" fs\n    left join \"dwh\".\"gold\".\"dim_customers_current\"  dc on fs.customer_skey = dc.customer_skey\ngroup by dc.customer_key\n),\ncustomer_seg as (\nselect\n    *,\n    CASE\n        WHEN lifespan >=12 AND total_spending > 5000 then 'VIP'\n        WHEN lifespan >=12 AND total_spending <= 5000 then 'Regular'\n        ELSE 'NEW'\n    END as customer_status\nfrom customer_spending\n)\nselect\n    customer_status,\n    count(customer_key) as total_customers\nfrom customer_seg\ngroup by customer_status\norder by  total_customers desc;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transform.cumulative_analysis": {"database": "dwh", "schema": "main", "name": "cumulative_analysis", "resource_type": "analysis", "package_name": "dbt_transform", "path": "analysis/cumulative_analysis.sql", "original_file_path": "analyses/cumulative_analysis.sql", "unique_id": "analysis.dbt_transform.cumulative_analysis", "fqn": ["dbt_transform", "analysis", "cumulative_analysis"], "alias": "cumulative_analysis", "checksum": {"name": "sha256", "checksum": "00890900190ae00be3dfa7117410ad4a99797c401a94be0795df1d3c79e8f6ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.2151291, "relation_name": null, "raw_code": "/*\n===============================================================================\nCumulative Analysis\n===============================================================================\nPurpose:\n    - To calculate running totals or moving averages for key metrics.\n    - To track performance over time cumulatively.\n    - Useful for growth analysis or identifying long-term trends.\n\nSQL Functions Used:\n    - Window Functions: SUM() OVER(), AVG() OVER()\n===============================================================================\n*/\n\n-- Calculate the total sales per month \n-- and the running total of sales over time .\nwith monthly_sales as (\nselect\n    date_trunc('month', sales_order_date) as order_month,\n    sum(sales_amount) as total_sales_per_month,\n    round(avg(sales_price),2) as avg_sales_price_per_month\nfrom {{ source('analytics_source', 'fact_sales') }}\nwhere sales_order_date is not null\ngroup by order_month\n)\nselect\n    order_month,\n    total_sales_per_month,\n    sum(total_sales_per_month) over (partition by order_month order by order_month) as running_total_sales,\n    round(avg(avg_sales_price_per_month) over(partition by order_month order by order_month),2) as moving_avg_month\nfrom monthly_sales\norder by order_month;\n\n-- by year and over time\nwith yearly_sales as (\nselect\n    date_trunc('year', sales_order_date) as order_year,\n    sum(sales_amount) as total_sales_per_year,\n    round(avg(sales_price),2) as avg_sales_price_per_year\nfrom  {{ source('analytics_source', 'fact_sales') }}\nwhere sales_order_date is not null\ngroup by order_year\n)\nselect\n    order_year,\n    total_sales_per_year,\n    sum(total_sales_per_year) over ( order by order_year) as running_total_sales_year,\n    round(avg(avg_sales_price_per_year) over( order by order_year),2) as moving_avg_year\nfrom yearly_sales\norder by order_year;", "language": "sql", "refs": [], "sources": [["analytics_source", "fact_sales"], ["analytics_source", "fact_sales"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_transform.analytics_source.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/analyses/cumulative_analysis.sql", "compiled": true, "compiled_code": "/*\n===============================================================================\nCumulative Analysis\n===============================================================================\nPurpose:\n    - To calculate running totals or moving averages for key metrics.\n    - To track performance over time cumulatively.\n    - Useful for growth analysis or identifying long-term trends.\n\nSQL Functions Used:\n    - Window Functions: SUM() OVER(), AVG() OVER()\n===============================================================================\n*/\n\n-- Calculate the total sales per month \n-- and the running total of sales over time .\nwith monthly_sales as (\nselect\n    date_trunc('month', sales_order_date) as order_month,\n    sum(sales_amount) as total_sales_per_month,\n    round(avg(sales_price),2) as avg_sales_price_per_month\nfrom \"dwh\".\"gold\".\"fact_sales\"\nwhere sales_order_date is not null\ngroup by order_month\n)\nselect\n    order_month,\n    total_sales_per_month,\n    sum(total_sales_per_month) over (partition by order_month order by order_month) as running_total_sales,\n    round(avg(avg_sales_price_per_month) over(partition by order_month order by order_month),2) as moving_avg_month\nfrom monthly_sales\norder by order_month;\n\n-- by year and over time\nwith yearly_sales as (\nselect\n    date_trunc('year', sales_order_date) as order_year,\n    sum(sales_amount) as total_sales_per_year,\n    round(avg(sales_price),2) as avg_sales_price_per_year\nfrom  \"dwh\".\"gold\".\"fact_sales\"\nwhere sales_order_date is not null\ngroup by order_year\n)\nselect\n    order_year,\n    total_sales_per_year,\n    sum(total_sales_per_year) over ( order by order_year) as running_total_sales_year,\n    round(avg(avg_sales_price_per_year) over( order by order_year),2) as moving_avg_year\nfrom yearly_sales\norder by order_year;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transform.change_over_time": {"database": "dwh", "schema": "main", "name": "change_over_time", "resource_type": "analysis", "package_name": "dbt_transform", "path": "analysis/change_over_time.sql", "original_file_path": "analyses/change_over_time.sql", "unique_id": "analysis.dbt_transform.change_over_time", "fqn": ["dbt_transform", "analysis", "change_over_time"], "alias": "change_over_time", "checksum": {"name": "sha256", "checksum": "e5c9f4209bb3b85091128fb8073a191d16c4cd1d39394784a6ad85be2f24bafe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.2186801, "relation_name": null, "raw_code": "/*\n===============================================================================\nChange Over Time Analysis\n===============================================================================\nPurpose:\n    - To track trends, growth, and changes in key metrics over time.\n    - For time-series analysis and identifying seasonality.\n    - To measure growth or decline over specific periods.\n\nSQL Functions Used:\n    - Date Functions: DATEPART(), DATETRUNC(), FORMAT()\n    - Aggregate Functions: SUM(), COUNT(), AVG()\n===============================================================================\n*/\n-- Analyse sales performance over time\n-- Quick Date Functions\nselect\n    year(sales_order_date) as order_year,\n    --month(sales_order_date) as order_month,\n    sum(sales_amount) as total_sales,\n    count(distinct customer_skey) as total_customers,\n    sum(sales_quantity) as total_items,\nfrom {{ source('analytics_source', 'fact_sales') }}\nwhere sales_order_date is not null\ngroup by order_year--, order_month\norder by order_year;\n\n/*\n order_year,total_sales,total_customers,total_items\n2010,43419,14,14\n2011,7075088,2216,2216\n2012,5842231,3255,3397\n2013,16344878,17427,52807\n2014,45642,834,1970\n\n */\n-- similarly if the trend is checked by month.\nselect\n--     year(sales_order_date) as order_year,\n    month(sales_order_date) as order_month,\n    sum(sales_amount) as total_sales,\n    count(distinct customer_skey) as total_customers,\n    sum(sales_quantity) as total_items,\nfrom  {{ source('analytics_source', 'fact_sales') }}\nwhere sales_order_date is not null\ngroup by order_month\norder by order_month;\n\n-- finds the month in which sales or customers are highest(dec) and next query lowest(feb).\nwith monthly_sales as (select\n--     year(sales_order_date) as order_year,\n    month(sales_order_date) as order_month,\n    sum(sales_amount) as total_sales,\n    count(distinct customer_skey) as total_customers,\n    sum(sales_quantity) as total_items,\nfrom  {{ source('analytics_source', 'fact_sales') }}\nwhere sales_order_date is not null\ngroup by order_month\norder by order_month)\nSELECT\n    order_month,\n    total_sales,\n    total_customers,\n    total_items,\n    RANK() OVER (ORDER BY total_sales desc) AS sales_rank,\n    RANK() OVER (ORDER BY total_customers desc) AS customer_rank\nFROM monthly_sales\nqualify sales_rank = 1 or customer_rank = 1\nORDER BY sales_rank, customer_rank;\n\n--lowest\nwith monthly_sales as (select\n--     year(sales_order_date) as order_year,\n    month(sales_order_date) as order_month,\n    sum(sales_amount) as total_sales,\n    count(distinct customer_skey) as total_customers,\n    sum(sales_quantity) as total_items,\nfrom  {{ source('analytics_source', 'fact_sales') }}\nwhere sales_order_date is not null\ngroup by order_month\norder by order_month)\nSELECT\n    order_month,\n    total_sales,\n    total_customers,\n    total_items,\n    RANK() OVER (ORDER BY total_sales asc) AS sales_rank,\n    RANK() OVER (ORDER BY total_customers asc) AS customer_rank\nFROM monthly_sales\nqualify sales_rank = 1 or customer_rank = 1\nORDER BY sales_rank, customer_rank;\n\n\n-- DATETRUNC() -- month argument gives the first day of the month, year first day of the year\nselect date_trunc('month',current_date);\n\n-- status of total sales, customers and items sold at the beginning of each monthly\nselect\n--     year(sales_order_date) as order_year,\n    date_trunc('month',sales_order_date) as order_month,\n    sum(sales_amount) as total_sales,\n    count(distinct customer_skey) as total_customers,\n    sum(sales_quantity) as total_items,\nfrom  {{ source('analytics_source', 'fact_sales') }}\nwhere sales_order_date is not null\ngroup by order_month\norder by order_month;", "language": "sql", "refs": [], "sources": [["analytics_source", "fact_sales"], ["analytics_source", "fact_sales"], ["analytics_source", "fact_sales"], ["analytics_source", "fact_sales"], ["analytics_source", "fact_sales"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_transform.analytics_source.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/analyses/change_over_time.sql", "compiled": true, "compiled_code": "/*\n===============================================================================\nChange Over Time Analysis\n===============================================================================\nPurpose:\n    - To track trends, growth, and changes in key metrics over time.\n    - For time-series analysis and identifying seasonality.\n    - To measure growth or decline over specific periods.\n\nSQL Functions Used:\n    - Date Functions: DATEPART(), DATETRUNC(), FORMAT()\n    - Aggregate Functions: SUM(), COUNT(), AVG()\n===============================================================================\n*/\n-- Analyse sales performance over time\n-- Quick Date Functions\nselect\n    year(sales_order_date) as order_year,\n    --month(sales_order_date) as order_month,\n    sum(sales_amount) as total_sales,\n    count(distinct customer_skey) as total_customers,\n    sum(sales_quantity) as total_items,\nfrom \"dwh\".\"gold\".\"fact_sales\"\nwhere sales_order_date is not null\ngroup by order_year--, order_month\norder by order_year;\n\n/*\n order_year,total_sales,total_customers,total_items\n2010,43419,14,14\n2011,7075088,2216,2216\n2012,5842231,3255,3397\n2013,16344878,17427,52807\n2014,45642,834,1970\n\n */\n-- similarly if the trend is checked by month.\nselect\n--     year(sales_order_date) as order_year,\n    month(sales_order_date) as order_month,\n    sum(sales_amount) as total_sales,\n    count(distinct customer_skey) as total_customers,\n    sum(sales_quantity) as total_items,\nfrom  \"dwh\".\"gold\".\"fact_sales\"\nwhere sales_order_date is not null\ngroup by order_month\norder by order_month;\n\n-- finds the month in which sales or customers are highest(dec) and next query lowest(feb).\nwith monthly_sales as (select\n--     year(sales_order_date) as order_year,\n    month(sales_order_date) as order_month,\n    sum(sales_amount) as total_sales,\n    count(distinct customer_skey) as total_customers,\n    sum(sales_quantity) as total_items,\nfrom  \"dwh\".\"gold\".\"fact_sales\"\nwhere sales_order_date is not null\ngroup by order_month\norder by order_month)\nSELECT\n    order_month,\n    total_sales,\n    total_customers,\n    total_items,\n    RANK() OVER (ORDER BY total_sales desc) AS sales_rank,\n    RANK() OVER (ORDER BY total_customers desc) AS customer_rank\nFROM monthly_sales\nqualify sales_rank = 1 or customer_rank = 1\nORDER BY sales_rank, customer_rank;\n\n--lowest\nwith monthly_sales as (select\n--     year(sales_order_date) as order_year,\n    month(sales_order_date) as order_month,\n    sum(sales_amount) as total_sales,\n    count(distinct customer_skey) as total_customers,\n    sum(sales_quantity) as total_items,\nfrom  \"dwh\".\"gold\".\"fact_sales\"\nwhere sales_order_date is not null\ngroup by order_month\norder by order_month)\nSELECT\n    order_month,\n    total_sales,\n    total_customers,\n    total_items,\n    RANK() OVER (ORDER BY total_sales asc) AS sales_rank,\n    RANK() OVER (ORDER BY total_customers asc) AS customer_rank\nFROM monthly_sales\nqualify sales_rank = 1 or customer_rank = 1\nORDER BY sales_rank, customer_rank;\n\n\n-- DATETRUNC() -- month argument gives the first day of the month, year first day of the year\nselect date_trunc('month',current_date);\n\n-- status of total sales, customers and items sold at the beginning of each monthly\nselect\n--     year(sales_order_date) as order_year,\n    date_trunc('month',sales_order_date) as order_month,\n    sum(sales_amount) as total_sales,\n    count(distinct customer_skey) as total_customers,\n    sum(sales_quantity) as total_items,\nfrom  \"dwh\".\"gold\".\"fact_sales\"\nwhere sales_order_date is not null\ngroup by order_month\norder by order_month;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transform.measures_exploration": {"database": "dwh", "schema": "main", "name": "measures_exploration", "resource_type": "analysis", "package_name": "dbt_transform", "path": "analysis/measures_exploration.sql", "original_file_path": "analyses/measures_exploration.sql", "unique_id": "analysis.dbt_transform.measures_exploration", "fqn": ["dbt_transform", "analysis", "measures_exploration"], "alias": "measures_exploration", "checksum": {"name": "sha256", "checksum": "1825ac7ab64f469fd3e36898057e3cf9dde07249721d734e2e996ce77c5abe1f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.2229068, "relation_name": null, "raw_code": "/*\n===============================================================================\nMeasures Exploration (Key Metrics)\n===============================================================================\nPurpose:\n    - To calculate aggregated metrics (e.g., totals, averages) for quick insights.\n    - To identify overall trends or spot anomalies.\n\nSQL Functions Used:\n    - COUNT(), SUM(), AVG()\n===============================================================================\n*/\n\n-- Find the Total Sales\n\nselect\n    sum(sales_amount) as total_sales\nfrom {{ source('analytics_source','fact_sales') }}; -- 29,356,250\n\n-- Find how many items are sold\nselect\n    sum(sales_quantity) as total_items_sold\nfrom {{ source('analytics_source','fact_sales') }}; --60423\n\n-- Find the average selling price\nselect\n    round(avg(sales_price),2) as avg_sale_price\nfrom {{ source('analytics_source','fact_sales') }}; -- 486.04\n\n-- Find the Total number of Orders\nselect\n    count(distinct sales_order_number) as total_orders\nfrom {{ source('analytics_source','fact_sales') }}; --27659\n\n-- Find the total number of products\nselect\n    count( product_key) as total_products\nfrom {{ source('analytics_source','dim_products_current') }}; -- 295\nselect\n    count( distinct product_skey) as total_products\nfrom {{ source('analytics_source','fact_sales') }}; --130\n\n-- Find the total number of customers\nselect\n    count(customer_skey) as total_customers\nfrom {{ source('analytics_source','dim_customers_current') }}; --18484\n\n-- Find the total number of customers that has placed an order\nselect\n    count( distinct customer_skey) as total_customers\nfrom {{ source('analytics_source','fact_sales') }}; --18484\n\n\n\n-- Generate a comprehensive business metrics \nwith customer_source as (\n    Select * from {{ source('analytics_source','dim_customers_current') }}\n),\nproducts_source as (\n    Select * from {{ source('analytics_source','dim_products_current') }}\n),\nsales_source as (\n    Select * from {{ source('analytics_source','fact_sales') }}\n),\nsales_metrics as (\n    select\n        sum(sales_amount) as total_sales,\n        sum(sales_quantity) as total_items_sold,\n        round(avg(sales_price),2) as avg_sale_price,\n        count(distinct sales_order_number) as total_orders\n    from sales_source\n),\nproduct_metrics as (\n    select \n        count(product_key) as total_products\n    from products_source\n),\ncustomer_metrics as (\n    select \n        count(customer_skey) as total_customers,\n        (select count(distinct customer_skey) from sales_source) as total_ordered_customers\n    from customer_source\n),\nbusiness_metrics as (\n    select 'total_sales' as measure_name, total_sales as measure_value from sales_metrics\n    UNION ALL\n    select 'total_items_sold', total_items_sold from sales_metrics\n    UNION ALL\n    select 'avg_sale_price', avg_sale_price from sales_metrics\n    UNION ALL\n    select 'total_orders', total_orders from sales_metrics\n    UNION ALL\n    select 'total_products', total_products from product_metrics\n    UNION ALL\n    select 'total_customer', total_customers from customer_metrics\n    UNION ALL\n    select 'total_ordered_customer', total_ordered_customers from customer_metrics\n)\nselect * from business_metrics;", "language": "sql", "refs": [], "sources": [["analytics_source", "fact_sales"], ["analytics_source", "fact_sales"], ["analytics_source", "fact_sales"], ["analytics_source", "fact_sales"], ["analytics_source", "dim_products_current"], ["analytics_source", "fact_sales"], ["analytics_source", "dim_customers_current"], ["analytics_source", "fact_sales"], ["analytics_source", "dim_customers_current"], ["analytics_source", "dim_products_current"], ["analytics_source", "fact_sales"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_transform.analytics_source.fact_sales", "source.dbt_transform.analytics_source.dim_products_current", "source.dbt_transform.analytics_source.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/analyses/measures_exploration.sql", "compiled": true, "compiled_code": "/*\n===============================================================================\nMeasures Exploration (Key Metrics)\n===============================================================================\nPurpose:\n    - To calculate aggregated metrics (e.g., totals, averages) for quick insights.\n    - To identify overall trends or spot anomalies.\n\nSQL Functions Used:\n    - COUNT(), SUM(), AVG()\n===============================================================================\n*/\n\n-- Find the Total Sales\n\nselect\n    sum(sales_amount) as total_sales\nfrom \"dwh\".\"gold\".\"fact_sales\"; -- 29,356,250\n\n-- Find how many items are sold\nselect\n    sum(sales_quantity) as total_items_sold\nfrom \"dwh\".\"gold\".\"fact_sales\"; --60423\n\n-- Find the average selling price\nselect\n    round(avg(sales_price),2) as avg_sale_price\nfrom \"dwh\".\"gold\".\"fact_sales\"; -- 486.04\n\n-- Find the Total number of Orders\nselect\n    count(distinct sales_order_number) as total_orders\nfrom \"dwh\".\"gold\".\"fact_sales\"; --27659\n\n-- Find the total number of products\nselect\n    count( product_key) as total_products\nfrom \"dwh\".\"gold\".\"dim_products_current\"; -- 295\nselect\n    count( distinct product_skey) as total_products\nfrom \"dwh\".\"gold\".\"fact_sales\"; --130\n\n-- Find the total number of customers\nselect\n    count(customer_skey) as total_customers\nfrom \"dwh\".\"gold\".\"dim_customers_current\"; --18484\n\n-- Find the total number of customers that has placed an order\nselect\n    count( distinct customer_skey) as total_customers\nfrom \"dwh\".\"gold\".\"fact_sales\"; --18484\n\n\n\n-- Generate a comprehensive business metrics \nwith customer_source as (\n    Select * from \"dwh\".\"gold\".\"dim_customers_current\"\n),\nproducts_source as (\n    Select * from \"dwh\".\"gold\".\"dim_products_current\"\n),\nsales_source as (\n    Select * from \"dwh\".\"gold\".\"fact_sales\"\n),\nsales_metrics as (\n    select\n        sum(sales_amount) as total_sales,\n        sum(sales_quantity) as total_items_sold,\n        round(avg(sales_price),2) as avg_sale_price,\n        count(distinct sales_order_number) as total_orders\n    from sales_source\n),\nproduct_metrics as (\n    select \n        count(product_key) as total_products\n    from products_source\n),\ncustomer_metrics as (\n    select \n        count(customer_skey) as total_customers,\n        (select count(distinct customer_skey) from sales_source) as total_ordered_customers\n    from customer_source\n),\nbusiness_metrics as (\n    select 'total_sales' as measure_name, total_sales as measure_value from sales_metrics\n    UNION ALL\n    select 'total_items_sold', total_items_sold from sales_metrics\n    UNION ALL\n    select 'avg_sale_price', avg_sale_price from sales_metrics\n    UNION ALL\n    select 'total_orders', total_orders from sales_metrics\n    UNION ALL\n    select 'total_products', total_products from product_metrics\n    UNION ALL\n    select 'total_customer', total_customers from customer_metrics\n    UNION ALL\n    select 'total_ordered_customer', total_ordered_customers from customer_metrics\n)\nselect * from business_metrics;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transform.dimension_exploration": {"database": "dwh", "schema": "main", "name": "dimension_exploration", "resource_type": "analysis", "package_name": "dbt_transform", "path": "analysis/dimension_exploration.sql", "original_file_path": "analyses/dimension_exploration.sql", "unique_id": "analysis.dbt_transform.dimension_exploration", "fqn": ["dbt_transform", "analysis", "dimension_exploration"], "alias": "dimension_exploration", "checksum": {"name": "sha256", "checksum": "c331b3c4369d6bfe0acea98abb5eeef021cb29691d43cd08e5df6fbe0739f4ab"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.228031, "relation_name": null, "raw_code": "/*\n===============================================================================\nDimensions Exploration\n===============================================================================\nPurpose:\n    - To explore the structure of dimension tables.\n\t\nSQL Functions Used:\n    - DISTINCT\n    - ORDER BY\n===============================================================================\n*/\n\n-- explore all the main categories of the products\nWITH product_source as (\n    SELECT * FROM {{ source('analytics_source', 'dim_products_current') }}\n)\nselect distinct product_category, product_subcategory, product_name\nfrom product_source --gold.dim_products\norder by 1,2,3;", "language": "sql", "refs": [], "sources": [["analytics_source", "dim_products_current"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_transform.analytics_source.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/analyses/dimension_exploration.sql", "compiled": true, "compiled_code": "/*\n===============================================================================\nDimensions Exploration\n===============================================================================\nPurpose:\n    - To explore the structure of dimension tables.\n\t\nSQL Functions Used:\n    - DISTINCT\n    - ORDER BY\n===============================================================================\n*/\n\n-- explore all the main categories of the products\nWITH product_source as (\n    SELECT * FROM \"dwh\".\"gold\".\"dim_products_current\"\n)\nselect distinct product_category, product_subcategory, product_name\nfrom product_source --gold.dim_products\norder by 1,2,3;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.dbt_transform.date_exploration": {"database": "dwh", "schema": "main", "name": "date_exploration", "resource_type": "analysis", "package_name": "dbt_transform", "path": "analysis/date_exploration.sql", "original_file_path": "analyses/date_exploration.sql", "unique_id": "analysis.dbt_transform.date_exploration", "fqn": ["dbt_transform", "analysis", "date_exploration"], "alias": "date_exploration", "checksum": {"name": "sha256", "checksum": "07cc708bf28332221f99a610999634805ae9ca6b38ed8e8120e6e8105b86ed46"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.2310982, "relation_name": null, "raw_code": "ATTACH 'dwh.duckdb' as db1;\n\n-- date exploration\n/*\n===============================================================================\nDate Range Exploration \n===============================================================================\nPurpose:\n    - To determine the temporal boundaries of key data points.\n    - To understand the range of historical data.\n\nSQL Functions Used:\n    - MIN(), MAX(), DATEDIFF()\n===============================================================================\n*/\n\n--find the first and last order date\nselect \n  min(sales_order_date) as first_order_date,\n  max(sales_order_date) as last_order_date\nfrom {{ source('analytics_source', 'fact_sales') }};\n\n-- find the oldest and youngest customers and their age, difference\nselect \n  min(customer_birthdate) as oldest_customer, \n  date_diff('year', min(customer_birthdate), current_date) as oldest_age,\n  max(customer_birthdate) as youngest_customer,\n  date_diff('year', max(customer_birthdate), current_date) as youngest_age,\n  age(min(customer_birthdate)) as oldest_age1_pg,--, max(customer_birthdate))\n  date_part('year', min(customer_birthdate)) as oldest_year_pg,\n  extract(year from age(max(customer_birthdate),min(customer_birthdate))) as diff_age_pg\n  -- date_part('year', max(customer_birthdate) - min(customer_birthdate)) as youngest_age1\nfrom  {{ source('analytics_source', 'dim_customers_current') }};\n\n\n-- how many years of sales are available\nselect \n  min(sales_order_date) as first_ord_date,\n  max(sales_order_date) as last_ord_date,\n  date_diff('year', min(sales_order_date),max(sales_order_date)) as order_range_years,\n  date_diff('month', min(sales_order_date),max(sales_order_date)) as order_range_months,\nfrom {{ source('analytics_source', 'fact_sales') }};", "language": "sql", "refs": [], "sources": [["analytics_source", "fact_sales"], ["analytics_source", "dim_customers_current"], ["analytics_source", "fact_sales"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_transform.analytics_source.fact_sales", "source.dbt_transform.analytics_source.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/analyses/date_exploration.sql", "compiled": true, "compiled_code": "ATTACH 'dwh.duckdb' as db1;\n\n-- date exploration\n/*\n===============================================================================\nDate Range Exploration \n===============================================================================\nPurpose:\n    - To determine the temporal boundaries of key data points.\n    - To understand the range of historical data.\n\nSQL Functions Used:\n    - MIN(), MAX(), DATEDIFF()\n===============================================================================\n*/\n\n--find the first and last order date\nselect \n  min(sales_order_date) as first_order_date,\n  max(sales_order_date) as last_order_date\nfrom \"dwh\".\"gold\".\"fact_sales\";\n\n-- find the oldest and youngest customers and their age, difference\nselect \n  min(customer_birthdate) as oldest_customer, \n  date_diff('year', min(customer_birthdate), current_date) as oldest_age,\n  max(customer_birthdate) as youngest_customer,\n  date_diff('year', max(customer_birthdate), current_date) as youngest_age,\n  age(min(customer_birthdate)) as oldest_age1_pg,--, max(customer_birthdate))\n  date_part('year', min(customer_birthdate)) as oldest_year_pg,\n  extract(year from age(max(customer_birthdate),min(customer_birthdate))) as diff_age_pg\n  -- date_part('year', max(customer_birthdate) - min(customer_birthdate)) as youngest_age1\nfrom  \"dwh\".\"gold\".\"dim_customers_current\";\n\n\n-- how many years of sales are available\nselect \n  min(sales_order_date) as first_ord_date,\n  max(sales_order_date) as last_ord_date,\n  date_diff('year', min(sales_order_date),max(sales_order_date)) as order_range_years,\n  date_diff('month', min(sales_order_date),max(sales_order_date)) as order_range_months,\nfrom \"dwh\".\"gold\".\"fact_sales\";", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_transform.fact_sales_join_check": {"database": "dwh", "schema": "dbt_test__audit", "name": "fact_sales_join_check", "resource_type": "test", "package_name": "dbt_transform", "path": "fact_sales_join_check.sql", "original_file_path": "tests/fact_sales_join_check.sql", "unique_id": "test.dbt_transform.fact_sales_join_check", "fqn": ["dbt_transform", "fact_sales_join_check"], "alias": "fact_sales_join_check", "checksum": {"name": "sha256", "checksum": "97d08089e599ae2ed64ca278c3a55b4b6dc554e60309ff1366067019ec1a65d7"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.2936058, "relation_name": null, "raw_code": "SELECT \n    fs.*\nFROM {{ ref('fact_sales') }} fs\nLEFT JOIN {{ ref('dim_customers_current') }} dc \n    ON dc.customer_key = fs.customer_key\nLEFT JOIN {{ ref('dim_products_current') }} dp \n    ON dp.product_key = fs.product_key\nWHERE \n    dc.customer_key IS NULL \n    OR dp.product_key IS NULL", "language": "sql", "refs": [{"name": "fact_sales", "package": null, "version": null}, {"name": "dim_customers_current", "package": null, "version": null}, {"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_transform.fact_sales", "model.dbt_transform.dim_customers_current", "model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/tests/fact_sales_join_check.sql", "compiled": true, "compiled_code": "SELECT \n    fs.*\nFROM \"dwh\".\"gold\".\"fact_sales\" fs\nLEFT JOIN \"dwh\".\"gold\".\"dim_customers_current\" dc \n    ON dc.customer_key = fs.customer_key\nLEFT JOIN \"dwh\".\"gold\".\"dim_products_current\" dp \n    ON dp.product_key = fs.product_key\nWHERE \n    dc.customer_key IS NULL \n    OR dp.product_key IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.dbt_transform.not_null_bz_crm_cust_info_cst_id.aa1840220b": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_cust_info_cst_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_cust_info_cst_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_cust_info_cst_id.aa1840220b", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_cust_info_cst_id"], "alias": "not_null_bz_crm_cust_info_cst_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.435222, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_cust_info_cst_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cst_id\nfrom \"dwh\".\"bronze\".\"bz_crm_cust_info\"\nwhere cst_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_id", "file_key_name": "models.bz_crm_cust_info", "attached_node": "model.dbt_transform.bz_crm_cust_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cst_id", "model": "{{ get_where_subquery(ref('bz_crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.unique_bz_crm_cust_info_cst_id.a9d22060cc": {"database": "dwh", "schema": "dbt_test__audit", "name": "unique_bz_crm_cust_info_cst_id", "resource_type": "test", "package_name": "dbt_transform", "path": "unique_bz_crm_cust_info_cst_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.unique_bz_crm_cust_info_cst_id.a9d22060cc", "fqn": ["dbt_transform", "bronze", "unique_bz_crm_cust_info_cst_id"], "alias": "unique_bz_crm_cust_info_cst_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.436387, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/unique_bz_crm_cust_info_cst_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    cst_id as unique_field,\n    count(*) as n_records\n\nfrom \"dwh\".\"bronze\".\"bz_crm_cust_info\"\nwhere cst_id is not null\ngroup by cst_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_id", "file_key_name": "models.bz_crm_cust_info", "attached_node": "model.dbt_transform.bz_crm_cust_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cst_id", "model": "{{ get_where_subquery(ref('bz_crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_cust_info_cst_key.6fe1d2bf24": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_cust_info_cst_key", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_cust_info_cst_key.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_cust_info_cst_key.6fe1d2bf24", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_cust_info_cst_key"], "alias": "not_null_bz_crm_cust_info_cst_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.437421, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_cust_info_cst_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cst_key\nfrom \"dwh\".\"bronze\".\"bz_crm_cust_info\"\nwhere cst_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_key", "file_key_name": "models.bz_crm_cust_info", "attached_node": "model.dbt_transform.bz_crm_cust_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cst_key", "model": "{{ get_where_subquery(ref('bz_crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_cust_info_cst_create_date.909692acce": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_cust_info_cst_create_date", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_cust_info_cst_create_date.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_cust_info_cst_create_date.909692acce", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_cust_info_cst_create_date"], "alias": "not_null_bz_crm_cust_info_cst_create_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.438425, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_cust_info_cst_create_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cst_create_date\nfrom \"dwh\".\"bronze\".\"bz_crm_cust_info\"\nwhere cst_create_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_create_date", "file_key_name": "models.bz_crm_cust_info", "attached_node": "model.dbt_transform.bz_crm_cust_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cst_create_date", "model": "{{ get_where_subquery(ref('bz_crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.unique_bz_crm_cust_info_cst_email.28870d8715": {"database": "dwh", "schema": "dbt_test__audit", "name": "unique_bz_crm_cust_info_cst_email", "resource_type": "test", "package_name": "dbt_transform", "path": "unique_bz_crm_cust_info_cst_email.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.unique_bz_crm_cust_info_cst_email.28870d8715", "fqn": ["dbt_transform", "bronze", "unique_bz_crm_cust_info_cst_email"], "alias": "unique_bz_crm_cust_info_cst_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "WARN"}, "created_at": 1743885923.439747, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "bz_crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/unique_bz_crm_cust_info_cst_email.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    cst_email as unique_field,\n    count(*) as n_records\n\nfrom \"dwh\".\"bronze\".\"bz_crm_cust_info\"\nwhere cst_email is not null\ngroup by cst_email\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_email", "file_key_name": "models.bz_crm_cust_info", "attached_node": "model.dbt_transform.bz_crm_cust_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cst_email", "model": "{{ get_where_subquery(ref('bz_crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.email_check_bz_crm_cust_info_cst_email.7f2c4cbb21": {"database": "dwh", "schema": "dbt_test__audit", "name": "email_check_bz_crm_cust_info_cst_email", "resource_type": "test", "package_name": "dbt_transform", "path": "email_check_bz_crm_cust_info_cst_email.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.email_check_bz_crm_cust_info_cst_email.7f2c4cbb21", "fqn": ["dbt_transform", "bronze", "email_check_bz_crm_cust_info_cst_email"], "alias": "email_check_bz_crm_cust_info_cst_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.4407492, "relation_name": null, "raw_code": "{{ test_email_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_email_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/email_check_bz_crm_cust_info_cst_email.sql", "compiled": true, "compiled_code": "\nSELECT \n    *\nFROM \"dwh\".\"bronze\".\"bz_crm_cust_info\"\nWHERE \n    cst_email IS NOT NULL\n    AND cst_email != 'unknown'\n    AND cst_email !~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_email", "file_key_name": "models.bz_crm_cust_info", "attached_node": "model.dbt_transform.bz_crm_cust_info", "test_metadata": {"name": "email_check", "kwargs": {"column_name": "cst_email", "model": "{{ get_where_subquery(ref('bz_crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_cust_info_ingested_at.4d159ceaac": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_cust_info_ingested_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_cust_info_ingested_at.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_cust_info_ingested_at.4d159ceaac", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_cust_info_ingested_at"], "alias": "not_null_bz_crm_cust_info_ingested_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.452618, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_cust_info_ingested_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingested_at\nfrom \"dwh\".\"bronze\".\"bz_crm_cust_info\"\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ingested_at", "file_key_name": "models.bz_crm_cust_info", "attached_node": "model.dbt_transform.bz_crm_cust_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('bz_crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_cust_info_updated_at.f4d174cd12": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_cust_info_updated_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_cust_info_updated_at.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_cust_info_updated_at.f4d174cd12", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_cust_info_updated_at"], "alias": "not_null_bz_crm_cust_info_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.4536262, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_cust_info_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"dwh\".\"bronze\".\"bz_crm_cust_info\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.bz_crm_cust_info", "attached_node": "model.dbt_transform.bz_crm_cust_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('bz_crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_prd_info_prd_id.de20ac871d": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_prd_info_prd_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_prd_info_prd_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_prd_info_prd_id.de20ac871d", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_prd_info_prd_id"], "alias": "not_null_bz_crm_prd_info_prd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.454741, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_prd_info_prd_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect prd_id\nfrom \"dwh\".\"bronze\".\"bz_crm_prd_info\"\nwhere prd_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_id", "file_key_name": "models.bz_crm_prd_info", "attached_node": "model.dbt_transform.bz_crm_prd_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "prd_id", "model": "{{ get_where_subquery(ref('bz_crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.unique_bz_crm_prd_info_prd_id.12fd88857e": {"database": "dwh", "schema": "dbt_test__audit", "name": "unique_bz_crm_prd_info_prd_id", "resource_type": "test", "package_name": "dbt_transform", "path": "unique_bz_crm_prd_info_prd_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.unique_bz_crm_prd_info_prd_id.12fd88857e", "fqn": ["dbt_transform", "bronze", "unique_bz_crm_prd_info_prd_id"], "alias": "unique_bz_crm_prd_info_prd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.4557261, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/unique_bz_crm_prd_info_prd_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    prd_id as unique_field,\n    count(*) as n_records\n\nfrom \"dwh\".\"bronze\".\"bz_crm_prd_info\"\nwhere prd_id is not null\ngroup by prd_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_id", "file_key_name": "models.bz_crm_prd_info", "attached_node": "model.dbt_transform.bz_crm_prd_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "prd_id", "model": "{{ get_where_subquery(ref('bz_crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_prd_info_prd_key.18db73cec9": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_prd_info_prd_key", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_prd_info_prd_key.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_prd_info_prd_key.18db73cec9", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_prd_info_prd_key"], "alias": "not_null_bz_crm_prd_info_prd_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.456662, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_prd_info_prd_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect prd_key\nfrom \"dwh\".\"bronze\".\"bz_crm_prd_info\"\nwhere prd_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_key", "file_key_name": "models.bz_crm_prd_info", "attached_node": "model.dbt_transform.bz_crm_prd_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "prd_key", "model": "{{ get_where_subquery(ref('bz_crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_prd_info_prd_start_dt.620afd0a00": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_prd_info_prd_start_dt", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_prd_info_prd_start_dt.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_prd_info_prd_start_dt.620afd0a00", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_prd_info_prd_start_dt"], "alias": "not_null_bz_crm_prd_info_prd_start_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.45759, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_prd_info_prd_start_dt.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect prd_start_dt\nfrom \"dwh\".\"bronze\".\"bz_crm_prd_info\"\nwhere prd_start_dt is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_start_dt", "file_key_name": "models.bz_crm_prd_info", "attached_node": "model.dbt_transform.bz_crm_prd_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "prd_start_dt", "model": "{{ get_where_subquery(ref('bz_crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_prd_info_ingested_at.2893c430a5": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_prd_info_ingested_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_prd_info_ingested_at.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_prd_info_ingested_at.2893c430a5", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_prd_info_ingested_at"], "alias": "not_null_bz_crm_prd_info_ingested_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.458515, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_prd_info_ingested_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingested_at\nfrom \"dwh\".\"bronze\".\"bz_crm_prd_info\"\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ingested_at", "file_key_name": "models.bz_crm_prd_info", "attached_node": "model.dbt_transform.bz_crm_prd_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('bz_crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_prd_info_updated_at.8742d3673b": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_prd_info_updated_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_prd_info_updated_at.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_prd_info_updated_at.8742d3673b", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_prd_info_updated_at"], "alias": "not_null_bz_crm_prd_info_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.459433, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_prd_info_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"dwh\".\"bronze\".\"bz_crm_prd_info\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.bz_crm_prd_info", "attached_node": "model.dbt_transform.bz_crm_prd_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('bz_crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_sales_details_sls_ord_num.56c7374457": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_sales_details_sls_ord_num", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_sales_details_sls_ord_num.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_sales_details_sls_ord_num.56c7374457", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_sales_details_sls_ord_num"], "alias": "not_null_bz_crm_sales_details_sls_ord_num", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.46046, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_sales_details_sls_ord_num.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sls_ord_num\nfrom \"dwh\".\"bronze\".\"bz_crm_sales_details\"\nwhere sls_ord_num is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_ord_num", "file_key_name": "models.bz_crm_sales_details", "attached_node": "model.dbt_transform.bz_crm_sales_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sls_ord_num", "model": "{{ get_where_subquery(ref('bz_crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_sales_details_sls_prd_key.8a92f0a74f": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_sales_details_sls_prd_key", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_sales_details_sls_prd_key.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_sales_details_sls_prd_key.8a92f0a74f", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_sales_details_sls_prd_key"], "alias": "not_null_bz_crm_sales_details_sls_prd_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.461405, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_sales_details_sls_prd_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sls_prd_key\nfrom \"dwh\".\"bronze\".\"bz_crm_sales_details\"\nwhere sls_prd_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_prd_key", "file_key_name": "models.bz_crm_sales_details", "attached_node": "model.dbt_transform.bz_crm_sales_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sls_prd_key", "model": "{{ get_where_subquery(ref('bz_crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_sales_details_sls_cust_id.01831db7c4": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_sales_details_sls_cust_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_sales_details_sls_cust_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_sales_details_sls_cust_id.01831db7c4", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_sales_details_sls_cust_id"], "alias": "not_null_bz_crm_sales_details_sls_cust_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.462328, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_sales_details_sls_cust_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sls_cust_id\nfrom \"dwh\".\"bronze\".\"bz_crm_sales_details\"\nwhere sls_cust_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_cust_id", "file_key_name": "models.bz_crm_sales_details", "attached_node": "model.dbt_transform.bz_crm_sales_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sls_cust_id", "model": "{{ get_where_subquery(ref('bz_crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_order_dt.7f1b4100eb": {"database": "dwh", "schema": "dbt_test__audit", "name": "valid_date_format_bz_crm_sales_details_sls_order_dt", "resource_type": "test", "package_name": "dbt_transform", "path": "valid_date_format_bz_crm_sales_details_sls_order_dt.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_order_dt.7f1b4100eb", "fqn": ["dbt_transform", "bronze", "valid_date_format_bz_crm_sales_details_sls_order_dt"], "alias": "valid_date_format_bz_crm_sales_details_sls_order_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures raw sales order date is an 8-digit numeric string.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1743885923.4632761, "relation_name": null, "raw_code": "{{ test_valid_date_format(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "bz_crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_valid_date_format", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/valid_date_format_bz_crm_sales_details_sls_order_dt.sql", "compiled": true, "compiled_code": "\nSELECT \n    *\nFROM \"dwh\".\"bronze\".\"bz_crm_sales_details\"\nWHERE \n    sls_order_dt IS NOT NULL\n    AND sls_order_dt::TEXT !~ '^[0-9]{8}$'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_order_dt", "file_key_name": "models.bz_crm_sales_details", "attached_node": "model.dbt_transform.bz_crm_sales_details", "test_metadata": {"name": "valid_date_format", "kwargs": {"column_name": "sls_order_dt", "model": "{{ get_where_subquery(ref('bz_crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_ship_dt.7335e91999": {"database": "dwh", "schema": "dbt_test__audit", "name": "valid_date_format_bz_crm_sales_details_sls_ship_dt", "resource_type": "test", "package_name": "dbt_transform", "path": "valid_date_format_bz_crm_sales_details_sls_ship_dt.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_ship_dt.7335e91999", "fqn": ["dbt_transform", "bronze", "valid_date_format_bz_crm_sales_details_sls_ship_dt"], "alias": "valid_date_format_bz_crm_sales_details_sls_ship_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures raw shipping date is an 8-digit numeric string.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1743885923.466738, "relation_name": null, "raw_code": "{{ test_valid_date_format(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "bz_crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_valid_date_format", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/valid_date_format_bz_crm_sales_details_sls_ship_dt.sql", "compiled": true, "compiled_code": "\nSELECT \n    *\nFROM \"dwh\".\"bronze\".\"bz_crm_sales_details\"\nWHERE \n    sls_ship_dt IS NOT NULL\n    AND sls_ship_dt::TEXT !~ '^[0-9]{8}$'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_ship_dt", "file_key_name": "models.bz_crm_sales_details", "attached_node": "model.dbt_transform.bz_crm_sales_details", "test_metadata": {"name": "valid_date_format", "kwargs": {"column_name": "sls_ship_dt", "model": "{{ get_where_subquery(ref('bz_crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_due_dt.53fba7324b": {"database": "dwh", "schema": "dbt_test__audit", "name": "valid_date_format_bz_crm_sales_details_sls_due_dt", "resource_type": "test", "package_name": "dbt_transform", "path": "valid_date_format_bz_crm_sales_details_sls_due_dt.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_due_dt.53fba7324b", "fqn": ["dbt_transform", "bronze", "valid_date_format_bz_crm_sales_details_sls_due_dt"], "alias": "valid_date_format_bz_crm_sales_details_sls_due_dt", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures raw due date is an 8-digit numeric string.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1743885923.4692962, "relation_name": null, "raw_code": "{{ test_valid_date_format(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "bz_crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_valid_date_format", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/valid_date_format_bz_crm_sales_details_sls_due_dt.sql", "compiled": true, "compiled_code": "\nSELECT \n    *\nFROM \"dwh\".\"bronze\".\"bz_crm_sales_details\"\nWHERE \n    sls_due_dt IS NOT NULL\n    AND sls_due_dt::TEXT !~ '^[0-9]{8}$'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_due_dt", "file_key_name": "models.bz_crm_sales_details", "attached_node": "model.dbt_transform.bz_crm_sales_details", "test_metadata": {"name": "valid_date_format", "kwargs": {"column_name": "sls_due_dt", "model": "{{ get_where_subquery(ref('bz_crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_sales_details_sls_quantity.d87cd738e5": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_sales_details_sls_quantity", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_sales_details_sls_quantity.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_sales_details_sls_quantity.d87cd738e5", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_sales_details_sls_quantity"], "alias": "not_null_bz_crm_sales_details_sls_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.471979, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_sales_details_sls_quantity.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sls_quantity\nfrom \"dwh\".\"bronze\".\"bz_crm_sales_details\"\nwhere sls_quantity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_quantity", "file_key_name": "models.bz_crm_sales_details", "attached_node": "model.dbt_transform.bz_crm_sales_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sls_quantity", "model": "{{ get_where_subquery(ref('bz_crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_sales_details_ingested_at.23dcba1d80": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_sales_details_ingested_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_sales_details_ingested_at.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_sales_details_ingested_at.23dcba1d80", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_sales_details_ingested_at"], "alias": "not_null_bz_crm_sales_details_ingested_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.472936, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_sales_details_ingested_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingested_at\nfrom \"dwh\".\"bronze\".\"bz_crm_sales_details\"\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ingested_at", "file_key_name": "models.bz_crm_sales_details", "attached_node": "model.dbt_transform.bz_crm_sales_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('bz_crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_crm_sales_details_updated_at.d78d14353f": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_crm_sales_details_updated_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_crm_sales_details_updated_at.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_crm_sales_details_updated_at.d78d14353f", "fqn": ["dbt_transform", "bronze", "not_null_bz_crm_sales_details_updated_at"], "alias": "not_null_bz_crm_sales_details_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.473875, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_crm_sales_details_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"dwh\".\"bronze\".\"bz_crm_sales_details\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.bz_crm_sales_details", "attached_node": "model.dbt_transform.bz_crm_sales_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('bz_crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_erp_cust_az12_cid.774c60760d": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_erp_cust_az12_cid", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_erp_cust_az12_cid.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_erp_cust_az12_cid.774c60760d", "fqn": ["dbt_transform", "bronze", "not_null_bz_erp_cust_az12_cid"], "alias": "not_null_bz_erp_cust_az12_cid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.474813, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_erp_cust_az12", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_erp_cust_az12"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_erp_cust_az12_cid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cid\nfrom \"dwh\".\"bronze\".\"bz_erp_cust_az12\"\nwhere cid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cid", "file_key_name": "models.bz_erp_cust_az12", "attached_node": "model.dbt_transform.bz_erp_cust_az12", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cid", "model": "{{ get_where_subquery(ref('bz_erp_cust_az12')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_erp_cust_az12_ingested_at.c3826ee9f9": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_erp_cust_az12_ingested_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_erp_cust_az12_ingested_at.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_erp_cust_az12_ingested_at.c3826ee9f9", "fqn": ["dbt_transform", "bronze", "not_null_bz_erp_cust_az12_ingested_at"], "alias": "not_null_bz_erp_cust_az12_ingested_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.4758248, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_erp_cust_az12", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_erp_cust_az12"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_erp_cust_az12_ingested_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingested_at\nfrom \"dwh\".\"bronze\".\"bz_erp_cust_az12\"\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ingested_at", "file_key_name": "models.bz_erp_cust_az12", "attached_node": "model.dbt_transform.bz_erp_cust_az12", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('bz_erp_cust_az12')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_erp_cust_az12_updated_at.aed585f42f": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_erp_cust_az12_updated_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_erp_cust_az12_updated_at.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_erp_cust_az12_updated_at.aed585f42f", "fqn": ["dbt_transform", "bronze", "not_null_bz_erp_cust_az12_updated_at"], "alias": "not_null_bz_erp_cust_az12_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.4768682, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_erp_cust_az12", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_erp_cust_az12"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_erp_cust_az12_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"dwh\".\"bronze\".\"bz_erp_cust_az12\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.bz_erp_cust_az12", "attached_node": "model.dbt_transform.bz_erp_cust_az12", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('bz_erp_cust_az12')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_erp_loc_a101_cid.91e1f30b67": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_erp_loc_a101_cid", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_erp_loc_a101_cid.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_erp_loc_a101_cid.91e1f30b67", "fqn": ["dbt_transform", "bronze", "not_null_bz_erp_loc_a101_cid"], "alias": "not_null_bz_erp_loc_a101_cid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.477804, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_erp_loc_a101", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_erp_loc_a101"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_erp_loc_a101_cid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cid\nfrom \"dwh\".\"bronze\".\"bz_erp_loc_a101\"\nwhere cid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cid", "file_key_name": "models.bz_erp_loc_a101", "attached_node": "model.dbt_transform.bz_erp_loc_a101", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cid", "model": "{{ get_where_subquery(ref('bz_erp_loc_a101')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_erp_loc_a101_ingested_at.749d640110": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_erp_loc_a101_ingested_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_erp_loc_a101_ingested_at.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_erp_loc_a101_ingested_at.749d640110", "fqn": ["dbt_transform", "bronze", "not_null_bz_erp_loc_a101_ingested_at"], "alias": "not_null_bz_erp_loc_a101_ingested_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.47874, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_erp_loc_a101", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_erp_loc_a101"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_erp_loc_a101_ingested_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingested_at\nfrom \"dwh\".\"bronze\".\"bz_erp_loc_a101\"\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ingested_at", "file_key_name": "models.bz_erp_loc_a101", "attached_node": "model.dbt_transform.bz_erp_loc_a101", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('bz_erp_loc_a101')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_erp_loc_a101_updated_at.674384578b": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_erp_loc_a101_updated_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_erp_loc_a101_updated_at.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_erp_loc_a101_updated_at.674384578b", "fqn": ["dbt_transform", "bronze", "not_null_bz_erp_loc_a101_updated_at"], "alias": "not_null_bz_erp_loc_a101_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.47966, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_erp_loc_a101", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_erp_loc_a101"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_erp_loc_a101_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"dwh\".\"bronze\".\"bz_erp_loc_a101\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.bz_erp_loc_a101", "attached_node": "model.dbt_transform.bz_erp_loc_a101", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('bz_erp_loc_a101')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_id.965f4cf4ac": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_erp_px_cat_g1v2_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_erp_px_cat_g1v2_id.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_id.965f4cf4ac", "fqn": ["dbt_transform", "bronze", "not_null_bz_erp_px_cat_g1v2_id"], "alias": "not_null_bz_erp_px_cat_g1v2_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.480614, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_erp_px_cat_g1v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_erp_px_cat_g1v2"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_erp_px_cat_g1v2_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dwh\".\"bronze\".\"bz_erp_px_cat_g1v2\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.bz_erp_px_cat_g1v2", "attached_node": "model.dbt_transform.bz_erp_px_cat_g1v2", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('bz_erp_px_cat_g1v2')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_ingested_at.b4f577cb11": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_erp_px_cat_g1v2_ingested_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_erp_px_cat_g1v2_ingested_at.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_ingested_at.b4f577cb11", "fqn": ["dbt_transform", "bronze", "not_null_bz_erp_px_cat_g1v2_ingested_at"], "alias": "not_null_bz_erp_px_cat_g1v2_ingested_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.481537, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_erp_px_cat_g1v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_erp_px_cat_g1v2"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_erp_px_cat_g1v2_ingested_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingested_at\nfrom \"dwh\".\"bronze\".\"bz_erp_px_cat_g1v2\"\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ingested_at", "file_key_name": "models.bz_erp_px_cat_g1v2", "attached_node": "model.dbt_transform.bz_erp_px_cat_g1v2", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('bz_erp_px_cat_g1v2')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_updated_at.210fe71e5d": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_bz_erp_px_cat_g1v2_updated_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_bz_erp_px_cat_g1v2_updated_at.sql", "original_file_path": "models/bronze/schema.yml", "unique_id": "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_updated_at.210fe71e5d", "fqn": ["dbt_transform", "bronze", "not_null_bz_erp_px_cat_g1v2_updated_at"], "alias": "not_null_bz_erp_px_cat_g1v2_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.4825442, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bz_erp_px_cat_g1v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.bz_erp_px_cat_g1v2"]}, "compiled_path": "target/compiled/dbt_transform/models/bronze/schema.yml/not_null_bz_erp_px_cat_g1v2_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"dwh\".\"bronze\".\"bz_erp_px_cat_g1v2\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.bz_erp_px_cat_g1v2", "attached_node": "model.dbt_transform.bz_erp_px_cat_g1v2", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('bz_erp_px_cat_g1v2')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_cust_info_cst_id.91241b201c": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_cust_info_cst_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_cust_info_cst_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_cust_info_cst_id.91241b201c", "fqn": ["dbt_transform", "silver", "not_null_crm_cust_info_cst_id"], "alias": "not_null_crm_cust_info_cst_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.588536, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_cust_info_cst_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cst_id\nfrom \"dwh\".\"silver\".\"crm_cust_info\"\nwhere cst_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_id", "file_key_name": "models.crm_cust_info", "attached_node": "model.dbt_transform.crm_cust_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cst_id", "model": "{{ get_where_subquery(ref('crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.unique_crm_cust_info_cst_id.7c73f5004c": {"database": "dwh", "schema": "dbt_test__audit", "name": "unique_crm_cust_info_cst_id", "resource_type": "test", "package_name": "dbt_transform", "path": "unique_crm_cust_info_cst_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.unique_crm_cust_info_cst_id.7c73f5004c", "fqn": ["dbt_transform", "silver", "unique_crm_cust_info_cst_id"], "alias": "unique_crm_cust_info_cst_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.589602, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/unique_crm_cust_info_cst_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    cst_id as unique_field,\n    count(*) as n_records\n\nfrom \"dwh\".\"silver\".\"crm_cust_info\"\nwhere cst_id is not null\ngroup by cst_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_id", "file_key_name": "models.crm_cust_info", "attached_node": "model.dbt_transform.crm_cust_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cst_id", "model": "{{ get_where_subquery(ref('crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_cust_info_cst_code.58506a711c": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_cust_info_cst_code", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_cust_info_cst_code.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_cust_info_cst_code.58506a711c", "fqn": ["dbt_transform", "silver", "not_null_crm_cust_info_cst_code"], "alias": "not_null_crm_cust_info_cst_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.590562, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_cust_info_cst_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cst_code\nfrom \"dwh\".\"silver\".\"crm_cust_info\"\nwhere cst_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_code", "file_key_name": "models.crm_cust_info", "attached_node": "model.dbt_transform.crm_cust_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cst_code", "model": "{{ get_where_subquery(ref('crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_code.ab58decf40": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_crm_cust_info_cst_code", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_crm_cust_info_cst_code.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_code.ab58decf40", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_crm_cust_info_cst_code"], "alias": "custom_trimmed_check_crm_cust_info_cst_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in customer code.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.5915048, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_crm_cust_info_cst_code.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"crm_cust_info\"\nwhere cst_code != trim(cst_code)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_code", "file_key_name": "models.crm_cust_info", "attached_node": "model.dbt_transform.crm_cust_info", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "cst_code", "model": "{{ get_where_subquery(ref('crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_firstname.96efd6996d": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_crm_cust_info_cst_firstname", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_crm_cust_info_cst_firstname.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_firstname.96efd6996d", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_crm_cust_info_cst_firstname"], "alias": "custom_trimmed_check_crm_cust_info_cst_firstname", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in customer's first name.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.594856, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_crm_cust_info_cst_firstname.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"crm_cust_info\"\nwhere cst_firstname != trim(cst_firstname)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_firstname", "file_key_name": "models.crm_cust_info", "attached_node": "model.dbt_transform.crm_cust_info", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "cst_firstname", "model": "{{ get_where_subquery(ref('crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_lastname.2a16cae8de": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_crm_cust_info_cst_lastname", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_crm_cust_info_cst_lastname.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_lastname.2a16cae8de", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_crm_cust_info_cst_lastname"], "alias": "custom_trimmed_check_crm_cust_info_cst_lastname", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in customer's last name.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.597404, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_crm_cust_info_cst_lastname.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"crm_cust_info\"\nwhere cst_lastname != trim(cst_lastname)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_lastname", "file_key_name": "models.crm_cust_info", "attached_node": "model.dbt_transform.crm_cust_info", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "cst_lastname", "model": "{{ get_where_subquery(ref('crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.accepted_values_crm_cust_info_cst_marital_status__Married__Single__n_a.d012437934": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_crm_cust_info_cst_marital_status__Married__Single__n_a", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_crm_cust_info_ae19c8490db2635af482276362047666.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.accepted_values_crm_cust_info_cst_marital_status__Married__Single__n_a.d012437934", "fqn": ["dbt_transform", "silver", "accepted_values_crm_cust_info_cst_marital_status__Married__Single__n_a"], "alias": "accepted_values_crm_cust_info_ae19c8490db2635af482276362047666", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_crm_cust_info_ae19c8490db2635af482276362047666", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures marital status is valid.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_crm_cust_info_ae19c8490db2635af482276362047666"}, "created_at": 1743885923.599827, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_crm_cust_info_ae19c8490db2635af482276362047666\") }}", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/accepted_values_crm_cust_info_ae19c8490db2635af482276362047666.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        cst_marital_status as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"silver\".\"crm_cust_info\"\n    group by cst_marital_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Married','Single','n/a'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_marital_status", "file_key_name": "models.crm_cust_info", "attached_node": "model.dbt_transform.crm_cust_info", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Married", "Single", "n/a"], "column_name": "cst_marital_status", "model": "{{ get_where_subquery(ref('crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.accepted_values_crm_cust_info_cst_gndr__Male__Female__n_a.ddceddf11e": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_crm_cust_info_cst_gndr__Male__Female__n_a", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_crm_cust_info_cst_gndr__Male__Female__n_a.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.accepted_values_crm_cust_info_cst_gndr__Male__Female__n_a.ddceddf11e", "fqn": ["dbt_transform", "silver", "accepted_values_crm_cust_info_cst_gndr__Male__Female__n_a"], "alias": "accepted_values_crm_cust_info_cst_gndr__Male__Female__n_a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures gender is within allowed values.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.606196, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/accepted_values_crm_cust_info_cst_gndr__Male__Female__n_a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        cst_gndr as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"silver\".\"crm_cust_info\"\n    group by cst_gndr\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Male','Female','n/a'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_gndr", "file_key_name": "models.crm_cust_info", "attached_node": "model.dbt_transform.crm_cust_info", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Male", "Female", "n/a"], "column_name": "cst_gndr", "model": "{{ get_where_subquery(ref('crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.unique_crm_cust_info_cst_email.139300d73f": {"database": "dwh", "schema": "dbt_test__audit", "name": "unique_crm_cust_info_cst_email", "resource_type": "test", "package_name": "dbt_transform", "path": "unique_crm_cust_info_cst_email.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.unique_crm_cust_info_cst_email.139300d73f", "fqn": ["dbt_transform", "silver", "unique_crm_cust_info_cst_email"], "alias": "unique_crm_cust_info_cst_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "WARN", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": " >11", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "WARN", "warn_if": " >11"}, "created_at": 1743885923.609578, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",warn_if=\" >11\") }}", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/unique_crm_cust_info_cst_email.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    cst_email as unique_field,\n    count(*) as n_records\n\nfrom \"dwh\".\"silver\".\"crm_cust_info\"\nwhere cst_email is not null\ngroup by cst_email\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_email", "file_key_name": "models.crm_cust_info", "attached_node": "model.dbt_transform.crm_cust_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "cst_email", "model": "{{ get_where_subquery(ref('crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.email_check_crm_cust_info_cst_email.e0248dc48c": {"database": "dwh", "schema": "dbt_test__audit", "name": "email_check_crm_cust_info_cst_email", "resource_type": "test", "package_name": "dbt_transform", "path": "email_check_crm_cust_info_cst_email.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.email_check_crm_cust_info_cst_email.e0248dc48c", "fqn": ["dbt_transform", "silver", "email_check_crm_cust_info_cst_email"], "alias": "email_check_crm_cust_info_cst_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures email follows a standard pattern (e.g., user@domain.com).", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.61058, "relation_name": null, "raw_code": "{{ test_email_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_email_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/email_check_crm_cust_info_cst_email.sql", "compiled": true, "compiled_code": "\nSELECT \n    *\nFROM \"dwh\".\"silver\".\"crm_cust_info\"\nWHERE \n    cst_email IS NOT NULL\n    AND cst_email != 'unknown'\n    AND cst_email !~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_email", "file_key_name": "models.crm_cust_info", "attached_node": "model.dbt_transform.crm_cust_info", "test_metadata": {"name": "email_check", "kwargs": {"column_name": "cst_email", "model": "{{ get_where_subquery(ref('crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_place.2e379fe18c": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_crm_cust_info_cst_place", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_crm_cust_info_cst_place.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_place.2e379fe18c", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_crm_cust_info_cst_place"], "alias": "custom_trimmed_check_crm_cust_info_cst_place", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in place of residence.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.6129951, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_crm_cust_info_cst_place.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"crm_cust_info\"\nwhere cst_place != trim(cst_place)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_place", "file_key_name": "models.crm_cust_info", "attached_node": "model.dbt_transform.crm_cust_info", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "cst_place", "model": "{{ get_where_subquery(ref('crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_cust_info_cst_create_date.9a462c5eb4": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_cust_info_cst_create_date", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_cust_info_cst_create_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_cust_info_cst_create_date.9a462c5eb4", "fqn": ["dbt_transform", "silver", "not_null_crm_cust_info_cst_create_date"], "alias": "not_null_crm_cust_info_cst_create_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.615515, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_cust_info_cst_create_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cst_create_date\nfrom \"dwh\".\"silver\".\"crm_cust_info\"\nwhere cst_create_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_create_date", "file_key_name": "models.crm_cust_info", "attached_node": "model.dbt_transform.crm_cust_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cst_create_date", "model": "{{ get_where_subquery(ref('crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_cust_info_ingested_at.4df149d26c": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_cust_info_ingested_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_cust_info_ingested_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_cust_info_ingested_at.4df149d26c", "fqn": ["dbt_transform", "silver", "not_null_crm_cust_info_ingested_at"], "alias": "not_null_crm_cust_info_ingested_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.61648, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_cust_info_ingested_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingested_at\nfrom \"dwh\".\"silver\".\"crm_cust_info\"\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ingested_at", "file_key_name": "models.crm_cust_info", "attached_node": "model.dbt_transform.crm_cust_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_cust_info_updated_at.3308fe3c4e": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_cust_info_updated_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_cust_info_updated_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_cust_info_updated_at.3308fe3c4e", "fqn": ["dbt_transform", "silver", "not_null_crm_cust_info_updated_at"], "alias": "not_null_crm_cust_info_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.6174212, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_cust_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_cust_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_cust_info_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"dwh\".\"silver\".\"crm_cust_info\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.crm_cust_info", "attached_node": "model.dbt_transform.crm_cust_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('crm_cust_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_prd_info_prd_id.2f30e67051": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_prd_info_prd_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_prd_info_prd_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_prd_info_prd_id.2f30e67051", "fqn": ["dbt_transform", "silver", "not_null_crm_prd_info_prd_id"], "alias": "not_null_crm_prd_info_prd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.6183958, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_prd_info_prd_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect prd_id\nfrom \"dwh\".\"silver\".\"crm_prd_info\"\nwhere prd_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_id", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "prd_id", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.unique_crm_prd_info_prd_id.f3cfe19adf": {"database": "dwh", "schema": "dbt_test__audit", "name": "unique_crm_prd_info_prd_id", "resource_type": "test", "package_name": "dbt_transform", "path": "unique_crm_prd_info_prd_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.unique_crm_prd_info_prd_id.f3cfe19adf", "fqn": ["dbt_transform", "silver", "unique_crm_prd_info_prd_id"], "alias": "unique_crm_prd_info_prd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.6193469, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/unique_crm_prd_info_prd_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    prd_id as unique_field,\n    count(*) as n_records\n\nfrom \"dwh\".\"silver\".\"crm_prd_info\"\nwhere prd_id is not null\ngroup by prd_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_id", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "prd_id", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_prd_info_cat_id.5024f04cdb": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_prd_info_cat_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_prd_info_cat_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_prd_info_cat_id.5024f04cdb", "fqn": ["dbt_transform", "silver", "not_null_crm_prd_info_cat_id"], "alias": "not_null_crm_prd_info_cat_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.620393, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_prd_info_cat_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cat_id\nfrom \"dwh\".\"silver\".\"crm_prd_info\"\nwhere cat_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cat_id", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cat_id", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_prd_info_prd_code.a15839d0cd": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_prd_info_prd_code", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_prd_info_prd_code.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_prd_info_prd_code.a15839d0cd", "fqn": ["dbt_transform", "silver", "not_null_crm_prd_info_prd_code"], "alias": "not_null_crm_prd_info_prd_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.621323, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_prd_info_prd_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect prd_code\nfrom \"dwh\".\"silver\".\"crm_prd_info\"\nwhere prd_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_code", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "prd_code", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_crm_prd_info_prd_code.05162b5d85": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_crm_prd_info_prd_code", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_crm_prd_info_prd_code.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_crm_prd_info_prd_code.05162b5d85", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_crm_prd_info_prd_code"], "alias": "custom_trimmed_check_crm_prd_info_prd_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in product key.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.6222541, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_crm_prd_info_prd_code.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"crm_prd_info\"\nwhere prd_code != trim(prd_code)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_code", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "prd_code", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_prd_info_prd_nm.119673e4d4": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_prd_info_prd_nm", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_prd_info_prd_nm.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_prd_info_prd_nm.119673e4d4", "fqn": ["dbt_transform", "silver", "not_null_crm_prd_info_prd_nm"], "alias": "not_null_crm_prd_info_prd_nm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.624672, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_prd_info_prd_nm.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect prd_nm\nfrom \"dwh\".\"silver\".\"crm_prd_info\"\nwhere prd_nm is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_nm", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "prd_nm", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_crm_prd_info_prd_nm.d1865c7e7d": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_crm_prd_info_prd_nm", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_crm_prd_info_prd_nm.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_crm_prd_info_prd_nm.d1865c7e7d", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_crm_prd_info_prd_nm"], "alias": "custom_trimmed_check_crm_prd_info_prd_nm", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in product name.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.626453, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_crm_prd_info_prd_nm.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"crm_prd_info\"\nwhere prd_nm != trim(prd_nm)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_nm", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "prd_nm", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_prd_info_prd_cost.279fd05d93": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_prd_info_prd_cost", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_prd_info_prd_cost.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_prd_info_prd_cost.279fd05d93", "fqn": ["dbt_transform", "silver", "not_null_crm_prd_info_prd_cost"], "alias": "not_null_crm_prd_info_prd_cost", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.628799, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_prd_info_prd_cost.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect prd_cost\nfrom \"dwh\".\"silver\".\"crm_prd_info\"\nwhere prd_cost is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_cost", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "prd_cost", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_crm_prd_info_prd_cost___0.605c9255ee": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_crm_prd_info_prd_cost___0", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_crm_prd_info_prd_cost___0.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_crm_prd_info_prd_cost___0.605c9255ee", "fqn": ["dbt_transform", "silver", "dbt_utils_expression_is_true_crm_prd_info_prd_cost___0"], "alias": "dbt_utils_expression_is_true_crm_prd_info_prd_cost___0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures product cost is non-negative.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.6297789, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/dbt_utils_expression_is_true_crm_prd_info_prd_cost___0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"silver\".\"crm_prd_info\"\n\nwhere not(prd_cost >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_cost", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "prd_cost", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.accepted_values_crm_prd_info_prd_line__Mountains__Road__Sales__Touring__n_a.2e1af5bd62": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_crm_prd_info_prd_line__Mountains__Road__Sales__Touring__n_a", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_crm_prd_info_ea8764fe9614319f2b29e5d2e92b5962.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.accepted_values_crm_prd_info_prd_line__Mountains__Road__Sales__Touring__n_a.2e1af5bd62", "fqn": ["dbt_transform", "silver", "accepted_values_crm_prd_info_prd_line__Mountains__Road__Sales__Touring__n_a"], "alias": "accepted_values_crm_prd_info_ea8764fe9614319f2b29e5d2e92b5962", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_crm_prd_info_ea8764fe9614319f2b29e5d2e92b5962", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures product line matches defined categories.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_crm_prd_info_ea8764fe9614319f2b29e5d2e92b5962"}, "created_at": 1743885923.636662, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_crm_prd_info_ea8764fe9614319f2b29e5d2e92b5962\") }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/accepted_values_crm_prd_info_ea8764fe9614319f2b29e5d2e92b5962.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        prd_line as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"silver\".\"crm_prd_info\"\n    group by prd_line\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Mountains','Road','Sales','Touring','n/a'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_line", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Mountains", "Road", "Sales", "Touring", "n/a"], "column_name": "prd_line", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_prd_info_prd_start_date.83b2f0095a": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_prd_info_prd_start_date", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_prd_info_prd_start_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_prd_info_prd_start_date.83b2f0095a", "fqn": ["dbt_transform", "silver", "not_null_crm_prd_info_prd_start_date"], "alias": "not_null_crm_prd_info_prd_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.640438, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_prd_info_prd_start_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect prd_start_date\nfrom \"dwh\".\"silver\".\"crm_prd_info\"\nwhere prd_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_start_date", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "prd_start_date", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_prd_info_prd_end_date.4bac02b05d": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_prd_info_prd_end_date", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_prd_info_prd_end_date.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_prd_info_prd_end_date.4bac02b05d", "fqn": ["dbt_transform", "silver", "not_null_crm_prd_info_prd_end_date"], "alias": "not_null_crm_prd_info_prd_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.641408, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_prd_info_prd_end_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect prd_end_date\nfrom \"dwh\".\"silver\".\"crm_prd_info\"\nwhere prd_end_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_end_date", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "prd_end_date", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_crm_prd_info_prd_end_date___prd_start_date.6cc3176193": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_crm_prd_info_prd_end_date___prd_start_date", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_c_b03699362bb1cd1581eb7810b7ef74b1.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_crm_prd_info_prd_end_date___prd_start_date.6cc3176193", "fqn": ["dbt_transform", "silver", "dbt_utils_expression_is_true_crm_prd_info_prd_end_date___prd_start_date"], "alias": "dbt_utils_expression_is_true_c_b03699362bb1cd1581eb7810b7ef74b1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_c_b03699362bb1cd1581eb7810b7ef74b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures end date is on or after start date.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_c_b03699362bb1cd1581eb7810b7ef74b1"}, "created_at": 1743885923.642359, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_c_b03699362bb1cd1581eb7810b7ef74b1\") }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/dbt_utils_expression_is_true_c_b03699362bb1cd1581eb7810b7ef74b1.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"silver\".\"crm_prd_info\"\n\nwhere not(prd_end_date >= prd_start_date)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_end_date", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= prd_start_date", "column_name": "prd_end_date", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.not_null_crm_prd_info_ingested_at.6858ecc3e5": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_prd_info_ingested_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_prd_info_ingested_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_prd_info_ingested_at.6858ecc3e5", "fqn": ["dbt_transform", "silver", "not_null_crm_prd_info_ingested_at"], "alias": "not_null_crm_prd_info_ingested_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.6454332, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_prd_info_ingested_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingested_at\nfrom \"dwh\".\"silver\".\"crm_prd_info\"\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ingested_at", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_prd_info_updated_at.fc3e5e584c": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_prd_info_updated_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_prd_info_updated_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_prd_info_updated_at.fc3e5e584c", "fqn": ["dbt_transform", "silver", "not_null_crm_prd_info_updated_at"], "alias": "not_null_crm_prd_info_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.6463842, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_prd_info", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_prd_info"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_prd_info_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"dwh\".\"silver\".\"crm_prd_info\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.crm_prd_info", "attached_node": "model.dbt_transform.crm_prd_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('crm_prd_info')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_sales_details_sls_ord_num.284ab08e44": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_sales_details_sls_ord_num", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_sales_details_sls_ord_num.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_sales_details_sls_ord_num.284ab08e44", "fqn": ["dbt_transform", "silver", "not_null_crm_sales_details_sls_ord_num"], "alias": "not_null_crm_sales_details_sls_ord_num", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.647344, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_sales_details_sls_ord_num.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sls_ord_num\nfrom \"dwh\".\"silver\".\"crm_sales_details\"\nwhere sls_ord_num is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_ord_num", "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sls_ord_num", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_crm_sales_details_sls_ord_num.167f0728aa": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_crm_sales_details_sls_ord_num", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_crm_sales_details_sls_ord_num.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_crm_sales_details_sls_ord_num.167f0728aa", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_crm_sales_details_sls_ord_num"], "alias": "custom_trimmed_check_crm_sales_details_sls_ord_num", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in order number.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.648294, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_crm_sales_details_sls_ord_num.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"crm_sales_details\"\nwhere sls_ord_num != trim(sls_ord_num)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_ord_num", "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "sls_ord_num", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_sales_details_sls_prd_key.1a14bfff89": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_sales_details_sls_prd_key", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_sales_details_sls_prd_key.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_sales_details_sls_prd_key.1a14bfff89", "fqn": ["dbt_transform", "silver", "not_null_crm_sales_details_sls_prd_key"], "alias": "not_null_crm_sales_details_sls_prd_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.650778, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_sales_details_sls_prd_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sls_prd_key\nfrom \"dwh\".\"silver\".\"crm_sales_details\"\nwhere sls_prd_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_prd_key", "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sls_prd_key", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_crm_sales_details_sls_prd_key.a501150291": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_crm_sales_details_sls_prd_key", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_crm_sales_details_sls_prd_key.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_crm_sales_details_sls_prd_key.a501150291", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_crm_sales_details_sls_prd_key"], "alias": "custom_trimmed_check_crm_sales_details_sls_prd_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in product key.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.651725, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_crm_sales_details_sls_prd_key.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"crm_sales_details\"\nwhere sls_prd_key != trim(sls_prd_key)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_prd_key", "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "sls_prd_key", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_sales_details_sls_cust_id.0a46ca14bf": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_sales_details_sls_cust_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_sales_details_sls_cust_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_sales_details_sls_cust_id.0a46ca14bf", "fqn": ["dbt_transform", "silver", "not_null_crm_sales_details_sls_cust_id"], "alias": "not_null_crm_sales_details_sls_cust_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.654088, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_sales_details_sls_cust_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sls_cust_id\nfrom \"dwh\".\"silver\".\"crm_sales_details\"\nwhere sls_cust_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_cust_id", "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sls_cust_id", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_sales_details_sls_sales.9250f7ded0": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_sales_details_sls_sales", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_sales_details_sls_sales.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_sales_details_sls_sales.9250f7ded0", "fqn": ["dbt_transform", "silver", "not_null_crm_sales_details_sls_sales"], "alias": "not_null_crm_sales_details_sls_sales", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.6551838, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_sales_details_sls_sales.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sls_sales\nfrom \"dwh\".\"silver\".\"crm_sales_details\"\nwhere sls_sales is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_sales", "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sls_sales", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_sales___0.32b636e941": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_crm_sales_details_sls_sales___0", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_crm_sales_details_sls_sales___0.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_sales___0.32b636e941", "fqn": ["dbt_transform", "silver", "dbt_utils_expression_is_true_crm_sales_details_sls_sales___0"], "alias": "dbt_utils_expression_is_true_crm_sales_details_sls_sales___0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures sales amount is non-negative.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.656121, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/dbt_utils_expression_is_true_crm_sales_details_sls_sales___0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"silver\".\"crm_sales_details\"\n\nwhere not(sls_sales >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_sales", "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "sls_sales", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.not_null_crm_sales_details_sls_quantity.4c23255cdd": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_sales_details_sls_quantity", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_sales_details_sls_quantity.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_sales_details_sls_quantity.4c23255cdd", "fqn": ["dbt_transform", "silver", "not_null_crm_sales_details_sls_quantity"], "alias": "not_null_crm_sales_details_sls_quantity", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.658599, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_sales_details_sls_quantity.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sls_quantity\nfrom \"dwh\".\"silver\".\"crm_sales_details\"\nwhere sls_quantity is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_quantity", "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sls_quantity", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_quantity___0.80310b3b9b": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_crm_sales_details_sls_quantity___0", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_crm_sales_details_sls_quantity___0.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_quantity___0.80310b3b9b", "fqn": ["dbt_transform", "silver", "dbt_utils_expression_is_true_crm_sales_details_sls_quantity___0"], "alias": "dbt_utils_expression_is_true_crm_sales_details_sls_quantity___0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures quantity is non-negative.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.659724, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/dbt_utils_expression_is_true_crm_sales_details_sls_quantity___0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"silver\".\"crm_sales_details\"\n\nwhere not(sls_quantity >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_quantity", "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "sls_quantity", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.not_null_crm_sales_details_sls_price.ab8d58b73d": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_sales_details_sls_price", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_sales_details_sls_price.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_sales_details_sls_price.ab8d58b73d", "fqn": ["dbt_transform", "silver", "not_null_crm_sales_details_sls_price"], "alias": "not_null_crm_sales_details_sls_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.66216, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_sales_details_sls_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sls_price\nfrom \"dwh\".\"silver\".\"crm_sales_details\"\nwhere sls_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_price", "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sls_price", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_price___0.88b98ec27b": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_crm_sales_details_sls_price___0", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_crm_sales_details_sls_price___0.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_price___0.88b98ec27b", "fqn": ["dbt_transform", "silver", "dbt_utils_expression_is_true_crm_sales_details_sls_price___0"], "alias": "dbt_utils_expression_is_true_crm_sales_details_sls_price___0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures unit price is non-negative.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.663106, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/dbt_utils_expression_is_true_crm_sales_details_sls_price___0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"silver\".\"crm_sales_details\"\n\nwhere not(sls_price >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sls_price", "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "sls_price", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.not_null_crm_sales_details_ingested_at.665ecb63bb": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_sales_details_ingested_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_sales_details_ingested_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_sales_details_ingested_at.665ecb63bb", "fqn": ["dbt_transform", "silver", "not_null_crm_sales_details_ingested_at"], "alias": "not_null_crm_sales_details_ingested_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.665718, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_sales_details_ingested_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingested_at\nfrom \"dwh\".\"silver\".\"crm_sales_details\"\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ingested_at", "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_crm_sales_details_updated_at.329e7c70af": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_crm_sales_details_updated_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_crm_sales_details_updated_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_crm_sales_details_updated_at.329e7c70af", "fqn": ["dbt_transform", "silver", "not_null_crm_sales_details_updated_at"], "alias": "not_null_crm_sales_details_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.666664, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_crm_sales_details_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"dwh\".\"silver\".\"crm_sales_details\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_order_dt_sls_ship_dt_AND_sls_order_dt_sls_due_dt.76971c3329": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_crm_sales_details_sls_order_dt_sls_ship_dt_AND_sls_order_dt_sls_due_dt", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_c_05b0093ab359218cdb84ffc3288a4c77.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_order_dt_sls_ship_dt_AND_sls_order_dt_sls_due_dt.76971c3329", "fqn": ["dbt_transform", "silver", "dbt_utils_expression_is_true_crm_sales_details_sls_order_dt_sls_ship_dt_AND_sls_order_dt_sls_due_dt"], "alias": "dbt_utils_expression_is_true_c_05b0093ab359218cdb84ffc3288a4c77", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_c_05b0093ab359218cdb84ffc3288a4c77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": "sls_order_dt IS NOT NULL AND sls_ship_dt IS NOT NULL AND sls_due_dt IS NOT NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures order date occurs before or on the same day as shipping and due dates.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "sls_order_dt IS NOT NULL AND sls_ship_dt IS NOT NULL AND sls_due_dt IS NOT NULL", "alias": "dbt_utils_expression_is_true_c_05b0093ab359218cdb84ffc3288a4c77"}, "created_at": 1743885923.667896, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(where=\"sls_order_dt IS NOT NULL AND sls_ship_dt IS NOT NULL AND sls_due_dt IS NOT NULL\",alias=\"dbt_utils_expression_is_true_c_05b0093ab359218cdb84ffc3288a4c77\") }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/dbt_utils_expression_is_true_c_05b0093ab359218cdb84ffc3288a4c77.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dwh\".\"silver\".\"crm_sales_details\" where sls_order_dt IS NOT NULL AND sls_ship_dt IS NOT NULL AND sls_due_dt IS NOT NULL) dbt_subquery\n\nwhere not(sls_order_dt <= sls_ship_dt AND sls_order_dt <= sls_due_dt)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "sls_order_dt <= sls_ship_dt AND sls_order_dt <= sls_due_dt", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_ABS_sls_sales_sls_quantity_sls_price_0_01.d2788e1779": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_crm_sales_details_ABS_sls_sales_sls_quantity_sls_price_0_01", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_c_e0c464094e6af6854434f7e0bbd41125.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_ABS_sls_sales_sls_quantity_sls_price_0_01.d2788e1779", "fqn": ["dbt_transform", "silver", "dbt_utils_expression_is_true_crm_sales_details_ABS_sls_sales_sls_quantity_sls_price_0_01"], "alias": "dbt_utils_expression_is_true_c_e0c464094e6af6854434f7e0bbd41125", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_c_e0c464094e6af6854434f7e0bbd41125", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures sales amount is consistent with quantity times price, allowing for floating-point tolerance.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_c_e0c464094e6af6854434f7e0bbd41125"}, "created_at": 1743885923.6709461, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_c_e0c464094e6af6854434f7e0bbd41125\") }}", "language": "sql", "refs": [{"name": "crm_sales_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.crm_sales_details"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/dbt_utils_expression_is_true_c_e0c464094e6af6854434f7e0bbd41125.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"silver\".\"crm_sales_details\"\n\nwhere not(ABS(sls_sales - (sls_quantity * sls_price)) < 0.01)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.crm_sales_details", "attached_node": "model.dbt_transform.crm_sales_details", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "ABS(sls_sales - (sls_quantity * sls_price)) < 0.01", "model": "{{ get_where_subquery(ref('crm_sales_details')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.not_null_erp_cust_az12_cid.85e0f9c5c3": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_erp_cust_az12_cid", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_erp_cust_az12_cid.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_erp_cust_az12_cid.85e0f9c5c3", "fqn": ["dbt_transform", "silver", "not_null_erp_cust_az12_cid"], "alias": "not_null_erp_cust_az12_cid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.673984, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_cust_az12", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_cust_az12"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_erp_cust_az12_cid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cid\nfrom \"dwh\".\"silver\".\"erp_cust_az12\"\nwhere cid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cid", "file_key_name": "models.erp_cust_az12", "attached_node": "model.dbt_transform.erp_cust_az12", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cid", "model": "{{ get_where_subquery(ref('erp_cust_az12')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_erp_cust_az12_cid.0e1740cd50": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_erp_cust_az12_cid", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_erp_cust_az12_cid.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_erp_cust_az12_cid.0e1740cd50", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_erp_cust_az12_cid"], "alias": "custom_trimmed_check_erp_cust_az12_cid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in customer ID.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.674943, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_cust_az12", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_cust_az12"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_erp_cust_az12_cid.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"erp_cust_az12\"\nwhere cid != trim(cid)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cid", "file_key_name": "models.erp_cust_az12", "attached_node": "model.dbt_transform.erp_cust_az12", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "cid", "model": "{{ get_where_subquery(ref('erp_cust_az12')) }}"}, "namespace": null}}, "test.dbt_transform.accepted_values_erp_cust_az12_gen__Male__Female__n_a.a4899b28d0": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_erp_cust_az12_gen__Male__Female__n_a", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_erp_cust_az12_gen__Male__Female__n_a.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.accepted_values_erp_cust_az12_gen__Male__Female__n_a.a4899b28d0", "fqn": ["dbt_transform", "silver", "accepted_values_erp_cust_az12_gen__Male__Female__n_a"], "alias": "accepted_values_erp_cust_az12_gen__Male__Female__n_a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures gender falls within allowed values.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.6773791, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_cust_az12", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_cust_az12"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/accepted_values_erp_cust_az12_gen__Male__Female__n_a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        gen as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"silver\".\"erp_cust_az12\"\n    group by gen\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Male','Female','n/a'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "gen", "file_key_name": "models.erp_cust_az12", "attached_node": "model.dbt_transform.erp_cust_az12", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Male", "Female", "n/a"], "column_name": "gen", "model": "{{ get_where_subquery(ref('erp_cust_az12')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_erp_cust_az12_ingested_at.a86586ca8a": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_erp_cust_az12_ingested_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_erp_cust_az12_ingested_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_erp_cust_az12_ingested_at.a86586ca8a", "fqn": ["dbt_transform", "silver", "not_null_erp_cust_az12_ingested_at"], "alias": "not_null_erp_cust_az12_ingested_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.679931, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_cust_az12", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_cust_az12"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_erp_cust_az12_ingested_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingested_at\nfrom \"dwh\".\"silver\".\"erp_cust_az12\"\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ingested_at", "file_key_name": "models.erp_cust_az12", "attached_node": "model.dbt_transform.erp_cust_az12", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('erp_cust_az12')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_erp_cust_az12_updated_at.9fd920946d": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_erp_cust_az12_updated_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_erp_cust_az12_updated_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_erp_cust_az12_updated_at.9fd920946d", "fqn": ["dbt_transform", "silver", "not_null_erp_cust_az12_updated_at"], "alias": "not_null_erp_cust_az12_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.680871, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_cust_az12", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_cust_az12"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_erp_cust_az12_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"dwh\".\"silver\".\"erp_cust_az12\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.erp_cust_az12", "attached_node": "model.dbt_transform.erp_cust_az12", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('erp_cust_az12')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_erp_loc_a101_cid.babef803af": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_erp_loc_a101_cid", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_erp_loc_a101_cid.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_erp_loc_a101_cid.babef803af", "fqn": ["dbt_transform", "silver", "not_null_erp_loc_a101_cid"], "alias": "not_null_erp_loc_a101_cid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.6818318, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_loc_a101", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_loc_a101"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_erp_loc_a101_cid.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cid\nfrom \"dwh\".\"silver\".\"erp_loc_a101\"\nwhere cid is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cid", "file_key_name": "models.erp_loc_a101", "attached_node": "model.dbt_transform.erp_loc_a101", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "cid", "model": "{{ get_where_subquery(ref('erp_loc_a101')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_erp_loc_a101_cid.b5c96a26e9": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_erp_loc_a101_cid", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_erp_loc_a101_cid.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_erp_loc_a101_cid.b5c96a26e9", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_erp_loc_a101_cid"], "alias": "custom_trimmed_check_erp_loc_a101_cid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in customer ID.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.682776, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_loc_a101", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_loc_a101"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_erp_loc_a101_cid.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"erp_loc_a101\"\nwhere cid != trim(cid)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cid", "file_key_name": "models.erp_loc_a101", "attached_node": "model.dbt_transform.erp_loc_a101", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "cid", "model": "{{ get_where_subquery(ref('erp_loc_a101')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_erp_loc_a101_cntry.e764b06576": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_erp_loc_a101_cntry", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_erp_loc_a101_cntry.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_erp_loc_a101_cntry.e764b06576", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_erp_loc_a101_cntry"], "alias": "custom_trimmed_check_erp_loc_a101_cntry", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in country name.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.685288, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_loc_a101", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_loc_a101"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_erp_loc_a101_cntry.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"erp_loc_a101\"\nwhere cntry != trim(cntry)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cntry", "file_key_name": "models.erp_loc_a101", "attached_node": "model.dbt_transform.erp_loc_a101", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "cntry", "model": "{{ get_where_subquery(ref('erp_loc_a101')) }}"}, "namespace": null}}, "test.dbt_transform.accepted_values_erp_loc_a101_cntry__Australia__Canada__France__Germany__United_Kingdom__United_States__n_a.8b1d17bcc2": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_erp_loc_a101_cntry__Australia__Canada__France__Germany__United_Kingdom__United_States__n_a", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_erp_loc_a101_1dca1d2316188cad8380f930eaac2846.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.accepted_values_erp_loc_a101_cntry__Australia__Canada__France__Germany__United_Kingdom__United_States__n_a.8b1d17bcc2", "fqn": ["dbt_transform", "silver", "accepted_values_erp_loc_a101_cntry__Australia__Canada__France__Germany__United_Kingdom__United_States__n_a"], "alias": "accepted_values_erp_loc_a101_1dca1d2316188cad8380f930eaac2846", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_erp_loc_a101_1dca1d2316188cad8380f930eaac2846", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures country location falls within allowed values.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_erp_loc_a101_1dca1d2316188cad8380f930eaac2846"}, "created_at": 1743885923.687724, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_erp_loc_a101_1dca1d2316188cad8380f930eaac2846\") }}", "language": "sql", "refs": [{"name": "erp_loc_a101", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_loc_a101"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/accepted_values_erp_loc_a101_1dca1d2316188cad8380f930eaac2846.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        cntry as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"silver\".\"erp_loc_a101\"\n    group by cntry\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Australia','Canada','France','Germany','United Kingdom','United States','n/a'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cntry", "file_key_name": "models.erp_loc_a101", "attached_node": "model.dbt_transform.erp_loc_a101", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Australia", "Canada", "France", "Germany", "United Kingdom", "United States", "n/a"], "column_name": "cntry", "model": "{{ get_where_subquery(ref('erp_loc_a101')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_erp_loc_a101_ingested_at.5fa40abeeb": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_erp_loc_a101_ingested_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_erp_loc_a101_ingested_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_erp_loc_a101_ingested_at.5fa40abeeb", "fqn": ["dbt_transform", "silver", "not_null_erp_loc_a101_ingested_at"], "alias": "not_null_erp_loc_a101_ingested_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.692304, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_loc_a101", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_loc_a101"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_erp_loc_a101_ingested_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingested_at\nfrom \"dwh\".\"silver\".\"erp_loc_a101\"\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ingested_at", "file_key_name": "models.erp_loc_a101", "attached_node": "model.dbt_transform.erp_loc_a101", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('erp_loc_a101')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_erp_loc_a101_updated_at.66ab7ce54c": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_erp_loc_a101_updated_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_erp_loc_a101_updated_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_erp_loc_a101_updated_at.66ab7ce54c", "fqn": ["dbt_transform", "silver", "not_null_erp_loc_a101_updated_at"], "alias": "not_null_erp_loc_a101_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.6932402, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_loc_a101", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_loc_a101"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_erp_loc_a101_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"dwh\".\"silver\".\"erp_loc_a101\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.erp_loc_a101", "attached_node": "model.dbt_transform.erp_loc_a101", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('erp_loc_a101')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_erp_px_cat_g1v2_id.b5825d0c02": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_erp_px_cat_g1v2_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_erp_px_cat_g1v2_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_erp_px_cat_g1v2_id.b5825d0c02", "fqn": ["dbt_transform", "silver", "not_null_erp_px_cat_g1v2_id"], "alias": "not_null_erp_px_cat_g1v2_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.694315, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_px_cat_g1v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_px_cat_g1v2"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_erp_px_cat_g1v2_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dwh\".\"silver\".\"erp_px_cat_g1v2\"\nwhere id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.erp_px_cat_g1v2", "attached_node": "model.dbt_transform.erp_px_cat_g1v2", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('erp_px_cat_g1v2')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_id.92860219f5": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_erp_px_cat_g1v2_id", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_erp_px_cat_g1v2_id.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_id.92860219f5", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_erp_px_cat_g1v2_id"], "alias": "custom_trimmed_check_erp_px_cat_g1v2_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in category ID.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.69529, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_px_cat_g1v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_px_cat_g1v2"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_erp_px_cat_g1v2_id.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"erp_px_cat_g1v2\"\nwhere id != trim(id)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "id", "file_key_name": "models.erp_px_cat_g1v2", "attached_node": "model.dbt_transform.erp_px_cat_g1v2", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('erp_px_cat_g1v2')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_cat.5b96c7bce1": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_erp_px_cat_g1v2_cat", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_erp_px_cat_g1v2_cat.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_cat.5b96c7bce1", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_erp_px_cat_g1v2_cat"], "alias": "custom_trimmed_check_erp_px_cat_g1v2_cat", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in category name.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.697623, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_px_cat_g1v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_px_cat_g1v2"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_erp_px_cat_g1v2_cat.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"erp_px_cat_g1v2\"\nwhere cat != trim(cat)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cat", "file_key_name": "models.erp_px_cat_g1v2", "attached_node": "model.dbt_transform.erp_px_cat_g1v2", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "cat", "model": "{{ get_where_subquery(ref('erp_px_cat_g1v2')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_subcat.164f225283": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_erp_px_cat_g1v2_subcat", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_erp_px_cat_g1v2_subcat.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_subcat.164f225283", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_erp_px_cat_g1v2_subcat"], "alias": "custom_trimmed_check_erp_px_cat_g1v2_subcat", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in subcategory name.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.7000709, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_px_cat_g1v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_px_cat_g1v2"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_erp_px_cat_g1v2_subcat.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"erp_px_cat_g1v2\"\nwhere subcat != trim(subcat)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subcat", "file_key_name": "models.erp_px_cat_g1v2", "attached_node": "model.dbt_transform.erp_px_cat_g1v2", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "subcat", "model": "{{ get_where_subquery(ref('erp_px_cat_g1v2')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_maintenance_status.c2f302cba9": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_erp_px_cat_g1v2_maintenance_status", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_erp_px_cat_g1v2_maintenance_status.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_maintenance_status.c2f302cba9", "fqn": ["dbt_transform", "silver", "custom_trimmed_check_erp_px_cat_g1v2_maintenance_status"], "alias": "custom_trimmed_check_erp_px_cat_g1v2_maintenance_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in maintenance status.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.702362, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_px_cat_g1v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_px_cat_g1v2"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/custom_trimmed_check_erp_px_cat_g1v2_maintenance_status.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"silver\".\"erp_px_cat_g1v2\"\nwhere maintenance_status != trim(maintenance_status)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "maintenance_status", "file_key_name": "models.erp_px_cat_g1v2", "attached_node": "model.dbt_transform.erp_px_cat_g1v2", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "maintenance_status", "model": "{{ get_where_subquery(ref('erp_px_cat_g1v2')) }}"}, "namespace": null}}, "test.dbt_transform.accepted_values_erp_px_cat_g1v2_maintenance_status__Yes__No.579d39cf7d": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_erp_px_cat_g1v2_maintenance_status__Yes__No", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_erp_px_cat_g1v2_maintenance_status__Yes__No.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.accepted_values_erp_px_cat_g1v2_maintenance_status__Yes__No.579d39cf7d", "fqn": ["dbt_transform", "silver", "accepted_values_erp_px_cat_g1v2_maintenance_status__Yes__No"], "alias": "accepted_values_erp_px_cat_g1v2_maintenance_status__Yes__No", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures maintenance status is either 'Yes' or 'No'.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.704821, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_px_cat_g1v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_px_cat_g1v2"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/accepted_values_erp_px_cat_g1v2_maintenance_status__Yes__No.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        maintenance_status as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"silver\".\"erp_px_cat_g1v2\"\n    group by maintenance_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','No'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "maintenance_status", "file_key_name": "models.erp_px_cat_g1v2", "attached_node": "model.dbt_transform.erp_px_cat_g1v2", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "No"], "column_name": "maintenance_status", "model": "{{ get_where_subquery(ref('erp_px_cat_g1v2')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_erp_px_cat_g1v2_ingested_at.b8fc6358c1": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_erp_px_cat_g1v2_ingested_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_erp_px_cat_g1v2_ingested_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_erp_px_cat_g1v2_ingested_at.b8fc6358c1", "fqn": ["dbt_transform", "silver", "not_null_erp_px_cat_g1v2_ingested_at"], "alias": "not_null_erp_px_cat_g1v2_ingested_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.7076511, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_px_cat_g1v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_px_cat_g1v2"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_erp_px_cat_g1v2_ingested_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ingested_at\nfrom \"dwh\".\"silver\".\"erp_px_cat_g1v2\"\nwhere ingested_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ingested_at", "file_key_name": "models.erp_px_cat_g1v2", "attached_node": "model.dbt_transform.erp_px_cat_g1v2", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ingested_at", "model": "{{ get_where_subquery(ref('erp_px_cat_g1v2')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_erp_px_cat_g1v2_updated_at.64f8508b6f": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_erp_px_cat_g1v2_updated_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_erp_px_cat_g1v2_updated_at.sql", "original_file_path": "models/silver/schema.yml", "unique_id": "test.dbt_transform.not_null_erp_px_cat_g1v2_updated_at.64f8508b6f", "fqn": ["dbt_transform", "silver", "not_null_erp_px_cat_g1v2_updated_at"], "alias": "not_null_erp_px_cat_g1v2_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.7087822, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "erp_px_cat_g1v2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_px_cat_g1v2"]}, "compiled_path": "target/compiled/dbt_transform/models/silver/schema.yml/not_null_erp_px_cat_g1v2_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"dwh\".\"silver\".\"erp_px_cat_g1v2\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.erp_px_cat_g1v2", "attached_node": "model.dbt_transform.erp_px_cat_g1v2", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('erp_px_cat_g1v2')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_customers_current_customer_key.37ac625538": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_customers_current_customer_key", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_customers_current_customer_key.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_customers_current_customer_key.37ac625538", "fqn": ["dbt_transform", "gold", "not_null_dim_customers_current_customer_key"], "alias": "not_null_dim_customers_current_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.723377, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_customers_current_customer_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_key\nfrom \"dwh\".\"gold\".\"dim_customers_current\"\nwhere customer_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.dim_customers_current", "attached_node": "model.dbt_transform.dim_customers_current", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers_current')) }}"}, "namespace": null}}, "test.dbt_transform.unique_dim_customers_current_customer_key.08d4b3b146": {"database": "dwh", "schema": "dbt_test__audit", "name": "unique_dim_customers_current_customer_key", "resource_type": "test", "package_name": "dbt_transform", "path": "unique_dim_customers_current_customer_key.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.unique_dim_customers_current_customer_key.08d4b3b146", "fqn": ["dbt_transform", "gold", "unique_dim_customers_current_customer_key"], "alias": "unique_dim_customers_current_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.724362, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/unique_dim_customers_current_customer_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_key as unique_field,\n    count(*) as n_records\n\nfrom \"dwh\".\"gold\".\"dim_customers_current\"\nwhere customer_key is not null\ngroup by customer_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.dim_customers_current", "attached_node": "model.dbt_transform.dim_customers_current", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers_current')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_customers_current_customer_id.1e15b0f415": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_customers_current_customer_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_customers_current_customer_id.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_customers_current_customer_id.1e15b0f415", "fqn": ["dbt_transform", "gold", "not_null_dim_customers_current_customer_id"], "alias": "not_null_dim_customers_current_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.725444, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_customers_current_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"dwh\".\"gold\".\"dim_customers_current\"\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.dim_customers_current", "attached_node": "model.dbt_transform.dim_customers_current", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('dim_customers_current')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_customers_current_customer_code.dc65fd1b8d": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_customers_current_customer_code", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_customers_current_customer_code.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_customers_current_customer_code.dc65fd1b8d", "fqn": ["dbt_transform", "gold", "not_null_dim_customers_current_customer_code"], "alias": "not_null_dim_customers_current_customer_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.7263732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_customers_current_customer_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_code\nfrom \"dwh\".\"gold\".\"dim_customers_current\"\nwhere customer_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_code", "file_key_name": "models.dim_customers_current", "attached_node": "model.dbt_transform.dim_customers_current", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_code", "model": "{{ get_where_subquery(ref('dim_customers_current')) }}"}, "namespace": null}}, "test.dbt_transform.relationships_dim_customers_current_customer_code__cid__ref_erp_cust_az12_.0a9649b542": {"database": "dwh", "schema": "dbt_test__audit", "name": "relationships_dim_customers_current_customer_code__cid__ref_erp_cust_az12_", "resource_type": "test", "package_name": "dbt_transform", "path": "relationships_dim_customers_cu_3019945a78dd6aefbcd81a8c83bf9212.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.relationships_dim_customers_current_customer_code__cid__ref_erp_cust_az12_.0a9649b542", "fqn": ["dbt_transform", "gold", "relationships_dim_customers_current_customer_code__cid__ref_erp_cust_az12_"], "alias": "relationships_dim_customers_cu_3019945a78dd6aefbcd81a8c83bf9212", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_dim_customers_cu_3019945a78dd6aefbcd81a8c83bf9212", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_dim_customers_cu_3019945a78dd6aefbcd81a8c83bf9212"}, "created_at": 1743885923.727336, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_customers_cu_3019945a78dd6aefbcd81a8c83bf9212\") }}", "language": "sql", "refs": [{"name": "erp_cust_az12", "package": null, "version": null}, {"name": "dim_customers_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_cust_az12", "model.dbt_transform.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/relationships_dim_customers_cu_3019945a78dd6aefbcd81a8c83bf9212.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_code as from_field\n    from \"dwh\".\"gold\".\"dim_customers_current\"\n    where customer_code is not null\n),\n\nparent as (\n    select cid as to_field\n    from \"dwh\".\"silver\".\"erp_cust_az12\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_code", "file_key_name": "models.dim_customers_current", "attached_node": "model.dbt_transform.dim_customers_current", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('erp_cust_az12')", "field": "cid", "column_name": "customer_code", "model": "{{ get_where_subquery(ref('dim_customers_current')) }}"}, "namespace": null}}, "test.dbt_transform.relationships_dim_customers_current_customer_code__cid__ref_erp_loc_a101_.f2a45edd5c": {"database": "dwh", "schema": "dbt_test__audit", "name": "relationships_dim_customers_current_customer_code__cid__ref_erp_loc_a101_", "resource_type": "test", "package_name": "dbt_transform", "path": "relationships_dim_customers_cu_5dbbead70dfecb17b21a36a17826dab7.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.relationships_dim_customers_current_customer_code__cid__ref_erp_loc_a101_.f2a45edd5c", "fqn": ["dbt_transform", "gold", "relationships_dim_customers_current_customer_code__cid__ref_erp_loc_a101_"], "alias": "relationships_dim_customers_cu_5dbbead70dfecb17b21a36a17826dab7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_dim_customers_cu_5dbbead70dfecb17b21a36a17826dab7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_dim_customers_cu_5dbbead70dfecb17b21a36a17826dab7"}, "created_at": 1743885923.732642, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_customers_cu_5dbbead70dfecb17b21a36a17826dab7\") }}", "language": "sql", "refs": [{"name": "erp_loc_a101", "package": null, "version": null}, {"name": "dim_customers_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_loc_a101", "model.dbt_transform.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/relationships_dim_customers_cu_5dbbead70dfecb17b21a36a17826dab7.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_code as from_field\n    from \"dwh\".\"gold\".\"dim_customers_current\"\n    where customer_code is not null\n),\n\nparent as (\n    select cid as to_field\n    from \"dwh\".\"silver\".\"erp_loc_a101\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_code", "file_key_name": "models.dim_customers_current", "attached_node": "model.dbt_transform.dim_customers_current", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('erp_loc_a101')", "field": "cid", "column_name": "customer_code", "model": "{{ get_where_subquery(ref('dim_customers_current')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_dim_customers_current_customer_firstname.6ffb6e70e8": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_dim_customers_current_customer_firstname", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_dim_customers_current_customer_firstname.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_dim_customers_current_customer_firstname.6ffb6e70e8", "fqn": ["dbt_transform", "gold", "custom_trimmed_check_dim_customers_current_customer_firstname"], "alias": "custom_trimmed_check_dim_customers_current_customer_firstname", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in customer's first name.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.735627, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/custom_trimmed_check_dim_customers_current_customer_firstname.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"gold\".\"dim_customers_current\"\nwhere customer_firstname != trim(customer_firstname)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_firstname", "file_key_name": "models.dim_customers_current", "attached_node": "model.dbt_transform.dim_customers_current", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "customer_firstname", "model": "{{ get_where_subquery(ref('dim_customers_current')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_dim_customers_current_customer_lastname.4fb9107fc7": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_dim_customers_current_customer_lastname", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_dim_customers_current_customer_lastname.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_dim_customers_current_customer_lastname.4fb9107fc7", "fqn": ["dbt_transform", "gold", "custom_trimmed_check_dim_customers_current_customer_lastname"], "alias": "custom_trimmed_check_dim_customers_current_customer_lastname", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in customer's last name.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.738122, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/custom_trimmed_check_dim_customers_current_customer_lastname.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"gold\".\"dim_customers_current\"\nwhere customer_lastname != trim(customer_lastname)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_lastname", "file_key_name": "models.dim_customers_current", "attached_node": "model.dbt_transform.dim_customers_current", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "customer_lastname", "model": "{{ get_where_subquery(ref('dim_customers_current')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_current_customer_birthdate___CURRENT_DATE_INTERVAL_18_years_.722cf38f8a": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_customers_current_customer_birthdate___CURRENT_DATE_INTERVAL_18_years_", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_d_0c682554900ef4af97a51ad52226f700.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_current_customer_birthdate___CURRENT_DATE_INTERVAL_18_years_.722cf38f8a", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_dim_customers_current_customer_birthdate___CURRENT_DATE_INTERVAL_18_years_"], "alias": "dbt_utils_expression_is_true_d_0c682554900ef4af97a51ad52226f700", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_d_0c682554900ef4af97a51ad52226f700", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": "customer_birthdate IS NOT NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Customer must be at least 18 years old.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "where": "customer_birthdate IS NOT NULL", "alias": "dbt_utils_expression_is_true_d_0c682554900ef4af97a51ad52226f700"}, "created_at": 1743885923.740743, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",where=\"customer_birthdate IS NOT NULL\",alias=\"dbt_utils_expression_is_true_d_0c682554900ef4af97a51ad52226f700\") }}", "language": "sql", "refs": [{"name": "dim_customers_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_d_0c682554900ef4af97a51ad52226f700.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dwh\".\"gold\".\"dim_customers_current\" where customer_birthdate IS NOT NULL) dbt_subquery\n\nwhere not(customer_birthdate <= CURRENT_DATE - INTERVAL '18 years')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_birthdate", "file_key_name": "models.dim_customers_current", "attached_node": "model.dbt_transform.dim_customers_current", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= CURRENT_DATE - INTERVAL '18 years'", "column_name": "customer_birthdate", "model": "{{ get_where_subquery(ref('dim_customers_current')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.accepted_values_dim_customers_current_customer_gender__Male__Female__n_a.d1e41f77b4": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_dim_customers_current_customer_gender__Male__Female__n_a", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_dim_customers__8363635f1343342f24ef5a97aeb4e1f8.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.accepted_values_dim_customers_current_customer_gender__Male__Female__n_a.d1e41f77b4", "fqn": ["dbt_transform", "gold", "accepted_values_dim_customers_current_customer_gender__Male__Female__n_a"], "alias": "accepted_values_dim_customers__8363635f1343342f24ef5a97aeb4e1f8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_customers__8363635f1343342f24ef5a97aeb4e1f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures gender falls within the allowed values.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_dim_customers__8363635f1343342f24ef5a97aeb4e1f8"}, "created_at": 1743885923.743913, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_customers__8363635f1343342f24ef5a97aeb4e1f8\") }}", "language": "sql", "refs": [{"name": "dim_customers_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/accepted_values_dim_customers__8363635f1343342f24ef5a97aeb4e1f8.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        customer_gender as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"gold\".\"dim_customers_current\"\n    group by customer_gender\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Male','Female','n/a'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_gender", "file_key_name": "models.dim_customers_current", "attached_node": "model.dbt_transform.dim_customers_current", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Male", "Female", "n/a"], "column_name": "customer_gender", "model": "{{ get_where_subquery(ref('dim_customers_current')) }}"}, "namespace": null}}, "test.dbt_transform.accepted_values_dim_customers_current_customer_marital_status__Married__Single__n_a.f9912a886b": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_dim_customers_current_customer_marital_status__Married__Single__n_a", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_dim_customers__99d14b9cd81d6e0553d40db89827abec.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.accepted_values_dim_customers_current_customer_marital_status__Married__Single__n_a.f9912a886b", "fqn": ["dbt_transform", "gold", "accepted_values_dim_customers_current_customer_marital_status__Married__Single__n_a"], "alias": "accepted_values_dim_customers__99d14b9cd81d6e0553d40db89827abec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_customers__99d14b9cd81d6e0553d40db89827abec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures marital status is valid.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_dim_customers__99d14b9cd81d6e0553d40db89827abec"}, "created_at": 1743885923.746666, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_customers__99d14b9cd81d6e0553d40db89827abec\") }}", "language": "sql", "refs": [{"name": "dim_customers_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/accepted_values_dim_customers__99d14b9cd81d6e0553d40db89827abec.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        customer_marital_status as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"gold\".\"dim_customers_current\"\n    group by customer_marital_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Married','Single','n/a'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_marital_status", "file_key_name": "models.dim_customers_current", "attached_node": "model.dbt_transform.dim_customers_current", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Married", "Single", "n/a"], "column_name": "customer_marital_status", "model": "{{ get_where_subquery(ref('dim_customers_current')) }}"}, "namespace": null}}, "test.dbt_transform.email_check_dim_customers_current_customer_email.510a4f64f7": {"database": "dwh", "schema": "dbt_test__audit", "name": "email_check_dim_customers_current_customer_email", "resource_type": "test", "package_name": "dbt_transform", "path": "email_check_dim_customers_current_customer_email.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.email_check_dim_customers_current_customer_email.510a4f64f7", "fqn": ["dbt_transform", "gold", "email_check_dim_customers_current_customer_email"], "alias": "email_check_dim_customers_current_customer_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Validates email format, ensuring it's not null, not 'unknown', and matches a standard email pattern.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1743885923.749239, "relation_name": null, "raw_code": "{{ test_email_check(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "dim_customers_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_email_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/email_check_dim_customers_current_customer_email.sql", "compiled": true, "compiled_code": "\nSELECT \n    *\nFROM \"dwh\".\"gold\".\"dim_customers_current\"\nWHERE \n    customer_email IS NOT NULL\n    AND customer_email != 'unknown'\n    AND customer_email !~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_email", "file_key_name": "models.dim_customers_current", "attached_node": "model.dbt_transform.dim_customers_current", "test_metadata": {"name": "email_check", "kwargs": {"column_name": "customer_email", "model": "{{ get_where_subquery(ref('dim_customers_current')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_customers_current_customer_create_date.f9357ccf66": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_customers_current_customer_create_date", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_customers_current_customer_create_date.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_customers_current_customer_create_date.f9357ccf66", "fqn": ["dbt_transform", "gold", "not_null_dim_customers_current_customer_create_date"], "alias": "not_null_dim_customers_current_customer_create_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.7524202, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_customers_current_customer_create_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_create_date\nfrom \"dwh\".\"gold\".\"dim_customers_current\"\nwhere customer_create_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_create_date", "file_key_name": "models.dim_customers_current", "attached_node": "model.dbt_transform.dim_customers_current", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_create_date", "model": "{{ get_where_subquery(ref('dim_customers_current')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_current_customer_create_date___CURRENT_DATE.a7cb8fcbd9": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_customers_current_customer_create_date___CURRENT_DATE", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_d_a62924c69a7f2f64df3a32bdf17ada67.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_current_customer_create_date___CURRENT_DATE.a7cb8fcbd9", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_dim_customers_current_customer_create_date___CURRENT_DATE"], "alias": "dbt_utils_expression_is_true_d_a62924c69a7f2f64df3a32bdf17ada67", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_d_a62924c69a7f2f64df3a32bdf17ada67", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures create date is not in the future.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_d_a62924c69a7f2f64df3a32bdf17ada67"}, "created_at": 1743885923.7533922, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_a62924c69a7f2f64df3a32bdf17ada67\") }}", "language": "sql", "refs": [{"name": "dim_customers_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_d_a62924c69a7f2f64df3a32bdf17ada67.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"gold\".\"dim_customers_current\"\n\nwhere not(customer_create_date <= CURRENT_DATE)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_create_date", "file_key_name": "models.dim_customers_current", "attached_node": "model.dbt_transform.dim_customers_current", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= CURRENT_DATE", "column_name": "customer_create_date", "model": "{{ get_where_subquery(ref('dim_customers_current')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.not_null_dim_customers_hist_customer_key.60fa59698a": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_customers_hist_customer_key", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_customers_hist_customer_key.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_customers_hist_customer_key.60fa59698a", "fqn": ["dbt_transform", "gold", "not_null_dim_customers_hist_customer_key"], "alias": "not_null_dim_customers_hist_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.7563992, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_customers_hist_customer_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_key\nfrom \"dwh\".\"gold\".\"dim_customers_hist\"\nwhere customer_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": null}}, "test.dbt_transform.unique_dim_customers_hist_customer_key.e6329f08c7": {"database": "dwh", "schema": "dbt_test__audit", "name": "unique_dim_customers_hist_customer_key", "resource_type": "test", "package_name": "dbt_transform", "path": "unique_dim_customers_hist_customer_key.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.unique_dim_customers_hist_customer_key.e6329f08c7", "fqn": ["dbt_transform", "gold", "unique_dim_customers_hist_customer_key"], "alias": "unique_dim_customers_hist_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.757349, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/unique_dim_customers_hist_customer_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_key as unique_field,\n    count(*) as n_records\n\nfrom \"dwh\".\"gold\".\"dim_customers_hist\"\nwhere customer_key is not null\ngroup by customer_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_customers_hist_customer_id.ce18adacfe": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_customers_hist_customer_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_customers_hist_customer_id.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_customers_hist_customer_id.ce18adacfe", "fqn": ["dbt_transform", "gold", "not_null_dim_customers_hist_customer_id"], "alias": "not_null_dim_customers_hist_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.758283, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_customers_hist_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"dwh\".\"gold\".\"dim_customers_hist\"\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_customers_hist_customer_code.5954a024ee": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_customers_hist_customer_code", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_customers_hist_customer_code.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_customers_hist_customer_code.5954a024ee", "fqn": ["dbt_transform", "gold", "not_null_dim_customers_hist_customer_code"], "alias": "not_null_dim_customers_hist_customer_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.759212, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_customers_hist_customer_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_code\nfrom \"dwh\".\"gold\".\"dim_customers_hist\"\nwhere customer_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_code", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_code", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": null}}, "test.dbt_transform.relationships_dim_customers_hist_customer_code__cid__ref_erp_cust_az12_.e1cbda855d": {"database": "dwh", "schema": "dbt_test__audit", "name": "relationships_dim_customers_hist_customer_code__cid__ref_erp_cust_az12_", "resource_type": "test", "package_name": "dbt_transform", "path": "relationships_dim_customers_hi_5ca35f55d381316c6388a432c40896f5.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.relationships_dim_customers_hist_customer_code__cid__ref_erp_cust_az12_.e1cbda855d", "fqn": ["dbt_transform", "gold", "relationships_dim_customers_hist_customer_code__cid__ref_erp_cust_az12_"], "alias": "relationships_dim_customers_hi_5ca35f55d381316c6388a432c40896f5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_dim_customers_hi_5ca35f55d381316c6388a432c40896f5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_dim_customers_hi_5ca35f55d381316c6388a432c40896f5"}, "created_at": 1743885923.760156, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_customers_hi_5ca35f55d381316c6388a432c40896f5\") }}", "language": "sql", "refs": [{"name": "erp_cust_az12", "package": null, "version": null}, {"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_cust_az12", "model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/relationships_dim_customers_hi_5ca35f55d381316c6388a432c40896f5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_code as from_field\n    from \"dwh\".\"gold\".\"dim_customers_hist\"\n    where customer_code is not null\n),\n\nparent as (\n    select cid as to_field\n    from \"dwh\".\"silver\".\"erp_cust_az12\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_code", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('erp_cust_az12')", "field": "cid", "column_name": "customer_code", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": null}}, "test.dbt_transform.relationships_dim_customers_hist_customer_code__cid__ref_erp_loc_a101_.1cff523225": {"database": "dwh", "schema": "dbt_test__audit", "name": "relationships_dim_customers_hist_customer_code__cid__ref_erp_loc_a101_", "resource_type": "test", "package_name": "dbt_transform", "path": "relationships_dim_customers_hi_922e45156dda076e1717cc95ac86a098.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.relationships_dim_customers_hist_customer_code__cid__ref_erp_loc_a101_.1cff523225", "fqn": ["dbt_transform", "gold", "relationships_dim_customers_hist_customer_code__cid__ref_erp_loc_a101_"], "alias": "relationships_dim_customers_hi_922e45156dda076e1717cc95ac86a098", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_dim_customers_hi_922e45156dda076e1717cc95ac86a098", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_dim_customers_hi_922e45156dda076e1717cc95ac86a098"}, "created_at": 1743885923.763324, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_dim_customers_hi_922e45156dda076e1717cc95ac86a098\") }}", "language": "sql", "refs": [{"name": "erp_loc_a101", "package": null, "version": null}, {"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_loc_a101", "model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/relationships_dim_customers_hi_922e45156dda076e1717cc95ac86a098.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_code as from_field\n    from \"dwh\".\"gold\".\"dim_customers_hist\"\n    where customer_code is not null\n),\n\nparent as (\n    select cid as to_field\n    from \"dwh\".\"silver\".\"erp_loc_a101\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_code", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('erp_loc_a101')", "field": "cid", "column_name": "customer_code", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_dim_customers_hist_customer_firstname.d868abb141": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_dim_customers_hist_customer_firstname", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_dim_customers_hist_customer_firstname.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_dim_customers_hist_customer_firstname.d868abb141", "fqn": ["dbt_transform", "gold", "custom_trimmed_check_dim_customers_hist_customer_firstname"], "alias": "custom_trimmed_check_dim_customers_hist_customer_firstname", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in customer's first name.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.766243, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/custom_trimmed_check_dim_customers_hist_customer_firstname.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"gold\".\"dim_customers_hist\"\nwhere customer_firstname != trim(customer_firstname)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_firstname", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "customer_firstname", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_dim_customers_hist_customer_lastname.742a0744a8": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_dim_customers_hist_customer_lastname", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_dim_customers_hist_customer_lastname.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_dim_customers_hist_customer_lastname.742a0744a8", "fqn": ["dbt_transform", "gold", "custom_trimmed_check_dim_customers_hist_customer_lastname"], "alias": "custom_trimmed_check_dim_customers_hist_customer_lastname", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in customer's last name.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.768733, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/custom_trimmed_check_dim_customers_hist_customer_lastname.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"gold\".\"dim_customers_hist\"\nwhere customer_lastname != trim(customer_lastname)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_lastname", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "customer_lastname", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_customer_birthdate___CURRENT_DATE_INTERVAL_18_years_.31d74b4ea7": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_customers_hist_customer_birthdate___CURRENT_DATE_INTERVAL_18_years_", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_d_7107dcb74f7ea414b1120fefe383404c.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_customer_birthdate___CURRENT_DATE_INTERVAL_18_years_.31d74b4ea7", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_dim_customers_hist_customer_birthdate___CURRENT_DATE_INTERVAL_18_years_"], "alias": "dbt_utils_expression_is_true_d_7107dcb74f7ea414b1120fefe383404c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_d_7107dcb74f7ea414b1120fefe383404c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": "customer_birthdate IS NOT NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Customer must be at least 18 years old.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "where": "customer_birthdate IS NOT NULL", "alias": "dbt_utils_expression_is_true_d_7107dcb74f7ea414b1120fefe383404c"}, "created_at": 1743885923.77105, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",where=\"customer_birthdate IS NOT NULL\",alias=\"dbt_utils_expression_is_true_d_7107dcb74f7ea414b1120fefe383404c\") }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_d_7107dcb74f7ea414b1120fefe383404c.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dwh\".\"gold\".\"dim_customers_hist\" where customer_birthdate IS NOT NULL) dbt_subquery\n\nwhere not(customer_birthdate <= CURRENT_DATE - INTERVAL '18 years')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_birthdate", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= CURRENT_DATE - INTERVAL '18 years'", "column_name": "customer_birthdate", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.accepted_values_dim_customers_hist_customer_gender__Male__Female__n_a.d766a33adc": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_dim_customers_hist_customer_gender__Male__Female__n_a", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_dim_customers__3043d2fe3b0718edda215b298f263dc5.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.accepted_values_dim_customers_hist_customer_gender__Male__Female__n_a.d766a33adc", "fqn": ["dbt_transform", "gold", "accepted_values_dim_customers_hist_customer_gender__Male__Female__n_a"], "alias": "accepted_values_dim_customers__3043d2fe3b0718edda215b298f263dc5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_customers__3043d2fe3b0718edda215b298f263dc5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures gender falls within allowed values.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_dim_customers__3043d2fe3b0718edda215b298f263dc5"}, "created_at": 1743885923.773914, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_customers__3043d2fe3b0718edda215b298f263dc5\") }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/accepted_values_dim_customers__3043d2fe3b0718edda215b298f263dc5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        customer_gender as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"gold\".\"dim_customers_hist\"\n    group by customer_gender\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Male','Female','n/a'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_gender", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Male", "Female", "n/a"], "column_name": "customer_gender", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": null}}, "test.dbt_transform.accepted_values_dim_customers_hist_customer_marital_status__Married__Single__n_a.cdaca57546": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_dim_customers_hist_customer_marital_status__Married__Single__n_a", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_dim_customers__f7fb2ca69651d52cd5843de4257c273b.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.accepted_values_dim_customers_hist_customer_marital_status__Married__Single__n_a.cdaca57546", "fqn": ["dbt_transform", "gold", "accepted_values_dim_customers_hist_customer_marital_status__Married__Single__n_a"], "alias": "accepted_values_dim_customers__f7fb2ca69651d52cd5843de4257c273b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_customers__f7fb2ca69651d52cd5843de4257c273b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures marital status is valid.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_dim_customers__f7fb2ca69651d52cd5843de4257c273b"}, "created_at": 1743885923.776618, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_customers__f7fb2ca69651d52cd5843de4257c273b\") }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/accepted_values_dim_customers__f7fb2ca69651d52cd5843de4257c273b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        customer_marital_status as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"gold\".\"dim_customers_hist\"\n    group by customer_marital_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Married','Single','n/a'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_marital_status", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Married", "Single", "n/a"], "column_name": "customer_marital_status", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": null}}, "test.dbt_transform.email_check_dim_customers_hist_customer_email.99784c6897": {"database": "dwh", "schema": "dbt_test__audit", "name": "email_check_dim_customers_hist_customer_email", "resource_type": "test", "package_name": "dbt_transform", "path": "email_check_dim_customers_hist_customer_email.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.email_check_dim_customers_hist_customer_email.99784c6897", "fqn": ["dbt_transform", "gold", "email_check_dim_customers_hist_customer_email"], "alias": "email_check_dim_customers_hist_customer_email", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Validates email format, ensuring it's not null, not 'unknown', and matches a standard email pattern.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn"}, "created_at": 1743885923.7792141, "relation_name": null, "raw_code": "{{ test_email_check(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_email_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/email_check_dim_customers_hist_customer_email.sql", "compiled": true, "compiled_code": "\nSELECT \n    *\nFROM \"dwh\".\"gold\".\"dim_customers_hist\"\nWHERE \n    customer_email IS NOT NULL\n    AND customer_email != 'unknown'\n    AND customer_email !~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_email", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "email_check", "kwargs": {"column_name": "customer_email", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_customers_hist_customer_create_date.bd19ea11a1": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_customers_hist_customer_create_date", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_customers_hist_customer_create_date.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_customers_hist_customer_create_date.bd19ea11a1", "fqn": ["dbt_transform", "gold", "not_null_dim_customers_hist_customer_create_date"], "alias": "not_null_dim_customers_hist_customer_create_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.781981, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_customers_hist_customer_create_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_create_date\nfrom \"dwh\".\"gold\".\"dim_customers_hist\"\nwhere customer_create_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_create_date", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_create_date", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_customer_create_date___CURRENT_DATE.f81299d118": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_customers_hist_customer_create_date___CURRENT_DATE", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_d_c94421c1b066392c336bc5ade5bcfc55.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_customer_create_date___CURRENT_DATE.f81299d118", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_dim_customers_hist_customer_create_date___CURRENT_DATE"], "alias": "dbt_utils_expression_is_true_d_c94421c1b066392c336bc5ade5bcfc55", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_d_c94421c1b066392c336bc5ade5bcfc55", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures create date is not in the future.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_d_c94421c1b066392c336bc5ade5bcfc55"}, "created_at": 1743885923.782987, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_c94421c1b066392c336bc5ade5bcfc55\") }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_d_c94421c1b066392c336bc5ade5bcfc55.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"gold\".\"dim_customers_hist\"\n\nwhere not(customer_create_date <= CURRENT_DATE)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_create_date", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= CURRENT_DATE", "column_name": "customer_create_date", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.not_null_dim_customers_hist_valid_from.eea34cae68": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_customers_hist_valid_from", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_customers_hist_valid_from.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_customers_hist_valid_from.eea34cae68", "fqn": ["dbt_transform", "gold", "not_null_dim_customers_hist_valid_from"], "alias": "not_null_dim_customers_hist_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.7858078, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_customers_hist_valid_from.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valid_from\nfrom \"dwh\".\"gold\".\"dim_customers_hist\"\nwhere valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_from", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_customers_hist_valid_to.1f4b64bed1": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_customers_hist_valid_to", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_customers_hist_valid_to.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_customers_hist_valid_to.1f4b64bed1", "fqn": ["dbt_transform", "gold", "not_null_dim_customers_hist_valid_to"], "alias": "not_null_dim_customers_hist_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.786783, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_customers_hist_valid_to.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valid_to\nfrom \"dwh\".\"gold\".\"dim_customers_hist\"\nwhere valid_to is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_valid_to___valid_from.0ea133f63d": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_customers_hist_valid_to___valid_from", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_d_88b52cd3ae82883e26c36b95f4ef120f.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_valid_to___valid_from.0ea133f63d", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_dim_customers_hist_valid_to___valid_from"], "alias": "dbt_utils_expression_is_true_d_88b52cd3ae82883e26c36b95f4ef120f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_d_88b52cd3ae82883e26c36b95f4ef120f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures valid_to is on or after valid_from.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_d_88b52cd3ae82883e26c36b95f4ef120f"}, "created_at": 1743885923.7877262, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_88b52cd3ae82883e26c36b95f4ef120f\") }}", "language": "sql", "refs": [{"name": "dim_customers_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_d_88b52cd3ae82883e26c36b95f4ef120f.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"gold\".\"dim_customers_hist\"\n\nwhere not(valid_to >= valid_from)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.dim_customers_hist", "attached_node": "model.dbt_transform.dim_customers_hist", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= valid_from", "column_name": "valid_to", "model": "{{ get_where_subquery(ref('dim_customers_hist')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.not_null_dim_products_current_product_key.3e63d180f9": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_current_product_key", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_current_product_key.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_current_product_key.3e63d180f9", "fqn": ["dbt_transform", "gold", "not_null_dim_products_current_product_key"], "alias": "not_null_dim_products_current_product_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.790839, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_current_product_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_key\nfrom \"dwh\".\"gold\".\"dim_products_current\"\nwhere product_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.dim_products_current", "attached_node": "model.dbt_transform.dim_products_current", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_key", "model": "{{ get_where_subquery(ref('dim_products_current')) }}"}, "namespace": null}}, "test.dbt_transform.unique_dim_products_current_product_key.fc3de2b35c": {"database": "dwh", "schema": "dbt_test__audit", "name": "unique_dim_products_current_product_key", "resource_type": "test", "package_name": "dbt_transform", "path": "unique_dim_products_current_product_key.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.unique_dim_products_current_product_key.fc3de2b35c", "fqn": ["dbt_transform", "gold", "unique_dim_products_current_product_key"], "alias": "unique_dim_products_current_product_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.791797, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/unique_dim_products_current_product_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_key as unique_field,\n    count(*) as n_records\n\nfrom \"dwh\".\"gold\".\"dim_products_current\"\nwhere product_key is not null\ngroup by product_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.dim_products_current", "attached_node": "model.dbt_transform.dim_products_current", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_key", "model": "{{ get_where_subquery(ref('dim_products_current')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_products_current_product_id.c8cb27b7ea": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_current_product_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_current_product_id.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_current_product_id.c8cb27b7ea", "fqn": ["dbt_transform", "gold", "not_null_dim_products_current_product_id"], "alias": "not_null_dim_products_current_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.792722, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_current_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"dwh\".\"gold\".\"dim_products_current\"\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.dim_products_current", "attached_node": "model.dbt_transform.dim_products_current", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('dim_products_current')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_products_current_product_code.e0869b5c14": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_current_product_code", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_current_product_code.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_current_product_code.e0869b5c14", "fqn": ["dbt_transform", "gold", "not_null_dim_products_current_product_code"], "alias": "not_null_dim_products_current_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.7936451, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_current_product_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_code\nfrom \"dwh\".\"gold\".\"dim_products_current\"\nwhere product_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "models.dim_products_current", "attached_node": "model.dbt_transform.dim_products_current", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('dim_products_current')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_products_current_product_name.dd03b9e6f4": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_current_product_name", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_current_product_name.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_current_product_name.dd03b9e6f4", "fqn": ["dbt_transform", "gold", "not_null_dim_products_current_product_name"], "alias": "not_null_dim_products_current_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.7945778, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_current_product_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom \"dwh\".\"gold\".\"dim_products_current\"\nwhere product_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.dim_products_current", "attached_node": "model.dbt_transform.dim_products_current", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('dim_products_current')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_dim_products_current_product_name.0724974f29": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_dim_products_current_product_name", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_dim_products_current_product_name.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_dim_products_current_product_name.0724974f29", "fqn": ["dbt_transform", "gold", "custom_trimmed_check_dim_products_current_product_name"], "alias": "custom_trimmed_check_dim_products_current_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in product name.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.795516, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/custom_trimmed_check_dim_products_current_product_name.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"gold\".\"dim_products_current\"\nwhere product_name != trim(product_name)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.dim_products_current", "attached_node": "model.dbt_transform.dim_products_current", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('dim_products_current')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_products_current_product_cat_id.c777c239b5": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_current_product_cat_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_current_product_cat_id.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_current_product_cat_id.c777c239b5", "fqn": ["dbt_transform", "gold", "not_null_dim_products_current_product_cat_id"], "alias": "not_null_dim_products_current_product_cat_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.798012, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_current_product_cat_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_cat_id\nfrom \"dwh\".\"gold\".\"dim_products_current\"\nwhere product_cat_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_cat_id", "file_key_name": "models.dim_products_current", "attached_node": "model.dbt_transform.dim_products_current", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_cat_id", "model": "{{ get_where_subquery(ref('dim_products_current')) }}"}, "namespace": null}}, "test.dbt_transform.accepted_values_dim_products_current_product_maintenance_status__Yes__No.07bfd01f6a": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_dim_products_current_product_maintenance_status__Yes__No", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_dim_products_c_43b8f9182acbe62d7f32d270fdc76f59.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.accepted_values_dim_products_current_product_maintenance_status__Yes__No.07bfd01f6a", "fqn": ["dbt_transform", "gold", "accepted_values_dim_products_current_product_maintenance_status__Yes__No"], "alias": "accepted_values_dim_products_c_43b8f9182acbe62d7f32d270fdc76f59", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_products_c_43b8f9182acbe62d7f32d270fdc76f59", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures maintenance status is either 'Yes' or 'No'.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_dim_products_c_43b8f9182acbe62d7f32d270fdc76f59"}, "created_at": 1743885923.799003, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_products_c_43b8f9182acbe62d7f32d270fdc76f59\") }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/accepted_values_dim_products_c_43b8f9182acbe62d7f32d270fdc76f59.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        product_maintenance_status as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"gold\".\"dim_products_current\"\n    group by product_maintenance_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','No'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_maintenance_status", "file_key_name": "models.dim_products_current", "attached_node": "model.dbt_transform.dim_products_current", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "No"], "column_name": "product_maintenance_status", "model": "{{ get_where_subquery(ref('dim_products_current')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_cost___0.e6c37c46c8": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_products_current_product_cost___0", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_d_f540d1a65bb41c93fa8d2ce6a106b710.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_cost___0.e6c37c46c8", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_dim_products_current_product_cost___0"], "alias": "dbt_utils_expression_is_true_d_f540d1a65bb41c93fa8d2ce6a106b710", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_d_f540d1a65bb41c93fa8d2ce6a106b710", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures product cost is non-negative.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_d_f540d1a65bb41c93fa8d2ce6a106b710"}, "created_at": 1743885923.801688, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_f540d1a65bb41c93fa8d2ce6a106b710\") }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_d_f540d1a65bb41c93fa8d2ce6a106b710.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"gold\".\"dim_products_current\"\n\nwhere not(product_cost >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_cost", "file_key_name": "models.dim_products_current", "attached_node": "model.dbt_transform.dim_products_current", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "product_cost", "model": "{{ get_where_subquery(ref('dim_products_current')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.accepted_values_dim_products_current_product_line__Mountains__Road__Sales__Touring__n_a.e8f2855826": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_dim_products_current_product_line__Mountains__Road__Sales__Touring__n_a", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_dim_products_c_093cae277158a96e69c13b7902d3b39c.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.accepted_values_dim_products_current_product_line__Mountains__Road__Sales__Touring__n_a.e8f2855826", "fqn": ["dbt_transform", "gold", "accepted_values_dim_products_current_product_line__Mountains__Road__Sales__Touring__n_a"], "alias": "accepted_values_dim_products_c_093cae277158a96e69c13b7902d3b39c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_products_c_093cae277158a96e69c13b7902d3b39c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures product line matches defined categories.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_dim_products_c_093cae277158a96e69c13b7902d3b39c"}, "created_at": 1743885923.804348, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_products_c_093cae277158a96e69c13b7902d3b39c\") }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/accepted_values_dim_products_c_093cae277158a96e69c13b7902d3b39c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        product_line as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"gold\".\"dim_products_current\"\n    group by product_line\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Mountains','Road','Sales','Touring','n/a'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_line", "file_key_name": "models.dim_products_current", "attached_node": "model.dbt_transform.dim_products_current", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Mountains", "Road", "Sales", "Touring", "n/a"], "column_name": "product_line", "model": "{{ get_where_subquery(ref('dim_products_current')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_products_current_product_start_date.ca24d0e0fe": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_current_product_start_date", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_current_product_start_date.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_current_product_start_date.ca24d0e0fe", "fqn": ["dbt_transform", "gold", "not_null_dim_products_current_product_start_date"], "alias": "not_null_dim_products_current_product_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.807053, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_current_product_start_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_start_date\nfrom \"dwh\".\"gold\".\"dim_products_current\"\nwhere product_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_start_date", "file_key_name": "models.dim_products_current", "attached_node": "model.dbt_transform.dim_products_current", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_start_date", "model": "{{ get_where_subquery(ref('dim_products_current')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_start_date___CURRENT_DATE.2300366280": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_products_current_product_start_date___CURRENT_DATE", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_d_5e0b59edef7fd4dea26e008118cb2bf0.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_start_date___CURRENT_DATE.2300366280", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_dim_products_current_product_start_date___CURRENT_DATE"], "alias": "dbt_utils_expression_is_true_d_5e0b59edef7fd4dea26e008118cb2bf0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_d_5e0b59edef7fd4dea26e008118cb2bf0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures start date is not in the future.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_d_5e0b59edef7fd4dea26e008118cb2bf0"}, "created_at": 1743885923.808018, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_5e0b59edef7fd4dea26e008118cb2bf0\") }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_d_5e0b59edef7fd4dea26e008118cb2bf0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"gold\".\"dim_products_current\"\n\nwhere not(product_start_date <= CURRENT_DATE)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_start_date", "file_key_name": "models.dim_products_current", "attached_node": "model.dbt_transform.dim_products_current", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= CURRENT_DATE", "column_name": "product_start_date", "model": "{{ get_where_subquery(ref('dim_products_current')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.not_null_dim_products_current_product_end_date.929c3a8649": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_current_product_end_date", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_current_product_end_date.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_current_product_end_date.929c3a8649", "fqn": ["dbt_transform", "gold", "not_null_dim_products_current_product_end_date"], "alias": "not_null_dim_products_current_product_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.811234, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_current_product_end_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_end_date\nfrom \"dwh\".\"gold\".\"dim_products_current\"\nwhere product_end_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_end_date", "file_key_name": "models.dim_products_current", "attached_node": "model.dbt_transform.dim_products_current", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_end_date", "model": "{{ get_where_subquery(ref('dim_products_current')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_end_date___product_start_date.451cdfe750": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_products_current_product_end_date___product_start_date", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_d_625d905936acaf6c1923b0a03b832ddb.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_end_date___product_start_date.451cdfe750", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_dim_products_current_product_end_date___product_start_date"], "alias": "dbt_utils_expression_is_true_d_625d905936acaf6c1923b0a03b832ddb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_d_625d905936acaf6c1923b0a03b832ddb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures end date is on or after start date.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_d_625d905936acaf6c1923b0a03b832ddb"}, "created_at": 1743885923.812205, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_625d905936acaf6c1923b0a03b832ddb\") }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_d_625d905936acaf6c1923b0a03b832ddb.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"gold\".\"dim_products_current\"\n\nwhere not(product_end_date >= product_start_date)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_end_date", "file_key_name": "models.dim_products_current", "attached_node": "model.dbt_transform.dim_products_current", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= product_start_date", "column_name": "product_end_date", "model": "{{ get_where_subquery(ref('dim_products_current')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.not_null_dim_products_hist_product_key.5c97ee0e15": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_hist_product_key", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_hist_product_key.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_hist_product_key.5c97ee0e15", "fqn": ["dbt_transform", "gold", "not_null_dim_products_hist_product_key"], "alias": "not_null_dim_products_hist_product_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.815069, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_hist_product_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_key\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\nwhere product_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_key", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": null}}, "test.dbt_transform.unique_dim_products_hist_product_key.a6021809c2": {"database": "dwh", "schema": "dbt_test__audit", "name": "unique_dim_products_hist_product_key", "resource_type": "test", "package_name": "dbt_transform", "path": "unique_dim_products_hist_product_key.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.unique_dim_products_hist_product_key.a6021809c2", "fqn": ["dbt_transform", "gold", "unique_dim_products_hist_product_key"], "alias": "unique_dim_products_hist_product_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.816159, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/unique_dim_products_hist_product_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_key as unique_field,\n    count(*) as n_records\n\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\nwhere product_key is not null\ngroup by product_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_key", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_products_hist_product_id.6a326106a1": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_hist_product_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_hist_product_id.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_hist_product_id.6a326106a1", "fqn": ["dbt_transform", "gold", "not_null_dim_products_hist_product_id"], "alias": "not_null_dim_products_hist_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.817096, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_hist_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_products_hist_product_code.c6aaeb0242": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_hist_product_code", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_hist_product_code.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_hist_product_code.c6aaeb0242", "fqn": ["dbt_transform", "gold", "not_null_dim_products_hist_product_code"], "alias": "not_null_dim_products_hist_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.818034, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_hist_product_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_code\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\nwhere product_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_products_hist_product_name.d9be5ad187": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_hist_product_name", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_hist_product_name.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_hist_product_name.d9be5ad187", "fqn": ["dbt_transform", "gold", "not_null_dim_products_hist_product_name"], "alias": "not_null_dim_products_hist_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.8189619, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_hist_product_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\nwhere product_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": null}}, "test.dbt_transform.custom_trimmed_check_dim_products_hist_product_name.bf225459e3": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_dim_products_hist_product_name", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_dim_products_hist_product_name.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_dim_products_hist_product_name.bf225459e3", "fqn": ["dbt_transform", "gold", "custom_trimmed_check_dim_products_hist_product_name"], "alias": "custom_trimmed_check_dim_products_hist_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in product name.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.8198762, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/custom_trimmed_check_dim_products_hist_product_name.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\nwhere product_name != trim(product_name)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_products_hist_product_cat_id.d281f01d43": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_hist_product_cat_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_hist_product_cat_id.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_hist_product_cat_id.d281f01d43", "fqn": ["dbt_transform", "gold", "not_null_dim_products_hist_product_cat_id"], "alias": "not_null_dim_products_hist_product_cat_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.822339, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_hist_product_cat_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_cat_id\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\nwhere product_cat_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_cat_id", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_cat_id", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": null}}, "test.dbt_transform.accepted_values_dim_products_hist_product_maintenance_status__Yes__No.af5c46a5ea": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_dim_products_hist_product_maintenance_status__Yes__No", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_dim_products_h_d0f07bf012230766b550d89929271765.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.accepted_values_dim_products_hist_product_maintenance_status__Yes__No.af5c46a5ea", "fqn": ["dbt_transform", "gold", "accepted_values_dim_products_hist_product_maintenance_status__Yes__No"], "alias": "accepted_values_dim_products_h_d0f07bf012230766b550d89929271765", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_products_h_d0f07bf012230766b550d89929271765", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures maintenance status is either 'Yes' or 'No'.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_dim_products_h_d0f07bf012230766b550d89929271765"}, "created_at": 1743885923.823308, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_products_h_d0f07bf012230766b550d89929271765\") }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/accepted_values_dim_products_h_d0f07bf012230766b550d89929271765.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        product_maintenance_status as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"gold\".\"dim_products_hist\"\n    group by product_maintenance_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','No'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_maintenance_status", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "No"], "column_name": "product_maintenance_status", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_cost___0.17db2580f3": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_products_hist_product_cost___0", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_dim_products_hist_product_cost___0.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_cost___0.17db2580f3", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_dim_products_hist_product_cost___0"], "alias": "dbt_utils_expression_is_true_dim_products_hist_product_cost___0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures product cost is non-negative.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.825834, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_dim_products_hist_product_cost___0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\n\nwhere not(product_cost >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_cost", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "product_cost", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.accepted_values_dim_products_hist_product_line__Mountains__Road__Sales__Touring__n_a.a57388378b": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_dim_products_hist_product_line__Mountains__Road__Sales__Touring__n_a", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_dim_products_h_d4697f3776b7ba67ca26080fa88f111b.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.accepted_values_dim_products_hist_product_line__Mountains__Road__Sales__Touring__n_a.a57388378b", "fqn": ["dbt_transform", "gold", "accepted_values_dim_products_hist_product_line__Mountains__Road__Sales__Touring__n_a"], "alias": "accepted_values_dim_products_h_d4697f3776b7ba67ca26080fa88f111b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_dim_products_h_d4697f3776b7ba67ca26080fa88f111b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures product line matches defined categories.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_dim_products_h_d4697f3776b7ba67ca26080fa88f111b"}, "created_at": 1743885923.828446, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_dim_products_h_d4697f3776b7ba67ca26080fa88f111b\") }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/accepted_values_dim_products_h_d4697f3776b7ba67ca26080fa88f111b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        product_line as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"gold\".\"dim_products_hist\"\n    group by product_line\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Mountains','Road','Sales','Touring','n/a'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_line", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Mountains", "Road", "Sales", "Touring", "n/a"], "column_name": "product_line", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_products_hist_product_start_date.54f355684a": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_hist_product_start_date", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_hist_product_start_date.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_hist_product_start_date.54f355684a", "fqn": ["dbt_transform", "gold", "not_null_dim_products_hist_product_start_date"], "alias": "not_null_dim_products_hist_product_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.831118, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_hist_product_start_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_start_date\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\nwhere product_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_start_date", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_start_date", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_start_date___CURRENT_DATE.dedbbf6f62": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_products_hist_product_start_date___CURRENT_DATE", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_d_771bc942c296970dc996c8c8c0ee59ed.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_start_date___CURRENT_DATE.dedbbf6f62", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_dim_products_hist_product_start_date___CURRENT_DATE"], "alias": "dbt_utils_expression_is_true_d_771bc942c296970dc996c8c8c0ee59ed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_d_771bc942c296970dc996c8c8c0ee59ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures start date is not in the future.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_d_771bc942c296970dc996c8c8c0ee59ed"}, "created_at": 1743885923.832093, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_771bc942c296970dc996c8c8c0ee59ed\") }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_d_771bc942c296970dc996c8c8c0ee59ed.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\n\nwhere not(product_start_date <= CURRENT_DATE)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_start_date", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= CURRENT_DATE", "column_name": "product_start_date", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.not_null_dim_products_hist_product_end_date.a81a2dc90d": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_hist_product_end_date", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_hist_product_end_date.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_hist_product_end_date.a81a2dc90d", "fqn": ["dbt_transform", "gold", "not_null_dim_products_hist_product_end_date"], "alias": "not_null_dim_products_hist_product_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.8346932, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_hist_product_end_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_end_date\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\nwhere product_end_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_end_date", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_end_date", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_end_date___product_start_date.939b927a80": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_products_hist_product_end_date___product_start_date", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_d_17b8d4a78c198fdd1a59807ce9ae15c3.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_end_date___product_start_date.939b927a80", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_dim_products_hist_product_end_date___product_start_date"], "alias": "dbt_utils_expression_is_true_d_17b8d4a78c198fdd1a59807ce9ae15c3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_d_17b8d4a78c198fdd1a59807ce9ae15c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures end date is on or after start date.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_d_17b8d4a78c198fdd1a59807ce9ae15c3"}, "created_at": 1743885923.835833, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_17b8d4a78c198fdd1a59807ce9ae15c3\") }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_d_17b8d4a78c198fdd1a59807ce9ae15c3.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\n\nwhere not(product_end_date >= product_start_date)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_end_date", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= product_start_date", "column_name": "product_end_date", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.not_null_dim_products_hist_valid_from.3aa7d58fff": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_hist_valid_from", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_hist_valid_from.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_hist_valid_from.3aa7d58fff", "fqn": ["dbt_transform", "gold", "not_null_dim_products_hist_valid_from"], "alias": "not_null_dim_products_hist_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.838447, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_hist_valid_from.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valid_from\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\nwhere valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_from", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_from", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_dim_products_hist_valid_to.8dcbbd24da": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_dim_products_hist_valid_to", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_dim_products_hist_valid_to.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_dim_products_hist_valid_to.8dcbbd24da", "fqn": ["dbt_transform", "gold", "not_null_dim_products_hist_valid_to"], "alias": "not_null_dim_products_hist_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.839395, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_dim_products_hist_valid_to.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect valid_to\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\nwhere valid_to is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "valid_to", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_valid_to___valid_from.375df757f5": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_dim_products_hist_valid_to___valid_from", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_d_3eed0226a4a642e5d1ee9d086e201268.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_valid_to___valid_from.375df757f5", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_dim_products_hist_valid_to___valid_from"], "alias": "dbt_utils_expression_is_true_d_3eed0226a4a642e5d1ee9d086e201268", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_d_3eed0226a4a642e5d1ee9d086e201268", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures valid_to is on or after valid_from.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_d_3eed0226a4a642e5d1ee9d086e201268"}, "created_at": 1743885923.8403342, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_d_3eed0226a4a642e5d1ee9d086e201268\") }}", "language": "sql", "refs": [{"name": "dim_products_hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_hist"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_d_3eed0226a4a642e5d1ee9d086e201268.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"gold\".\"dim_products_hist\"\n\nwhere not(valid_to >= valid_from)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "valid_to", "file_key_name": "models.dim_products_hist", "attached_node": "model.dbt_transform.dim_products_hist", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= valid_from", "column_name": "valid_to", "model": "{{ get_where_subquery(ref('dim_products_hist')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.unique_fact_sales_sales_details_key.5f8b370051": {"database": "dwh", "schema": "dbt_test__audit", "name": "unique_fact_sales_sales_details_key", "resource_type": "test", "package_name": "dbt_transform", "path": "unique_fact_sales_sales_details_key.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.unique_fact_sales_sales_details_key.5f8b370051", "fqn": ["dbt_transform", "gold", "unique_fact_sales_sales_details_key"], "alias": "unique_fact_sales_sales_details_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.843115, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/unique_fact_sales_sales_details_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sales_details_key as unique_field,\n    count(*) as n_records\n\nfrom \"dwh\".\"gold\".\"fact_sales\"\nwhere sales_details_key is not null\ngroup by sales_details_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_details_key", "file_key_name": "models.fact_sales", "attached_node": "model.dbt_transform.fact_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sales_details_key", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_fact_sales_sales_details_key.0281f867b8": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_fact_sales_sales_details_key", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_fact_sales_sales_details_key.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_fact_sales_sales_details_key.0281f867b8", "fqn": ["dbt_transform", "gold", "not_null_fact_sales_sales_details_key"], "alias": "not_null_fact_sales_sales_details_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.8440619, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_fact_sales_sales_details_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_details_key\nfrom \"dwh\".\"gold\".\"fact_sales\"\nwhere sales_details_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_details_key", "file_key_name": "models.fact_sales", "attached_node": "model.dbt_transform.fact_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_details_key", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_fact_sales_sales_order_number.804723385c": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_fact_sales_sales_order_number", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_fact_sales_sales_order_number.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.not_null_fact_sales_sales_order_number.804723385c", "fqn": ["dbt_transform", "gold", "not_null_fact_sales_sales_order_number"], "alias": "not_null_fact_sales_sales_order_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.845004, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fact_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/not_null_fact_sales_sales_order_number.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sales_order_number\nfrom \"dwh\".\"gold\".\"fact_sales\"\nwhere sales_order_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_order_number", "file_key_name": "models.fact_sales", "attached_node": "model.dbt_transform.fact_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_order_number", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}}, "test.dbt_transform.relationships_fact_sales_product_key__product_key__ref_dim_products_current_.004155aa94": {"database": "dwh", "schema": "dbt_test__audit", "name": "relationships_fact_sales_product_key__product_key__ref_dim_products_current_", "resource_type": "test", "package_name": "dbt_transform", "path": "relationships_fact_sales_a3354c0feafe8f12a3d91d11b2ef6a8a.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.relationships_fact_sales_product_key__product_key__ref_dim_products_current_.004155aa94", "fqn": ["dbt_transform", "gold", "relationships_fact_sales_product_key__product_key__ref_dim_products_current_"], "alias": "relationships_fact_sales_a3354c0feafe8f12a3d91d11b2ef6a8a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_sales_a3354c0feafe8f12a3d91d11b2ef6a8a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures every sales record is linked to a valid product.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fact_sales_a3354c0feafe8f12a3d91d11b2ef6a8a"}, "created_at": 1743885923.846091, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_sales_a3354c0feafe8f12a3d91d11b2ef6a8a\") }}", "language": "sql", "refs": [{"name": "dim_products_current", "package": null, "version": null}, {"name": "fact_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_products_current", "model.dbt_transform.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/relationships_fact_sales_a3354c0feafe8f12a3d91d11b2ef6a8a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_key as from_field\n    from \"dwh\".\"gold\".\"fact_sales\"\n    where product_key is not null\n),\n\nparent as (\n    select product_key as to_field\n    from \"dwh\".\"gold\".\"dim_products_current\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.fact_sales", "attached_node": "model.dbt_transform.fact_sales", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_products_current')", "field": "product_key", "column_name": "product_key", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}}, "test.dbt_transform.relationships_fact_sales_customer_key__customer_key__ref_dim_customers_current_.7f8b6f7f32": {"database": "dwh", "schema": "dbt_test__audit", "name": "relationships_fact_sales_customer_key__customer_key__ref_dim_customers_current_", "resource_type": "test", "package_name": "dbt_transform", "path": "relationships_fact_sales_8cb4a8492a6d7530de624154484d1e6e.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.relationships_fact_sales_customer_key__customer_key__ref_dim_customers_current_.7f8b6f7f32", "fqn": ["dbt_transform", "gold", "relationships_fact_sales_customer_key__customer_key__ref_dim_customers_current_"], "alias": "relationships_fact_sales_8cb4a8492a6d7530de624154484d1e6e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_fact_sales_8cb4a8492a6d7530de624154484d1e6e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures every sales record is linked to a valid customer.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_fact_sales_8cb4a8492a6d7530de624154484d1e6e"}, "created_at": 1743885923.849113, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_fact_sales_8cb4a8492a6d7530de624154484d1e6e\") }}", "language": "sql", "refs": [{"name": "dim_customers_current", "package": null, "version": null}, {"name": "fact_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.dim_customers_current", "model.dbt_transform.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/relationships_fact_sales_8cb4a8492a6d7530de624154484d1e6e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_key as from_field\n    from \"dwh\".\"gold\".\"fact_sales\"\n    where customer_key is not null\n),\n\nparent as (\n    select customer_key as to_field\n    from \"dwh\".\"gold\".\"dim_customers_current\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.fact_sales", "attached_node": "model.dbt_transform.fact_sales", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('dim_customers_current')", "field": "customer_key", "column_name": "customer_key", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_amount___0.df4e090748": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_fact_sales_sales_amount___0", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_fact_sales_sales_amount___0.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_amount___0.df4e090748", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_fact_sales_sales_amount___0"], "alias": "dbt_utils_expression_is_true_fact_sales_sales_amount___0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": "sales_amount IS NOT NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures sales amount is non-negative.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "where": "sales_amount IS NOT NULL"}, "created_at": 1743885923.8524742, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",where=\"sales_amount IS NOT NULL\") }}", "language": "sql", "refs": [{"name": "fact_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_fact_sales_sales_amount___0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dwh\".\"gold\".\"fact_sales\" where sales_amount IS NOT NULL) dbt_subquery\n\nwhere not(sales_amount  >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_amount", "file_key_name": "models.fact_sales", "attached_node": "model.dbt_transform.fact_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": " >= 0", "column_name": "sales_amount", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_quantity___0.478922c950": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_fact_sales_sales_quantity___0", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_fact_sales_sales_quantity___0.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_quantity___0.478922c950", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_fact_sales_sales_quantity___0"], "alias": "dbt_utils_expression_is_true_fact_sales_sales_quantity___0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": "sales_quantity IS NOT NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures at least one unit is sold.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "where": "sales_quantity IS NOT NULL"}, "created_at": 1743885923.855787, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",where=\"sales_quantity IS NOT NULL\") }}", "language": "sql", "refs": [{"name": "fact_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_fact_sales_sales_quantity___0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dwh\".\"gold\".\"fact_sales\" where sales_quantity IS NOT NULL) dbt_subquery\n\nwhere not(sales_quantity >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_quantity", "file_key_name": "models.fact_sales", "attached_node": "model.dbt_transform.fact_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "sales_quantity", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_order_date___CURRENT_DATE.89a8a9abbc": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_fact_sales_sales_order_date___CURRENT_DATE", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_f_6a60ff0d44278beca7e721d13a980eac.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_order_date___CURRENT_DATE.89a8a9abbc", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_fact_sales_sales_order_date___CURRENT_DATE"], "alias": "dbt_utils_expression_is_true_f_6a60ff0d44278beca7e721d13a980eac", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_f_6a60ff0d44278beca7e721d13a980eac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures sales order date is not in the future.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_f_6a60ff0d44278beca7e721d13a980eac"}, "created_at": 1743885923.858423, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_f_6a60ff0d44278beca7e721d13a980eac\") }}", "language": "sql", "refs": [{"name": "fact_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_f_6a60ff0d44278beca7e721d13a980eac.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"gold\".\"fact_sales\"\n\nwhere not(sales_order_date <= CURRENT_DATE)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_order_date", "file_key_name": "models.fact_sales", "attached_node": "model.dbt_transform.fact_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "<= CURRENT_DATE", "column_name": "sales_order_date", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_shipping_date___sales_order_date.2343579795": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_fact_sales_sales_shipping_date___sales_order_date", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_f_a9cee45fe86b4eabe81ea3e2d09c9082.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_shipping_date___sales_order_date.2343579795", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_fact_sales_sales_shipping_date___sales_order_date"], "alias": "dbt_utils_expression_is_true_f_a9cee45fe86b4eabe81ea3e2d09c9082", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_f_a9cee45fe86b4eabe81ea3e2d09c9082", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": "sales_shipping_date IS NOT NULL AND sales_order_date IS NOT NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures shipping date is on or after order date.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "where": "sales_shipping_date IS NOT NULL AND sales_order_date IS NOT NULL", "alias": "dbt_utils_expression_is_true_f_a9cee45fe86b4eabe81ea3e2d09c9082"}, "created_at": 1743885923.8614058, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",where=\"sales_shipping_date IS NOT NULL AND sales_order_date IS NOT NULL\",alias=\"dbt_utils_expression_is_true_f_a9cee45fe86b4eabe81ea3e2d09c9082\") }}", "language": "sql", "refs": [{"name": "fact_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_f_a9cee45fe86b4eabe81ea3e2d09c9082.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dwh\".\"gold\".\"fact_sales\" where sales_shipping_date IS NOT NULL AND sales_order_date IS NOT NULL) dbt_subquery\n\nwhere not(sales_shipping_date >= sales_order_date)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_shipping_date", "file_key_name": "models.fact_sales", "attached_node": "model.dbt_transform.fact_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= sales_order_date", "column_name": "sales_shipping_date", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_due_date___sales_order_date.739676ef8b": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_fact_sales_sales_due_date___sales_order_date", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_f_af5eea64f3946d0eb2c6d76a41f20139.sql", "original_file_path": "models/gold/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_due_date___sales_order_date.739676ef8b", "fqn": ["dbt_transform", "gold", "dbt_utils_expression_is_true_fact_sales_sales_due_date___sales_order_date"], "alias": "dbt_utils_expression_is_true_f_af5eea64f3946d0eb2c6d76a41f20139", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_f_af5eea64f3946d0eb2c6d76a41f20139", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": "sales_due_date IS NOT NULL AND sales_order_date IS NOT NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures due date is on or after order date.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "where": "sales_due_date IS NOT NULL AND sales_order_date IS NOT NULL", "alias": "dbt_utils_expression_is_true_f_af5eea64f3946d0eb2c6d76a41f20139"}, "created_at": 1743885923.864749, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",where=\"sales_due_date IS NOT NULL AND sales_order_date IS NOT NULL\",alias=\"dbt_utils_expression_is_true_f_af5eea64f3946d0eb2c6d76a41f20139\") }}", "language": "sql", "refs": [{"name": "fact_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.fact_sales"]}, "compiled_path": "target/compiled/dbt_transform/models/gold/schema.yml/dbt_utils_expression_is_true_f_af5eea64f3946d0eb2c6d76a41f20139.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dwh\".\"gold\".\"fact_sales\" where sales_due_date IS NOT NULL AND sales_order_date IS NOT NULL) dbt_subquery\n\nwhere not(sales_due_date >= sales_order_date)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "sales_due_date", "file_key_name": "models.fact_sales", "attached_node": "model.dbt_transform.fact_sales", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= sales_order_date", "column_name": "sales_due_date", "model": "{{ get_where_subquery(ref('fact_sales')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.relationships_customers_snapshot_cst_code__cid__ref_erp_cust_az12_.5bf61612cf": {"database": "dwh", "schema": "dbt_test__audit", "name": "relationships_customers_snapshot_cst_code__cid__ref_erp_cust_az12_", "resource_type": "test", "package_name": "dbt_transform", "path": "relationships_customers_snapsh_332638e49aed66d0365fcd91db5fdd28.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.relationships_customers_snapshot_cst_code__cid__ref_erp_cust_az12_.5bf61612cf", "fqn": ["dbt_transform", "relationships_customers_snapshot_cst_code__cid__ref_erp_cust_az12_"], "alias": "relationships_customers_snapsh_332638e49aed66d0365fcd91db5fdd28", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_customers_snapsh_332638e49aed66d0365fcd91db5fdd28", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_customers_snapsh_332638e49aed66d0365fcd91db5fdd28"}, "created_at": 1743885923.892145, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_customers_snapsh_332638e49aed66d0365fcd91db5fdd28\") }}", "language": "sql", "refs": [{"name": "erp_cust_az12", "package": null, "version": null}, {"name": "customers_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_cust_az12", "snapshot.dbt_transform.customers_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/relationships_customers_snapsh_332638e49aed66d0365fcd91db5fdd28.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select cst_code as from_field\n    from \"dwh\".\"snapshots\".\"customers_snapshot\"\n    where cst_code is not null\n),\n\nparent as (\n    select cid as to_field\n    from \"dwh\".\"silver\".\"erp_cust_az12\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_code", "file_key_name": "snapshots.customers_snapshot", "attached_node": "snapshot.dbt_transform.customers_snapshot", "test_metadata": {"name": "relationships", "kwargs": {"field": "cid", "to": "ref('erp_cust_az12')", "column_name": "cst_code", "model": "{{ get_where_subquery(ref('customers_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.relationships_customers_snapshot_cst_code__cid__ref_erp_loc_a101_.7922ee1486": {"database": "dwh", "schema": "dbt_test__audit", "name": "relationships_customers_snapshot_cst_code__cid__ref_erp_loc_a101_", "resource_type": "test", "package_name": "dbt_transform", "path": "relationships_customers_snapsh_2c983af9be584f79f392c2ab8d177d29.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.relationships_customers_snapshot_cst_code__cid__ref_erp_loc_a101_.7922ee1486", "fqn": ["dbt_transform", "relationships_customers_snapshot_cst_code__cid__ref_erp_loc_a101_"], "alias": "relationships_customers_snapsh_2c983af9be584f79f392c2ab8d177d29", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_customers_snapsh_2c983af9be584f79f392c2ab8d177d29", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_customers_snapsh_2c983af9be584f79f392c2ab8d177d29"}, "created_at": 1743885923.895372, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_customers_snapsh_2c983af9be584f79f392c2ab8d177d29\") }}", "language": "sql", "refs": [{"name": "erp_loc_a101", "package": null, "version": null}, {"name": "customers_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_loc_a101", "snapshot.dbt_transform.customers_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/relationships_customers_snapsh_2c983af9be584f79f392c2ab8d177d29.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select cst_code as from_field\n    from \"dwh\".\"snapshots\".\"customers_snapshot\"\n    where cst_code is not null\n),\n\nparent as (\n    select cid as to_field\n    from \"dwh\".\"silver\".\"erp_loc_a101\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cst_code", "file_key_name": "snapshots.customers_snapshot", "attached_node": "snapshot.dbt_transform.customers_snapshot", "test_metadata": {"name": "relationships", "kwargs": {"field": "cid", "to": "ref('erp_loc_a101')", "column_name": "cst_code", "model": "{{ get_where_subquery(ref('customers_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_customers_snapshot_dbt_valid_from.9ebd11d9e2": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_customers_snapshot_dbt_valid_from", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_customers_snapshot_dbt_valid_from.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.not_null_customers_snapshot_dbt_valid_from.9ebd11d9e2", "fqn": ["dbt_transform", "not_null_customers_snapshot_dbt_valid_from"], "alias": "not_null_customers_snapshot_dbt_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.8984928, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customers_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["snapshot.dbt_transform.customers_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/not_null_customers_snapshot_dbt_valid_from.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dbt_valid_from\nfrom \"dwh\".\"snapshots\".\"customers_snapshot\"\nwhere dbt_valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_from", "file_key_name": "snapshots.customers_snapshot", "attached_node": "snapshot.dbt_transform.customers_snapshot", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_from", "model": "{{ get_where_subquery(ref('customers_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_customers_snapshot_dbt_valid_to.e956fef5d5": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_customers_snapshot_dbt_valid_to", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_customers_snapshot_dbt_valid_to.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.not_null_customers_snapshot_dbt_valid_to.e956fef5d5", "fqn": ["dbt_transform", "not_null_customers_snapshot_dbt_valid_to"], "alias": "not_null_customers_snapshot_dbt_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.899445, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customers_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["snapshot.dbt_transform.customers_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/not_null_customers_snapshot_dbt_valid_to.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dbt_valid_to\nfrom \"dwh\".\"snapshots\".\"customers_snapshot\"\nwhere dbt_valid_to is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_to", "file_key_name": "snapshots.customers_snapshot", "attached_node": "snapshot.dbt_transform.customers_snapshot", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_to", "model": "{{ get_where_subquery(ref('customers_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_customers_snapshot_dbt_updated_at.1b87573d98": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_customers_snapshot_dbt_updated_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_customers_snapshot_dbt_updated_at.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.not_null_customers_snapshot_dbt_updated_at.1b87573d98", "fqn": ["dbt_transform", "not_null_customers_snapshot_dbt_updated_at"], "alias": "not_null_customers_snapshot_dbt_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.900383, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customers_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["snapshot.dbt_transform.customers_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/not_null_customers_snapshot_dbt_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dbt_updated_at\nfrom \"dwh\".\"snapshots\".\"customers_snapshot\"\nwhere dbt_updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_updated_at", "file_key_name": "snapshots.customers_snapshot", "attached_node": "snapshot.dbt_transform.customers_snapshot", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_updated_at", "model": "{{ get_where_subquery(ref('customers_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_customers_snapshot_dbt_scd_id.d7c60e61aa": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_customers_snapshot_dbt_scd_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_customers_snapshot_dbt_scd_id.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.not_null_customers_snapshot_dbt_scd_id.d7c60e61aa", "fqn": ["dbt_transform", "not_null_customers_snapshot_dbt_scd_id"], "alias": "not_null_customers_snapshot_dbt_scd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.9013262, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customers_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["snapshot.dbt_transform.customers_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/not_null_customers_snapshot_dbt_scd_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dbt_scd_id\nfrom \"dwh\".\"snapshots\".\"customers_snapshot\"\nwhere dbt_scd_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_scd_id", "file_key_name": "snapshots.customers_snapshot", "attached_node": "snapshot.dbt_transform.customers_snapshot", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_scd_id", "model": "{{ get_where_subquery(ref('customers_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.unique_customers_snapshot_dbt_scd_id.bae3323096": {"database": "dwh", "schema": "dbt_test__audit", "name": "unique_customers_snapshot_dbt_scd_id", "resource_type": "test", "package_name": "dbt_transform", "path": "unique_customers_snapshot_dbt_scd_id.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.unique_customers_snapshot_dbt_scd_id.bae3323096", "fqn": ["dbt_transform", "unique_customers_snapshot_dbt_scd_id"], "alias": "unique_customers_snapshot_dbt_scd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.902248, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "customers_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["snapshot.dbt_transform.customers_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/unique_customers_snapshot_dbt_scd_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    dbt_scd_id as unique_field,\n    count(*) as n_records\n\nfrom \"dwh\".\"snapshots\".\"customers_snapshot\"\nwhere dbt_scd_id is not null\ngroup by dbt_scd_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_scd_id", "file_key_name": "snapshots.customers_snapshot", "attached_node": "snapshot.dbt_transform.customers_snapshot", "test_metadata": {"name": "unique", "kwargs": {"column_name": "dbt_scd_id", "model": "{{ get_where_subquery(ref('customers_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.relationships_products_snapshot_cat_id__id__ref_erp_px_cat_g1v2_.cc6c4d367a": {"database": "dwh", "schema": "dbt_test__audit", "name": "relationships_products_snapshot_cat_id__id__ref_erp_px_cat_g1v2_", "resource_type": "test", "package_name": "dbt_transform", "path": "relationships_products_snapsho_fbb3cf81dd9ba292a8dcdceef51a182c.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.relationships_products_snapshot_cat_id__id__ref_erp_px_cat_g1v2_.cc6c4d367a", "fqn": ["dbt_transform", "relationships_products_snapshot_cat_id__id__ref_erp_px_cat_g1v2_"], "alias": "relationships_products_snapsho_fbb3cf81dd9ba292a8dcdceef51a182c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_products_snapsho_fbb3cf81dd9ba292a8dcdceef51a182c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"severity": "warn", "alias": "relationships_products_snapsho_fbb3cf81dd9ba292a8dcdceef51a182c"}, "created_at": 1743885923.9032168, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",alias=\"relationships_products_snapsho_fbb3cf81dd9ba292a8dcdceef51a182c\") }}", "language": "sql", "refs": [{"name": "erp_px_cat_g1v2", "package": null, "version": null}, {"name": "products_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_transform.erp_px_cat_g1v2", "snapshot.dbt_transform.products_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/relationships_products_snapsho_fbb3cf81dd9ba292a8dcdceef51a182c.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select cat_id as from_field\n    from \"dwh\".\"snapshots\".\"products_snapshot\"\n    where cat_id is not null\n),\n\nparent as (\n    select id as to_field\n    from \"dwh\".\"silver\".\"erp_px_cat_g1v2\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "cat_id", "file_key_name": "snapshots.products_snapshot", "attached_node": "snapshot.dbt_transform.products_snapshot", "test_metadata": {"name": "relationships", "kwargs": {"field": "id", "to": "ref('erp_px_cat_g1v2')", "column_name": "cat_id", "model": "{{ get_where_subquery(ref('products_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_products_snapshot_prd_cost.4ac4c0c981": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_products_snapshot_prd_cost", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_products_snapshot_prd_cost.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.not_null_products_snapshot_prd_cost.4ac4c0c981", "fqn": ["dbt_transform", "not_null_products_snapshot_prd_cost"], "alias": "not_null_products_snapshot_prd_cost", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.906364, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "products_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["snapshot.dbt_transform.products_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/not_null_products_snapshot_prd_cost.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect prd_cost\nfrom \"dwh\".\"snapshots\".\"products_snapshot\"\nwhere prd_cost is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_cost", "file_key_name": "snapshots.products_snapshot", "attached_node": "snapshot.dbt_transform.products_snapshot", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "prd_cost", "model": "{{ get_where_subquery(ref('products_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.dbt_utils_expression_is_true_products_snapshot_prd_cost___0.fb10396e3b": {"database": "dwh", "schema": "dbt_test__audit", "name": "dbt_utils_expression_is_true_products_snapshot_prd_cost___0", "resource_type": "test", "package_name": "dbt_transform", "path": "dbt_utils_expression_is_true_products_snapshot_prd_cost___0.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.dbt_utils_expression_is_true_products_snapshot_prd_cost___0.fb10396e3b", "fqn": ["dbt_transform", "dbt_utils_expression_is_true_products_snapshot_prd_cost___0"], "alias": "dbt_utils_expression_is_true_products_snapshot_prd_cost___0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.907305, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "products_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["snapshot.dbt_transform.products_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/dbt_utils_expression_is_true_products_snapshot_prd_cost___0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dwh\".\"snapshots\".\"products_snapshot\"\n\nwhere not(prd_cost >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "prd_cost", "file_key_name": "snapshots.products_snapshot", "attached_node": "snapshot.dbt_transform.products_snapshot", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "prd_cost", "model": "{{ get_where_subquery(ref('products_snapshot')) }}"}, "namespace": "dbt_utils"}}, "test.dbt_transform.custom_trimmed_check_products_snapshot_erp_maintenance_status.837fe8b155": {"database": "dwh", "schema": "dbt_test__audit", "name": "custom_trimmed_check_products_snapshot_erp_maintenance_status", "resource_type": "test", "package_name": "dbt_transform", "path": "custom_trimmed_check_products_snapshot_erp_maintenance_status.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.custom_trimmed_check_products_snapshot_erp_maintenance_status.837fe8b155", "fqn": ["dbt_transform", "custom_trimmed_check_products_snapshot_erp_maintenance_status"], "alias": "custom_trimmed_check_products_snapshot_erp_maintenance_status", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures no leading or trailing spaces in maintenance status.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.909895, "relation_name": null, "raw_code": "{{ test_custom_trimmed_check(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "products_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_transform.test_custom_trimmed_check", "macro.dbt.get_where_subquery"], "nodes": ["snapshot.dbt_transform.products_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/custom_trimmed_check_products_snapshot_erp_maintenance_status.sql", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dwh\".\"snapshots\".\"products_snapshot\"\nwhere erp_maintenance_status != trim(erp_maintenance_status)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "erp_maintenance_status", "file_key_name": "snapshots.products_snapshot", "attached_node": "snapshot.dbt_transform.products_snapshot", "test_metadata": {"name": "custom_trimmed_check", "kwargs": {"column_name": "erp_maintenance_status", "model": "{{ get_where_subquery(ref('products_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.accepted_values_products_snapshot_erp_maintenance_status__Yes__No.8d1595112e": {"database": "dwh", "schema": "dbt_test__audit", "name": "accepted_values_products_snapshot_erp_maintenance_status__Yes__No", "resource_type": "test", "package_name": "dbt_transform", "path": "accepted_values_products_snaps_9c679c47e80c801c3f46231e6acd6ce7.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.accepted_values_products_snapshot_erp_maintenance_status__Yes__No.8d1595112e", "fqn": ["dbt_transform", "accepted_values_products_snapshot_erp_maintenance_status__Yes__No"], "alias": "accepted_values_products_snaps_9c679c47e80c801c3f46231e6acd6ce7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_products_snaps_9c679c47e80c801c3f46231e6acd6ce7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "Ensures maintenance status is either 'Yes' or 'No'.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_products_snaps_9c679c47e80c801c3f46231e6acd6ce7"}, "created_at": 1743885923.91225, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_products_snaps_9c679c47e80c801c3f46231e6acd6ce7\") }}", "language": "sql", "refs": [{"name": "products_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["snapshot.dbt_transform.products_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/accepted_values_products_snaps_9c679c47e80c801c3f46231e6acd6ce7.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        erp_maintenance_status as value_field,\n        count(*) as n_records\n\n    from \"dwh\".\"snapshots\".\"products_snapshot\"\n    group by erp_maintenance_status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','No'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "erp_maintenance_status", "file_key_name": "snapshots.products_snapshot", "attached_node": "snapshot.dbt_transform.products_snapshot", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "No"], "column_name": "erp_maintenance_status", "model": "{{ get_where_subquery(ref('products_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_products_snapshot_dbt_valid_from.5230dba4ac": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_products_snapshot_dbt_valid_from", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_products_snapshot_dbt_valid_from.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.not_null_products_snapshot_dbt_valid_from.5230dba4ac", "fqn": ["dbt_transform", "not_null_products_snapshot_dbt_valid_from"], "alias": "not_null_products_snapshot_dbt_valid_from", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.9149928, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "products_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["snapshot.dbt_transform.products_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/not_null_products_snapshot_dbt_valid_from.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dbt_valid_from\nfrom \"dwh\".\"snapshots\".\"products_snapshot\"\nwhere dbt_valid_from is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_from", "file_key_name": "snapshots.products_snapshot", "attached_node": "snapshot.dbt_transform.products_snapshot", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_from", "model": "{{ get_where_subquery(ref('products_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_products_snapshot_dbt_valid_to.8a79b7bfba": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_products_snapshot_dbt_valid_to", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_products_snapshot_dbt_valid_to.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.not_null_products_snapshot_dbt_valid_to.8a79b7bfba", "fqn": ["dbt_transform", "not_null_products_snapshot_dbt_valid_to"], "alias": "not_null_products_snapshot_dbt_valid_to", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.9159281, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "products_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["snapshot.dbt_transform.products_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/not_null_products_snapshot_dbt_valid_to.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dbt_valid_to\nfrom \"dwh\".\"snapshots\".\"products_snapshot\"\nwhere dbt_valid_to is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_valid_to", "file_key_name": "snapshots.products_snapshot", "attached_node": "snapshot.dbt_transform.products_snapshot", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_valid_to", "model": "{{ get_where_subquery(ref('products_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_products_snapshot_dbt_updated_at.f51bf4bd85": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_products_snapshot_dbt_updated_at", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_products_snapshot_dbt_updated_at.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.not_null_products_snapshot_dbt_updated_at.f51bf4bd85", "fqn": ["dbt_transform", "not_null_products_snapshot_dbt_updated_at"], "alias": "not_null_products_snapshot_dbt_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.916862, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "products_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["snapshot.dbt_transform.products_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/not_null_products_snapshot_dbt_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dbt_updated_at\nfrom \"dwh\".\"snapshots\".\"products_snapshot\"\nwhere dbt_updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_updated_at", "file_key_name": "snapshots.products_snapshot", "attached_node": "snapshot.dbt_transform.products_snapshot", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_updated_at", "model": "{{ get_where_subquery(ref('products_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.not_null_products_snapshot_dbt_scd_id.3b1bf37123": {"database": "dwh", "schema": "dbt_test__audit", "name": "not_null_products_snapshot_dbt_scd_id", "resource_type": "test", "package_name": "dbt_transform", "path": "not_null_products_snapshot_dbt_scd_id.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.not_null_products_snapshot_dbt_scd_id.3b1bf37123", "fqn": ["dbt_transform", "not_null_products_snapshot_dbt_scd_id"], "alias": "not_null_products_snapshot_dbt_scd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.917805, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "products_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["snapshot.dbt_transform.products_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/not_null_products_snapshot_dbt_scd_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dbt_scd_id\nfrom \"dwh\".\"snapshots\".\"products_snapshot\"\nwhere dbt_scd_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_scd_id", "file_key_name": "snapshots.products_snapshot", "attached_node": "snapshot.dbt_transform.products_snapshot", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "dbt_scd_id", "model": "{{ get_where_subquery(ref('products_snapshot')) }}"}, "namespace": null}}, "test.dbt_transform.unique_products_snapshot_dbt_scd_id.64e0b38135": {"database": "dwh", "schema": "dbt_test__audit", "name": "unique_products_snapshot_dbt_scd_id", "resource_type": "test", "package_name": "dbt_transform", "path": "unique_products_snapshot_dbt_scd_id.sql", "original_file_path": "snapshots/schema.yml", "unique_id": "test.dbt_transform.unique_products_snapshot_dbt_scd_id.64e0b38135", "fqn": ["dbt_transform", "unique_products_snapshot_dbt_scd_id"], "alias": "unique_products_snapshot_dbt_scd_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1743885923.9187431, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "products_snapshot", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["snapshot.dbt_transform.products_snapshot"]}, "compiled_path": "target/compiled/dbt_transform/snapshots/schema.yml/unique_products_snapshot_dbt_scd_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    dbt_scd_id as unique_field,\n    count(*) as n_records\n\nfrom \"dwh\".\"snapshots\".\"products_snapshot\"\nwhere dbt_scd_id is not null\ngroup by dbt_scd_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dbt_scd_id", "file_key_name": "snapshots.products_snapshot", "attached_node": "snapshot.dbt_transform.products_snapshot", "test_metadata": {"name": "unique", "kwargs": {"column_name": "dbt_scd_id", "model": "{{ get_where_subquery(ref('products_snapshot')) }}"}, "namespace": null}}}, "sources": {"source.dbt_transform.bronze_source.raw_crm_cust_info": {"database": "sql_dwh_db", "schema": "raw", "name": "raw_crm_cust_info", "resource_type": "source", "package_name": "dbt_transform", "path": "models/bronze/schema.yml", "original_file_path": "models/bronze/schema.yml", "unique_id": "source.dbt_transform.bronze_source.raw_crm_cust_info", "fqn": ["dbt_transform", "bronze", "bronze_source", "raw_crm_cust_info"], "source_name": "bronze_source", "source_description": "", "loader": "", "identifier": "raw_crm_cust_info", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"raw\".\"raw_crm_cust_info\"", "created_at": 1743885923.922903, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "raw"}, "source.dbt_transform.bronze_source.raw_crm_prd_info": {"database": "sql_dwh_db", "schema": "raw", "name": "raw_crm_prd_info", "resource_type": "source", "package_name": "dbt_transform", "path": "models/bronze/schema.yml", "original_file_path": "models/bronze/schema.yml", "unique_id": "source.dbt_transform.bronze_source.raw_crm_prd_info", "fqn": ["dbt_transform", "bronze", "bronze_source", "raw_crm_prd_info"], "source_name": "bronze_source", "source_description": "", "loader": "", "identifier": "raw_crm_prd_info", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"raw\".\"raw_crm_prd_info\"", "created_at": 1743885923.923811, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "raw"}, "source.dbt_transform.bronze_source.raw_crm_sales_details": {"database": "sql_dwh_db", "schema": "raw", "name": "raw_crm_sales_details", "resource_type": "source", "package_name": "dbt_transform", "path": "models/bronze/schema.yml", "original_file_path": "models/bronze/schema.yml", "unique_id": "source.dbt_transform.bronze_source.raw_crm_sales_details", "fqn": ["dbt_transform", "bronze", "bronze_source", "raw_crm_sales_details"], "source_name": "bronze_source", "source_description": "", "loader": "", "identifier": "raw_crm_sales_details", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"raw\".\"raw_crm_sales_details\"", "created_at": 1743885923.9239411, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "raw"}, "source.dbt_transform.bronze_source.raw_erp_cust_az12": {"database": "sql_dwh_db", "schema": "raw", "name": "raw_erp_cust_az12", "resource_type": "source", "package_name": "dbt_transform", "path": "models/bronze/schema.yml", "original_file_path": "models/bronze/schema.yml", "unique_id": "source.dbt_transform.bronze_source.raw_erp_cust_az12", "fqn": ["dbt_transform", "bronze", "bronze_source", "raw_erp_cust_az12"], "source_name": "bronze_source", "source_description": "", "loader": "", "identifier": "raw_erp_cust_az12", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"raw\".\"raw_erp_cust_az12\"", "created_at": 1743885923.924057, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "raw"}, "source.dbt_transform.bronze_source.raw_erp_loc_a101": {"database": "sql_dwh_db", "schema": "raw", "name": "raw_erp_loc_a101", "resource_type": "source", "package_name": "dbt_transform", "path": "models/bronze/schema.yml", "original_file_path": "models/bronze/schema.yml", "unique_id": "source.dbt_transform.bronze_source.raw_erp_loc_a101", "fqn": ["dbt_transform", "bronze", "bronze_source", "raw_erp_loc_a101"], "source_name": "bronze_source", "source_description": "", "loader": "", "identifier": "raw_erp_loc_a101", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"raw\".\"raw_erp_loc_a101\"", "created_at": 1743885923.924169, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "raw"}, "source.dbt_transform.bronze_source.raw_erp_px_cat_g1v2": {"database": "sql_dwh_db", "schema": "raw", "name": "raw_erp_px_cat_g1v2", "resource_type": "source", "package_name": "dbt_transform", "path": "models/bronze/schema.yml", "original_file_path": "models/bronze/schema.yml", "unique_id": "source.dbt_transform.bronze_source.raw_erp_px_cat_g1v2", "fqn": ["dbt_transform", "bronze", "bronze_source", "raw_erp_px_cat_g1v2"], "source_name": "bronze_source", "source_description": "", "loader": "", "identifier": "raw_erp_px_cat_g1v2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"raw\".\"raw_erp_px_cat_g1v2\"", "created_at": 1743885923.9242759, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "raw"}, "source.dbt_transform.silver_source.bz_crm_cust_info": {"database": "sql_dwh_db", "schema": "bronze", "name": "bz_crm_cust_info", "resource_type": "source", "package_name": "dbt_transform", "path": "models/silver/schema.yml", "original_file_path": "models/silver/schema.yml", "unique_id": "source.dbt_transform.silver_source.bz_crm_cust_info", "fqn": ["dbt_transform", "silver", "silver_source", "bz_crm_cust_info"], "source_name": "silver_source", "source_description": "", "loader": "", "identifier": "bz_crm_cust_info", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"bronze\".\"bz_crm_cust_info\"", "created_at": 1743885923.924385, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "bronze"}, "source.dbt_transform.silver_source.bz_crm_prd_info": {"database": "sql_dwh_db", "schema": "bronze", "name": "bz_crm_prd_info", "resource_type": "source", "package_name": "dbt_transform", "path": "models/silver/schema.yml", "original_file_path": "models/silver/schema.yml", "unique_id": "source.dbt_transform.silver_source.bz_crm_prd_info", "fqn": ["dbt_transform", "silver", "silver_source", "bz_crm_prd_info"], "source_name": "silver_source", "source_description": "", "loader": "", "identifier": "bz_crm_prd_info", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"bronze\".\"bz_crm_prd_info\"", "created_at": 1743885923.924507, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "bronze"}, "source.dbt_transform.silver_source.bz_crm_sales_details": {"database": "sql_dwh_db", "schema": "bronze", "name": "bz_crm_sales_details", "resource_type": "source", "package_name": "dbt_transform", "path": "models/silver/schema.yml", "original_file_path": "models/silver/schema.yml", "unique_id": "source.dbt_transform.silver_source.bz_crm_sales_details", "fqn": ["dbt_transform", "silver", "silver_source", "bz_crm_sales_details"], "source_name": "silver_source", "source_description": "", "loader": "", "identifier": "bz_crm_sales_details", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"bronze\".\"bz_crm_sales_details\"", "created_at": 1743885923.924617, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "bronze"}, "source.dbt_transform.silver_source.bz_erp_cust_az12": {"database": "sql_dwh_db", "schema": "bronze", "name": "bz_erp_cust_az12", "resource_type": "source", "package_name": "dbt_transform", "path": "models/silver/schema.yml", "original_file_path": "models/silver/schema.yml", "unique_id": "source.dbt_transform.silver_source.bz_erp_cust_az12", "fqn": ["dbt_transform", "silver", "silver_source", "bz_erp_cust_az12"], "source_name": "silver_source", "source_description": "", "loader": "", "identifier": "bz_erp_cust_az12", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"bronze\".\"bz_erp_cust_az12\"", "created_at": 1743885923.9247181, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "bronze"}, "source.dbt_transform.silver_source.bz_erp_loc_a101": {"database": "sql_dwh_db", "schema": "bronze", "name": "bz_erp_loc_a101", "resource_type": "source", "package_name": "dbt_transform", "path": "models/silver/schema.yml", "original_file_path": "models/silver/schema.yml", "unique_id": "source.dbt_transform.silver_source.bz_erp_loc_a101", "fqn": ["dbt_transform", "silver", "silver_source", "bz_erp_loc_a101"], "source_name": "silver_source", "source_description": "", "loader": "", "identifier": "bz_erp_loc_a101", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"bronze\".\"bz_erp_loc_a101\"", "created_at": 1743885923.924832, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "bronze"}, "source.dbt_transform.silver_source.bz_erp_px_cat_g1v2": {"database": "sql_dwh_db", "schema": "bronze", "name": "bz_erp_px_cat_g1v2", "resource_type": "source", "package_name": "dbt_transform", "path": "models/silver/schema.yml", "original_file_path": "models/silver/schema.yml", "unique_id": "source.dbt_transform.silver_source.bz_erp_px_cat_g1v2", "fqn": ["dbt_transform", "silver", "silver_source", "bz_erp_px_cat_g1v2"], "source_name": "silver_source", "source_description": "", "loader": "", "identifier": "bz_erp_px_cat_g1v2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"bronze\".\"bz_erp_px_cat_g1v2\"", "created_at": 1743885923.924949, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "bronze"}, "source.dbt_transform.gold_source.crm_cust_info": {"database": "sql_dwh_db", "schema": "silver", "name": "crm_cust_info", "resource_type": "source", "package_name": "dbt_transform", "path": "models/gold/schema.yml", "original_file_path": "models/gold/schema.yml", "unique_id": "source.dbt_transform.gold_source.crm_cust_info", "fqn": ["dbt_transform", "gold", "gold_source", "crm_cust_info"], "source_name": "gold_source", "source_description": "", "loader": "", "identifier": "crm_cust_info", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"silver\".\"crm_cust_info\"", "created_at": 1743885923.925065, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "silver"}, "source.dbt_transform.gold_source.crm_prd_info": {"database": "sql_dwh_db", "schema": "silver", "name": "crm_prd_info", "resource_type": "source", "package_name": "dbt_transform", "path": "models/gold/schema.yml", "original_file_path": "models/gold/schema.yml", "unique_id": "source.dbt_transform.gold_source.crm_prd_info", "fqn": ["dbt_transform", "gold", "gold_source", "crm_prd_info"], "source_name": "gold_source", "source_description": "", "loader": "", "identifier": "crm_prd_info", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"silver\".\"crm_prd_info\"", "created_at": 1743885923.925177, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "silver"}, "source.dbt_transform.gold_source.crm_sales_details": {"database": "sql_dwh_db", "schema": "silver", "name": "crm_sales_details", "resource_type": "source", "package_name": "dbt_transform", "path": "models/gold/schema.yml", "original_file_path": "models/gold/schema.yml", "unique_id": "source.dbt_transform.gold_source.crm_sales_details", "fqn": ["dbt_transform", "gold", "gold_source", "crm_sales_details"], "source_name": "gold_source", "source_description": "", "loader": "", "identifier": "crm_sales_details", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"silver\".\"crm_sales_details\"", "created_at": 1743885923.925277, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "silver"}, "source.dbt_transform.gold_source.erp_cust_az12": {"database": "sql_dwh_db", "schema": "silver", "name": "erp_cust_az12", "resource_type": "source", "package_name": "dbt_transform", "path": "models/gold/schema.yml", "original_file_path": "models/gold/schema.yml", "unique_id": "source.dbt_transform.gold_source.erp_cust_az12", "fqn": ["dbt_transform", "gold", "gold_source", "erp_cust_az12"], "source_name": "gold_source", "source_description": "", "loader": "", "identifier": "erp_cust_az12", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"silver\".\"erp_cust_az12\"", "created_at": 1743885923.925379, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "silver"}, "source.dbt_transform.gold_source.erp_loc_a101": {"database": "sql_dwh_db", "schema": "silver", "name": "erp_loc_a101", "resource_type": "source", "package_name": "dbt_transform", "path": "models/gold/schema.yml", "original_file_path": "models/gold/schema.yml", "unique_id": "source.dbt_transform.gold_source.erp_loc_a101", "fqn": ["dbt_transform", "gold", "gold_source", "erp_loc_a101"], "source_name": "gold_source", "source_description": "", "loader": "", "identifier": "erp_loc_a101", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"silver\".\"erp_loc_a101\"", "created_at": 1743885923.925472, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "silver"}, "source.dbt_transform.gold_source.erp_px_cat_g1v2": {"database": "sql_dwh_db", "schema": "silver", "name": "erp_px_cat_g1v2", "resource_type": "source", "package_name": "dbt_transform", "path": "models/gold/schema.yml", "original_file_path": "models/gold/schema.yml", "unique_id": "source.dbt_transform.gold_source.erp_px_cat_g1v2", "fqn": ["dbt_transform", "gold", "gold_source", "erp_px_cat_g1v2"], "source_name": "gold_source", "source_description": "", "loader": "", "identifier": "erp_px_cat_g1v2", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"sql_dwh_db\".\"silver\".\"erp_px_cat_g1v2\"", "created_at": 1743885923.9255738, "unrendered_database": "{{ env_var('POSTGRES_DB') }}", "unrendered_schema": "silver"}, "source.dbt_transform.analytics_source.dim_customers_current": {"database": "dwh", "schema": "gold", "name": "dim_customers_current", "resource_type": "source", "package_name": "dbt_transform", "path": "models/analytics/schema.yml", "original_file_path": "models/analytics/schema.yml", "unique_id": "source.dbt_transform.analytics_source.dim_customers_current", "fqn": ["dbt_transform", "analytics", "analytics_source", "dim_customers_current"], "source_name": "analytics_source", "source_description": "", "loader": "", "identifier": "dim_customers_current", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dwh\".\"gold\".\"dim_customers_current\"", "created_at": 1743885923.925685, "unrendered_database": null, "unrendered_schema": "gold"}, "source.dbt_transform.analytics_source.dim_products_current": {"database": "dwh", "schema": "gold", "name": "dim_products_current", "resource_type": "source", "package_name": "dbt_transform", "path": "models/analytics/schema.yml", "original_file_path": "models/analytics/schema.yml", "unique_id": "source.dbt_transform.analytics_source.dim_products_current", "fqn": ["dbt_transform", "analytics", "analytics_source", "dim_products_current"], "source_name": "analytics_source", "source_description": "", "loader": "", "identifier": "dim_products_current", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dwh\".\"gold\".\"dim_products_current\"", "created_at": 1743885923.925784, "unrendered_database": null, "unrendered_schema": "gold"}, "source.dbt_transform.analytics_source.fact_sales": {"database": "dwh", "schema": "gold", "name": "fact_sales", "resource_type": "source", "package_name": "dbt_transform", "path": "models/analytics/schema.yml", "original_file_path": "models/analytics/schema.yml", "unique_id": "source.dbt_transform.analytics_source.fact_sales", "fqn": ["dbt_transform", "analytics", "analytics_source", "fact_sales"], "source_name": "analytics_source", "source_description": "", "loader": "", "identifier": "fact_sales", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dwh\".\"gold\".\"fact_sales\"", "created_at": 1743885923.925892, "unrendered_database": null, "unrendered_schema": "gold"}}, "macros": {"macro.dbt_transform.create_product_struct": {"name": "create_product_struct", "resource_type": "macro", "package_name": "dbt_transform", "path": "macros/create_prd_info_struct_type.sql", "original_file_path": "macros/create_prd_info_struct_type.sql", "unique_id": "macro.dbt_transform.create_product_struct", "macro_sql": "{% macro create_product_struct() %}\n  {% if not execute %}\n    {{ return('') }}\n  {% endif %}\n\n  {% set check_type_sql %}\n    SELECT 1 FROM duckdb_types WHERE type_name = 'product_struct' AND schema_name = 'analytics';\n  {% endset %}\n\n  {% set results = run_query(check_type_sql) %}\n\n  {% if results.rows|length == 0 %}\n    {% set create_type_sql %}\n      CREATE SCHEMA IF NOT EXISTS analytics;\n      CREATE TYPE analytics.product_struct AS STRUCT (\n        product_key VARCHAR,\n        product_code VARCHAR,\n        product_name VARCHAR,\n        product_cost INT,\n        product_category VARCHAR,\n        product_subcategory VARCHAR,\n        product_maintenance_status VARCHAR\n      );\n    {% endset %}\n    {% do run_query(create_type_sql) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": " Creates a DuckDB structured type product_struct in the analytics schema if it doesn't already exist.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://macros/schema.yml", "arguments": [], "created_at": 1743885923.336981, "supported_languages": null}, "macro.dbt_transform.test_email_check": {"name": "test_email_check", "resource_type": "macro", "package_name": "dbt_transform", "path": "macros/email_check.sql", "original_file_path": "macros/email_check.sql", "unique_id": "macro.dbt_transform.test_email_check", "macro_sql": "{% macro test_email_check(model, column_name) %}\nSELECT \n    *\nFROM {{ model }}\nWHERE \n    {{ column_name }} IS NOT NULL\n    AND {{ column_name }} != 'unknown'\n    AND {{ column_name }} !~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Checks if the email is of standard pattern.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://macros/schema.yml", "arguments": [{"name": "model", "type": null, "description": "The model (table) being tested."}, {"name": "column_name", "type": null, "description": "email column name to check"}], "created_at": 1743885923.3373199, "supported_languages": null}, "macro.dbt_transform.test_valid_date_format": {"name": "test_valid_date_format", "resource_type": "macro", "package_name": "dbt_transform", "path": "macros/valid_date_format.sql", "original_file_path": "macros/valid_date_format.sql", "unique_id": "macro.dbt_transform.test_valid_date_format", "macro_sql": "{% macro test_valid_date_format(model, column_name) %}\nSELECT \n    *\nFROM {{ model }}\nWHERE \n    {{ column_name }} IS NOT NULL\n    AND {{ column_name }}::TEXT !~ '^[0-9]{8}$'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1006122, "supported_languages": null}, "macro.dbt_transform.test_custom_date_range_check": {"name": "test_custom_date_range_check", "resource_type": "macro", "package_name": "dbt_transform", "path": "macros/custom_date_range_check.sql", "original_file_path": "macros/custom_date_range_check.sql", "unique_id": "macro.dbt_transform.test_custom_date_range_check", "macro_sql": "{% macro test_custom_date_range_check(model, column_name, min_date, max_date, expected_count) %}\n\nSELECT COUNT(*) AS num_violations\nFROM {{ model }}\nWHERE {{ column_name }} IS NULL\n   OR {{ column_name }} < '{{ min_date }}'\n   OR {{ column_name }} > '{{ max_date }}'\nHAVING COUNT(*) != {{ expected_count }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": " Validates that a columns date values fall within a specified range. If any values are outside this range, the test fails.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://macros/schema.yml", "arguments": [{"name": "model", "type": null, "description": "The model (table) being tested."}, {"name": "column_name", "type": null, "description": "The column containing date values."}, {"name": "min_date", "type": null, "description": "The minimum allowed date value."}, {"name": "max_date", "type": null, "description": "The maximum allowed date value."}, {"name": "expected_count", "type": null, "description": "The expected number of violations before failing the test."}], "created_at": 1743885923.333863, "supported_languages": null}, "macro.dbt_transform.copy_all_from_postgres_gold": {"name": "copy_all_from_postgres_gold", "resource_type": "macro", "package_name": "dbt_transform", "path": "macros/copy_all_from_postgres_gold.sql", "original_file_path": "macros/copy_all_from_postgres_gold.sql", "unique_id": "macro.dbt_transform.copy_all_from_postgres_gold", "macro_sql": "{% macro copy_all_from_postgres_gold(tables) %}\n    {%- for table in tables %}\n        {%- set pg_schema = table.pg_schema -%}\n        {%- set pg_table = table.pg_table -%}\n        {%- set duckdb_schema = table.duckdb_schema -%}\n        {%- set duckdb_table = table.duckdb_table -%}\n        {% set sql %}\n            CREATE SCHEMA IF NOT EXISTS gold;\n            DROP TABLE IF EXISTS {{ duckdb_schema }}.{{ duckdb_table }};\n            CREATE TABLE {{ duckdb_schema }}.{{ duckdb_table }} AS\n            SELECT * \n            FROM postgres_scan(\n                'postgresql://{{ env_var('POSTGRES_USER') }}:{{ env_var('POSTGRES_PASSWORD') }}@{{ env_var('POSTGRES_HOST') }}:{{ env_var('POSTGRES_PORT') }}/{{ env_var('POSTGRES_DB') }}',\n                '{{ pg_schema }}',\n                '{{ pg_table }}'\n            )\n        {% endset %}\n        {%- do run_query(sql) -%}\n    {% endfor %}\n    -- Return a dummy result to satisfy dbt\n    SELECT 1 AS status\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "Copies all tables from a specified PostgreSQL database schema to DuckDB using the `postgres_scan` function. Intended for migrating gold-layer data into an analytics environment.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://macros/schema.yml", "arguments": [], "created_at": 1743885923.336416, "supported_languages": null}, "macro.dbt_transform.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt_transform", "path": "macros/generate_custom_schema.sql", "original_file_path": "macros/generate_custom_schema.sql", "unique_id": "macro.dbt_transform.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": " Dynamically generates the schema name based on the target environment. If a custom schema name is provided, it trims spaces and returns it.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://macros/schema.yml", "arguments": [{"name": "custom_schema_name", "type": null, "description": "Optional custom schema name."}, {"name": "node", "type": null, "description": "The dbt model node being processed."}], "created_at": 1743885923.335131, "supported_languages": null}, "macro.dbt_transform.create_customer_bio_struct": {"name": "create_customer_bio_struct", "resource_type": "macro", "package_name": "dbt_transform", "path": "macros/create_cust_bio_struct_type.sql", "original_file_path": "macros/create_cust_bio_struct_type.sql", "unique_id": "macro.dbt_transform.create_customer_bio_struct", "macro_sql": "{% macro create_customer_bio_struct() %}\n  {% if not execute %}\n    {{ return('') }}\n  {% endif %}\n\n  {% set check_type_sql %}\n    SELECT 1 FROM duckdb_types WHERE type_name = 'customer_bio_struct' AND schema_name = 'analytics';\n  {% endset %}\n\n  {% set results = run_query(check_type_sql) %}\n\n  {% if results.rows|length == 0 %}\n    {% set create_type_sql %}\n      CREATE SCHEMA IF NOT EXISTS analytics;\n      CREATE TYPE analytics.customer_bio_struct AS STRUCT (\n        customer_name VARCHAR,\n        customer_key VARCHAR,\n        customer_age INT,\n        customer_birthdate DATE,\n        customer_gender VARCHAR,\n        customer_country VARCHAR,\n        customer_marital_status VARCHAR,\n        customer_email VARCHAR,\n        customer_place VARCHAR,\n        customer_postal_code INT\n      );\n    {% endset %}\n    {% do run_query(create_type_sql) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "Creates a DuckDB structured type customer_bio_struct in the analytics schema if it doesn't already exist.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://macros/schema.yml", "arguments": [], "created_at": 1743885923.336704, "supported_languages": null}, "macro.dbt_transform.test_relationships_active_products": {"name": "test_relationships_active_products", "resource_type": "macro", "package_name": "dbt_transform", "path": "macros/relationships_active_products.sql", "original_file_path": "macros/relationships_active_products.sql", "unique_id": "macro.dbt_transform.test_relationships_active_products", "macro_sql": "{% macro test_relationships_active_products(model, column_name, ref_model, ref_column) %}\n\nWITH model_data AS (\n    SELECT {{ column_name }} AS product_cat_id\n    FROM {{ model }}\n    WHERE {{ column_name }} IS NOT NULL\n),\n\nreference_data AS (\n    SELECT DISTINCT {{ ref_column }} AS product_cat_id\n    FROM {{ ref_model }}\n    WHERE prd_end_dt IS NULL\n),\n\ninvalid_records AS (\n    SELECT md.*\n    FROM model_data md\n    LEFT JOIN reference_data rd \n    ON md.product_cat_id = rd.product_cat_id\n    WHERE rd.product_cat_id IS NULL\n)\n\nSELECT * FROM invalid_records\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": " Ensures that product categories in dim_products reference only active categories from erp_px_cat_g1v2 where prd_end_dt IS NULL.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://macros/schema.yml", "arguments": [{"name": "model", "type": null, "description": "The model (table) being tested."}, {"name": "column_name", "type": null, "description": "The column containing category IDs."}, {"name": "ref_model", "type": null, "description": "The reference model containing valid categories."}, {"name": "ref_column", "type": null, "description": "The column in the reference model containing category IDs."}], "created_at": 1743885923.335974, "supported_languages": null}, "macro.dbt_transform.test_custom_trimmed_check": {"name": "test_custom_trimmed_check", "resource_type": "macro", "package_name": "dbt_transform", "path": "macros/custom_trimmed_check.sql", "original_file_path": "macros/custom_trimmed_check.sql", "unique_id": "macro.dbt_transform.test_custom_trimmed_check", "macro_sql": "{% macro test_custom_trimmed_check(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} != trim({{ column_name }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": " Checks if a column contains values with leading or trailing spaces.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_transform://macros/schema.yml", "arguments": [{"name": "model", "type": null, "description": "The model (table) being tested."}, {"name": "column_name", "type": null, "description": "The column to check for whitespace issues."}], "created_at": 1743885923.334295, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_binding_char": {"name": "duckdb__get_binding_char", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char", "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.104778, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_batch_size": {"name": "duckdb__get_batch_size", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size", "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.104921, "supported_languages": null}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"name": "duckdb__load_csv_rows", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1070552, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"name": "duckdb__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.107889, "supported_languages": null}, "macro.dbt_duckdb.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1083882, "supported_languages": null}, "macro.dbt_duckdb.duckdb__post_snapshot": {"name": "duckdb__post_snapshot", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__post_snapshot", "macro_sql": "{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1085708, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_catalog": {"name": "duckdb__get_catalog", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    with relations AS (\n      select\n        t.table_name\n        , t.database_name\n        , t.schema_name\n        , 'BASE TABLE' as table_type\n        , {{ adapter.catalog_comment('t') }} as table_comment\n      from duckdb_tables() t\n      WHERE t.database_name = '{{ database }}'\n      UNION ALL\n      SELECT v.view_name as table_name\n      , v.database_name\n      , v.schema_name\n      , 'VIEW' as table_type\n      , {{ adapter.catalog_comment('v') }} as table_comment\n      from duckdb_views() v\n      WHERE v.database_name = '{{ database }}'\n    )\n    select\n        '{{ database }}' as table_database,\n        r.schema_name as table_schema,\n        r.table_name,\n        r.table_type,\n        r.table_comment,\n        c.column_name,\n        c.column_index as column_index,\n        c.data_type as column_type,\n        {{ adapter.catalog_comment('c') }} as column_comment,\n        '' as table_owner\n    FROM relations r JOIN duckdb_columns() c ON r.schema_name = c.schema_name AND r.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(r.schema_name) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    ORDER BY\n        r.schema_name,\n        r.table_name,\n        c.column_index\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.10964, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_schema": {"name": "duckdb__create_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    {% set sql %}\n        select type from duckdb_databases()\n        where lower(database_name)='{{ relation.database | lower }}'\n        and type='sqlite'\n    {% endset %}\n    {% set results = run_query(sql) %}\n    {% if results|length == 0 %}\n        create schema if not exists {{ relation.without_identifier() }}\n    {% else %}\n        {% if relation.schema!='main' %}\n            {{ exceptions.raise_compiler_error(\n                \"Schema must be 'main' when writing to sqlite \"\n                ~ \"instead got \" ~ relation.schema\n            )}}\n        {% endif %}\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.11221, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_schema": {"name": "duckdb__drop_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1124291, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_schemas": {"name": "duckdb__list_schemas", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where lower(catalog_name) = '{{ database | lower }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.112772, "supported_languages": null}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"name": "duckdb__check_schema_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where lower(schema_name) = '{{ schema | lower }}'\n        and lower(catalog_name) = '{{ information_schema.database | lower }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.113088, "supported_languages": null}, "macro.dbt_duckdb.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.get_column_names", "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.113534, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_table_as": {"name": "duckdb__create_table_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_duckdb.get_column_names", "macro.dbt.get_select_subquery", "macro.dbt_duckdb.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.114953, "supported_languages": null}, "macro.dbt_duckdb.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.py_write_table", "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    tmp_name = '__dbt_python_model_df_' + '{{ relation.identifier }}'\n    con.register(tmp_name, df)\n    con.execute('create table {{ relation }} as select * from ' + tmp_name)\n    con.unregister(tmp_name)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.11522, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_view_as": {"name": "duckdb__create_view_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1157062, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"name": "duckdb__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and lower(table_schema) = '{{ relation.schema | lower }}'\n      {% endif %}\n      {% if relation.database %}\n      and lower(table_catalog) = '{{ relation.database | lower }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.116319, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"name": "duckdb__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where lower(table_schema) = '{{ schema_relation.schema | lower }}'\n    and lower(table_catalog) = '{{ schema_relation.database | lower }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.116758, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_relation": {"name": "duckdb__drop_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.117013, "supported_languages": null}, "macro.dbt_duckdb.duckdb__rename_relation": {"name": "duckdb__rename_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1173718, "supported_languages": null}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"name": "duckdb__make_temp_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.117814, "supported_languages": null}, "macro.dbt_duckdb.duckdb__current_timestamp": {"name": "duckdb__current_timestamp", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.117907, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"name": "duckdb__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.118112, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"name": "duckdb__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.118239, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {"name": "duckdb__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql", "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1184099, "supported_languages": null}, "macro.dbt_duckdb.location_exists": {"name": "location_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.location_exists", "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1185868, "supported_languages": null}, "macro.dbt_duckdb.write_to_file": {"name": "write_to_file", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.write_to_file", "macro_sql": "{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1188369, "supported_languages": null}, "macro.dbt_duckdb.store_relation": {"name": "store_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.store_relation", "macro_sql": "{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.119172, "supported_languages": null}, "macro.dbt_duckdb.render_write_options": {"name": "render_write_options", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.render_write_options", "macro_sql": "{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.120327, "supported_languages": null}, "macro.dbt_duckdb.duckdb__apply_grants": {"name": "duckdb__apply_grants", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__apply_grants", "macro_sql": "{% macro duckdb__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n      {{ adapter.warn_once('Grants for relations are not supported by DuckDB') }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.120594, "supported_languages": null}, "macro.dbt_duckdb.duckdb_escape_comment": {"name": "duckdb_escape_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb_escape_comment", "macro_sql": "{% macro duckdb_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.121431, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_comment": {"name": "duckdb__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_comment", "macro_sql": "{% macro duckdb__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = duckdb_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.121703, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_column_comment": {"name": "duckdb__alter_column_comment", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/persist_docs.sql", "original_file_path": "macros/persist_docs.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_column_comment", "macro_sql": "{% macro duckdb__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = duckdb_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.122373, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql": {"name": "duckdb__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/incremental_helper.sql", "original_file_path": "macros/incremental_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql", "macro_sql": "{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.123944, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns": {"name": "duckdb__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/columns.sql", "original_file_path": "macros/columns.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns", "macro_sql": "{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.124912, "supported_languages": null}, "macro.dbt_duckdb.materialization_table_duckdb": {"name": "materialization_table_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_duckdb.materialization_table_duckdb", "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.127528, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_external_duckdb": {"name": "materialization_external_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/external.sql", "original_file_path": "macros/materializations/external.sql", "unique_id": "macro.dbt_duckdb.materialization_external_duckdb", "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n\n  {%- set format = config.get('format') -%}\n  {%- set allowed_formats = ['csv', 'parquet', 'json'] -%}\n  {%- if format -%}\n      {%- if format not in allowed_formats -%}\n          {{ exceptions.raise_compiler_error(\"Invalid format: \" ~ format ~ \". Allowed formats are: \" ~ allowed_formats | join(', ')) }}\n      {%- endif -%}\n  {%- else -%}\n    {%- set format = location.split('.')[-1].lower() if '.' in location else 'parquet' -%}\n    {%- set format = format if format in allowed_formats else 'parquet' -%}\n  {%- endif -%}\n\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n  {%- set parquet_read_options = config.get('parquet_read_options', {'union_by_name': False}) -%}\n  {%- set json_read_options = config.get('json_read_options', {'auto_detect': True}) -%}\n  {%- set csv_read_options = config.get('csv_read_options', {'auto_detect': True}) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- check if relation is empty\n  {%- set count_query -%}\n    select count(*) as row_count from {{ temp_relation }}\n  {%- endset -%}\n  {%- set row_count = run_query(count_query) -%}\n\n  -- if relation is empty, write a non-empty table with column names and null values\n  {% call statement('main', language='sql') -%}\n    {% if row_count[0][0] == 0 %}\n    insert into {{ temp_relation }} values (\n      {%- for col in get_columns_in_relation(temp_relation) -%}\n      NULL,\n      {%- endfor -%}\n    )\n    {% endif %}\n  {%- endcall %}\n\n  -- write a temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n\n-- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    {% if format == 'json' %}\n      create or replace view {{ intermediate_relation }} as (\n        select * from read_json('{{ read_location }}'\n        {%- for key, value in json_read_options.items() -%}\n          , {{ key }}=\n          {%- if value is string -%}\n            '{{ value }}'\n          {%- else -%}\n            {{ value }}\n          {%- endif -%}\n        {%- endfor -%}\n        )\n        -- if relation is empty, filter by all columns having null values\n        {% if row_count[0][0] == 0 %}\n          where 1\n          {%- for col in get_columns_in_relation(temp_relation) -%}\n            {{ print(' ') }} AND {{ col.column }} is not NULL\n          {%- endfor -%}\n        {% endif %}\n      );\n    {% elif format == 'parquet' %}\n      create or replace view {{ intermediate_relation }} as (\n        select * from read_parquet('{{ read_location }}'\n        {%- for key, value in parquet_read_options.items() -%}\n          , {{ key }}=\n          {%- if value is string -%}\n            '{{ value }}'\n          {%- else -%}\n            {{ value }}\n          {%- endif -%}\n        {%- endfor -%}\n        )\n        -- if relation is empty, filter by all columns having null values\n        {% if row_count[0][0] == 0 %}\n          where 1\n          {%- for col in get_columns_in_relation(temp_relation) -%}\n            {{ print(' ') }} AND {{ col.column }} is not NULL\n          {%- endfor -%}\n        {% endif %}\n      );\n    {% elif format == 'csv' %}\n    create or replace view {{ intermediate_relation }} as (\n      select * from read_csv('{{ read_location }}'\n      {%- for key, value in csv_read_options.items() -%}\n        , {{ key }}=\n        {%- if value is string -%}\n          '{{ value }}'\n        {%- else -%}\n          {{ value }}\n        {%- endif -%}\n      {%- endfor -%}\n      )\n      -- if relation is empty, filter by all columns having null values\n      {% if row_count[0][0] == 0 %}\n        where 1\n        {%- for col in get_columns_in_relation(temp_relation) -%}\n          {{ print(' ') }} AND {{ col.column }} is not NULL\n        {%- endfor -%}\n      {% endif %}\n    );\n    {% endif %}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {%- set partition_columns = config.get('partition_columns', []) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.get_columns_in_relation", "macro.dbt_duckdb.write_to_file", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_duckdb.store_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1358871, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_incremental_duckdb": {"name": "materialization_incremental_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb", "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n  -- only create temp tables if using local duckdb, as it is not currently supported for remote databases\n  {%- set temporary = not adapter.is_motherduck() -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if not temporary %}\n      -- if not using a temporary table we will update the temp relation to use a different temp schema (\"dbt_temp\" by default)\n      {% set temp_relation = temp_relation.incorporate(path=adapter.get_temp_relation_path(this)) %}\n      {% do run_query(create_schema(temp_relation)) %}\n      -- then drop the temp relation after we insert the incremental data into the target relation\n      {% do to_drop.append(temp_relation) %}\n    {% endif %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(temporary, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.create_schema", "macro.dbt.statement", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1416671, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.duckdb__dateadd": {"name": "duckdb__dateadd", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_duckdb.duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    date_add({{ from_date_or_timestamp }}, interval ({{ interval }}) {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.141981, "supported_languages": null}, "macro.dbt_duckdb.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_duckdb.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.142627, "supported_languages": null}, "macro.dbt_duckdb.duckdb__datediff": {"name": "duckdb__datediff", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_duckdb.duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n    {% if datepart == 'week' %}\n            ({{ datediff(first_date, second_date, 'day') }} // 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% else %}\n        (date_diff('{{ datepart }}', {{ first_date }}::timestamp, {{ second_date}}::timestamp ))\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.143302, "supported_languages": null}, "macro.dbt_duckdb.duckdb__any_value": {"name": "duckdb__any_value", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_duckdb.duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1434848, "supported_languages": null}, "macro.dbt_duckdb.register_upstream_external_models": {"name": "register_upstream_external_models", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/upstream.sql", "original_file_path": "macros/utils/upstream.sql", "unique_id": "macro.dbt_duckdb.register_upstream_external_models", "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% if node not in graph['nodes'] %}{% continue %}{% endif %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.145916, "supported_languages": null}, "macro.dbt_duckdb.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/splitpart.sql", "original_file_path": "macros/utils/splitpart.sql", "unique_id": "macro.dbt_duckdb.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.146197, "supported_languages": null}, "macro.dbt_duckdb.duckdb__last_day": {"name": "duckdb__last_day", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/lastday.sql", "original_file_path": "macros/utils/lastday.sql", "unique_id": "macro.dbt_duckdb.duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.146771, "supported_languages": null}, "macro.dbt_duckdb.external_location": {"name": "external_location", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/external_location.sql", "original_file_path": "macros/utils/external_location.sql", "unique_id": "macro.dbt_duckdb.external_location", "macro_sql": "{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.147417, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.148439, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1486669, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.148837, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.149, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.149168, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1495318, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1498759, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.150221, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.150762, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1517289, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1543949, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1546009, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.154868, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.15612, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1563368, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.156547, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.158205, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.159866, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.162614, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.162961, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1631548, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.16326, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.163433, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.163563, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.163796, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.164083, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.168235, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.168482, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.169078, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.16957, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.17025, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.17074, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.171059, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.171443, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1721091, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.172363, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.172597, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.177304, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.179803, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.180518, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.18089, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1811311, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.18184, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.182231, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1826649, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.184436, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.186422, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.186899, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.187186, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1888509, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.189127, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.189876, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.192411, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1949089, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.195978, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1966012, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.197351, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.197622, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.1984441, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.199866, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2018719, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.202178, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }}\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }}\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2030022, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2033129, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.204072, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.204793, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.205608, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.205869, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.206112, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.206434, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.206642, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2069602, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.207175, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.207479, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2076879, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.207863, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.208202, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.208407, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.208729, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.213546, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2151449, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.216497, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.217859, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.218854, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.219146, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.219281, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2196212, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.219815, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2226958, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.225599, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.226836, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.227836, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.228108, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.228662, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.228881, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2290502, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.229223, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.229363, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.229565, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.229708, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.230251, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.230613, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.232002, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.232495, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.232933, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.23352, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.233831, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.234169, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.234619, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.23491, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.23547, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.235913, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2361212, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.236348, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.236574, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2372968, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.238679, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2390988, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.239389, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2397141, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.239957, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.240318, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2405708, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.241139, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.241643, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.241889, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2422342, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.242631, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.243318, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.243784, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2442849, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.244649, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2449028, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.245215, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2453601, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.24568, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.24585, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2461991, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.246351, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.24667, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2468412, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.247535, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2477582, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2481, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2482681, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.24859, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.248775, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2497349, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2498739, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.250487, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2506812, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2508512, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.252456, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.252915, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2533178, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.25363, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.253782, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.254103, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.254273, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.25459, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2547672, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2555451, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.255754, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2562408, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2570372, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2575629, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.257779, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.get_column_names", "macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2579892, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2582872, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.258433, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.259109, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2592828, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.260556, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.260798, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.261104, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2614222, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.261604, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2620559, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.262242, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.262463, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.263092, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.263466, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.263809, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.264083, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2647061, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.266232, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.266908, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.267241, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.268162, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.269501, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.270358, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2706282, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.270907, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.271007, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2716641, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.272334, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.272607, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.273033, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2734132, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.27374, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.274111, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.274316, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2746072, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.27475, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.275389, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.276031, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.276266, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2768798, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.277204, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.277335, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.277718, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.277919, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.278225, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2783191, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.278661, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.278829, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.279186, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2793632, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2799501, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.280425, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.280808, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2810218, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.281389, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.281557, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.281955, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.282333, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2826612, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.282848, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.283155, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2833579, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2836878, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.283849, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.284149, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2844129, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.284748, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.284908, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.285206, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.285335, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2862961, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2864761, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.286668, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2868512, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.287035, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.287209, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2873979, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.287601, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.287791, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.287961, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2881489, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2883232, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.288509, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.288678, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.289001, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.289165, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.28946, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.289588, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.289969, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.290269, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.290447, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2909179, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2912462, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2915242, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.291855, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.292008, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.29245, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2927418, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.293082, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.293248, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.29364, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.293859, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.294049, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.294265, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.294879, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2950559, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.295226, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.295357, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.295842, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.296046, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.296146, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.29634, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.296542, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.297158, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.297319, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.297508, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2979882, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.298341, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.298506, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.298688, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.298847, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.2997482, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.299951, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.300402, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.300748, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.301025, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3013928, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3015978, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.301802, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.302089, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.302718, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.302996, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.303169, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.303749, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.304218, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.304479, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.304853, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3051898, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.305444, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.306988, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.30713, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3073359, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.307471, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.307979, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.308195, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.308338, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.308597, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.308838, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.309099, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.30934, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3096042, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3104231, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.310646, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.310932, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.311193, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.312501, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.312997, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.313216, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3134358, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.313966, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3141692, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3144078, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3146062, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.314912, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3154619, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3165429, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3168561, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.317087, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3173928, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3177202, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.317909, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3181179, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3183959, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3186262, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.318979, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3191838, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.319367, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3195689, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3197582, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.319944, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.320118, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3203468, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.320548, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.322019, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.322216, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.322577, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.322828, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.323072, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3232782, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.324627, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3250291, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.325247, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.325675, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.32595, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.326842, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.327142, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.328067, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.331007, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.331666, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3329659, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.333219, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.333336, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.334233, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.334424, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3353841, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.335862, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3365371, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.337099, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.33719, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3377879, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.338082, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.338444, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.338794, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3391948, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.339842, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.340273, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.341043, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3414102, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.341799, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.342596, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.343959, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.344736, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3460102, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.346613, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.347024, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3476968, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.348683, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.349183, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.349719, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.350305, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3508658, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.351386, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.351845, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.352448, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.353439, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3539798, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.354711, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3551989, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3556101, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.356061, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.35647, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.35702, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.358005, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3586829, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.359861, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.361415, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.365953, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.366462, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.366821, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3679218, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3696818, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3700109, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3702028, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.370728, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.37106, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.371287, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3715851, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3717818, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.372649, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.373504, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.374134, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3748229, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.37509, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.375521, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.375925, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.376555, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.376926, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3773272, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.377909, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.379242, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.379807, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.380276, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3804932, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.381102, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3817081, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.382674, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.383147, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.383478, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.384383, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.386025, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.387049, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.389187, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3895428, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.389704, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3911, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.395115, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.395485, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.39578, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.396597, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.39688, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.397085, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3973088, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.397509, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.397707, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.397918, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3983412, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.3986292, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.399029, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.399675, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.400054, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.40044, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.4015172, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.401941, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.402718, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.403544, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.404127, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.405056, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.4069371, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.408027, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.409002, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.409506, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.41034, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.410911, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.4114518, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.411679, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.412108, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.412787, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.413234, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.413976, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.4144661, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.4146402, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.414808, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.414974, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.415485, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.4163258, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.416909, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.417233, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.4179041, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1743885922.418827, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_transform.copy_gold_tables_to_duckdb": [], "model.dbt_transform.bz_crm_cust_info": ["source.dbt_transform.bronze_source.raw_crm_cust_info"], "model.dbt_transform.bz_erp_loc_a101": ["source.dbt_transform.bronze_source.raw_erp_loc_a101"], "model.dbt_transform.bz_erp_px_cat_g1v2": ["source.dbt_transform.bronze_source.raw_erp_px_cat_g1v2"], "model.dbt_transform.bz_crm_prd_info": ["source.dbt_transform.bronze_source.raw_crm_prd_info"], "model.dbt_transform.bz_crm_sales_details": ["source.dbt_transform.bronze_source.raw_crm_sales_details"], "model.dbt_transform.bz_erp_cust_az12": ["source.dbt_transform.bronze_source.raw_erp_cust_az12"], "model.dbt_transform.crm_prd_info": ["model.dbt_transform.bz_crm_prd_info"], "model.dbt_transform.crm_sales_details": ["model.dbt_transform.bz_crm_sales_details", "model.dbt_transform.crm_prd_info"], "model.dbt_transform.erp_cust_az12": ["model.dbt_transform.bz_erp_cust_az12"], "model.dbt_transform.erp_px_cat_g1v2": ["model.dbt_transform.bz_erp_px_cat_g1v2"], "model.dbt_transform.erp_loc_a101": ["model.dbt_transform.bz_erp_loc_a101"], "model.dbt_transform.crm_cust_info": ["model.dbt_transform.bz_crm_cust_info"], "model.dbt_transform.fact_sales": ["model.dbt_transform.crm_sales_details", "model.dbt_transform.dim_customers_current", "model.dbt_transform.dim_products_current"], "model.dbt_transform.dim_customers_current": ["snapshot.dbt_transform.customers_snapshot"], "model.dbt_transform.dim_products_current": ["snapshot.dbt_transform.products_snapshot"], "model.dbt_transform.dim_products_hist": ["snapshot.dbt_transform.products_snapshot"], "model.dbt_transform.dim_customers_hist": ["snapshot.dbt_transform.customers_snapshot"], "model.dbt_transform.report_products": ["source.dbt_transform.analytics_source.dim_products_current", "source.dbt_transform.analytics_source.fact_sales"], "model.dbt_transform.report_customers": ["source.dbt_transform.analytics_source.dim_customers_current", "source.dbt_transform.analytics_source.fact_sales"], "snapshot.dbt_transform.products_snapshot": ["model.dbt_transform.crm_prd_info", "model.dbt_transform.erp_px_cat_g1v2"], "snapshot.dbt_transform.customers_snapshot": ["model.dbt_transform.crm_cust_info", "model.dbt_transform.erp_cust_az12", "model.dbt_transform.erp_loc_a101"], "analysis.dbt_transform.ranking_exploration": ["source.dbt_transform.analytics_source.dim_customers_current", "source.dbt_transform.analytics_source.dim_products_current", "source.dbt_transform.analytics_source.fact_sales"], "analysis.dbt_transform.performance_analysis": ["source.dbt_transform.analytics_source.dim_products_current", "source.dbt_transform.analytics_source.fact_sales"], "analysis.dbt_transform.magnitude_exploration": ["source.dbt_transform.analytics_source.dim_customers_current", "source.dbt_transform.analytics_source.dim_products_current", "source.dbt_transform.analytics_source.fact_sales"], "analysis.dbt_transform.part_to_whole_analysis": ["source.dbt_transform.analytics_source.dim_products_current", "source.dbt_transform.analytics_source.fact_sales"], "analysis.dbt_transform.segmentation_analysis": ["source.dbt_transform.analytics_source.dim_customers_current", "source.dbt_transform.analytics_source.dim_products_current", "source.dbt_transform.analytics_source.fact_sales"], "analysis.dbt_transform.cumulative_analysis": ["source.dbt_transform.analytics_source.fact_sales"], "analysis.dbt_transform.change_over_time": ["source.dbt_transform.analytics_source.fact_sales"], "analysis.dbt_transform.measures_exploration": ["source.dbt_transform.analytics_source.dim_customers_current", "source.dbt_transform.analytics_source.dim_products_current", "source.dbt_transform.analytics_source.fact_sales"], "analysis.dbt_transform.dimension_exploration": ["source.dbt_transform.analytics_source.dim_products_current"], "analysis.dbt_transform.date_exploration": ["source.dbt_transform.analytics_source.dim_customers_current", "source.dbt_transform.analytics_source.fact_sales"], "test.dbt_transform.fact_sales_join_check": ["model.dbt_transform.dim_customers_current", "model.dbt_transform.dim_products_current", "model.dbt_transform.fact_sales"], "test.dbt_transform.not_null_bz_crm_cust_info_cst_id.aa1840220b": ["model.dbt_transform.bz_crm_cust_info"], "test.dbt_transform.unique_bz_crm_cust_info_cst_id.a9d22060cc": ["model.dbt_transform.bz_crm_cust_info"], "test.dbt_transform.not_null_bz_crm_cust_info_cst_key.6fe1d2bf24": ["model.dbt_transform.bz_crm_cust_info"], "test.dbt_transform.not_null_bz_crm_cust_info_cst_create_date.909692acce": ["model.dbt_transform.bz_crm_cust_info"], "test.dbt_transform.unique_bz_crm_cust_info_cst_email.28870d8715": ["model.dbt_transform.bz_crm_cust_info"], "test.dbt_transform.email_check_bz_crm_cust_info_cst_email.7f2c4cbb21": ["model.dbt_transform.bz_crm_cust_info"], "test.dbt_transform.not_null_bz_crm_cust_info_ingested_at.4d159ceaac": ["model.dbt_transform.bz_crm_cust_info"], "test.dbt_transform.not_null_bz_crm_cust_info_updated_at.f4d174cd12": ["model.dbt_transform.bz_crm_cust_info"], "test.dbt_transform.not_null_bz_crm_prd_info_prd_id.de20ac871d": ["model.dbt_transform.bz_crm_prd_info"], "test.dbt_transform.unique_bz_crm_prd_info_prd_id.12fd88857e": ["model.dbt_transform.bz_crm_prd_info"], "test.dbt_transform.not_null_bz_crm_prd_info_prd_key.18db73cec9": ["model.dbt_transform.bz_crm_prd_info"], "test.dbt_transform.not_null_bz_crm_prd_info_prd_start_dt.620afd0a00": ["model.dbt_transform.bz_crm_prd_info"], "test.dbt_transform.not_null_bz_crm_prd_info_ingested_at.2893c430a5": ["model.dbt_transform.bz_crm_prd_info"], "test.dbt_transform.not_null_bz_crm_prd_info_updated_at.8742d3673b": ["model.dbt_transform.bz_crm_prd_info"], "test.dbt_transform.not_null_bz_crm_sales_details_sls_ord_num.56c7374457": ["model.dbt_transform.bz_crm_sales_details"], "test.dbt_transform.not_null_bz_crm_sales_details_sls_prd_key.8a92f0a74f": ["model.dbt_transform.bz_crm_sales_details"], "test.dbt_transform.not_null_bz_crm_sales_details_sls_cust_id.01831db7c4": ["model.dbt_transform.bz_crm_sales_details"], "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_order_dt.7f1b4100eb": ["model.dbt_transform.bz_crm_sales_details"], "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_ship_dt.7335e91999": ["model.dbt_transform.bz_crm_sales_details"], "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_due_dt.53fba7324b": ["model.dbt_transform.bz_crm_sales_details"], "test.dbt_transform.not_null_bz_crm_sales_details_sls_quantity.d87cd738e5": ["model.dbt_transform.bz_crm_sales_details"], "test.dbt_transform.not_null_bz_crm_sales_details_ingested_at.23dcba1d80": ["model.dbt_transform.bz_crm_sales_details"], "test.dbt_transform.not_null_bz_crm_sales_details_updated_at.d78d14353f": ["model.dbt_transform.bz_crm_sales_details"], "test.dbt_transform.not_null_bz_erp_cust_az12_cid.774c60760d": ["model.dbt_transform.bz_erp_cust_az12"], "test.dbt_transform.not_null_bz_erp_cust_az12_ingested_at.c3826ee9f9": ["model.dbt_transform.bz_erp_cust_az12"], "test.dbt_transform.not_null_bz_erp_cust_az12_updated_at.aed585f42f": ["model.dbt_transform.bz_erp_cust_az12"], "test.dbt_transform.not_null_bz_erp_loc_a101_cid.91e1f30b67": ["model.dbt_transform.bz_erp_loc_a101"], "test.dbt_transform.not_null_bz_erp_loc_a101_ingested_at.749d640110": ["model.dbt_transform.bz_erp_loc_a101"], "test.dbt_transform.not_null_bz_erp_loc_a101_updated_at.674384578b": ["model.dbt_transform.bz_erp_loc_a101"], "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_id.965f4cf4ac": ["model.dbt_transform.bz_erp_px_cat_g1v2"], "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_ingested_at.b4f577cb11": ["model.dbt_transform.bz_erp_px_cat_g1v2"], "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_updated_at.210fe71e5d": ["model.dbt_transform.bz_erp_px_cat_g1v2"], "test.dbt_transform.not_null_crm_cust_info_cst_id.91241b201c": ["model.dbt_transform.crm_cust_info"], "test.dbt_transform.unique_crm_cust_info_cst_id.7c73f5004c": ["model.dbt_transform.crm_cust_info"], "test.dbt_transform.not_null_crm_cust_info_cst_code.58506a711c": ["model.dbt_transform.crm_cust_info"], "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_code.ab58decf40": ["model.dbt_transform.crm_cust_info"], "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_firstname.96efd6996d": ["model.dbt_transform.crm_cust_info"], "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_lastname.2a16cae8de": ["model.dbt_transform.crm_cust_info"], "test.dbt_transform.accepted_values_crm_cust_info_cst_marital_status__Married__Single__n_a.d012437934": ["model.dbt_transform.crm_cust_info"], "test.dbt_transform.accepted_values_crm_cust_info_cst_gndr__Male__Female__n_a.ddceddf11e": ["model.dbt_transform.crm_cust_info"], "test.dbt_transform.unique_crm_cust_info_cst_email.139300d73f": ["model.dbt_transform.crm_cust_info"], "test.dbt_transform.email_check_crm_cust_info_cst_email.e0248dc48c": ["model.dbt_transform.crm_cust_info"], "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_place.2e379fe18c": ["model.dbt_transform.crm_cust_info"], "test.dbt_transform.not_null_crm_cust_info_cst_create_date.9a462c5eb4": ["model.dbt_transform.crm_cust_info"], "test.dbt_transform.not_null_crm_cust_info_ingested_at.4df149d26c": ["model.dbt_transform.crm_cust_info"], "test.dbt_transform.not_null_crm_cust_info_updated_at.3308fe3c4e": ["model.dbt_transform.crm_cust_info"], "test.dbt_transform.not_null_crm_prd_info_prd_id.2f30e67051": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.unique_crm_prd_info_prd_id.f3cfe19adf": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.not_null_crm_prd_info_cat_id.5024f04cdb": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.not_null_crm_prd_info_prd_code.a15839d0cd": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.custom_trimmed_check_crm_prd_info_prd_code.05162b5d85": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.not_null_crm_prd_info_prd_nm.119673e4d4": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.custom_trimmed_check_crm_prd_info_prd_nm.d1865c7e7d": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.not_null_crm_prd_info_prd_cost.279fd05d93": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.dbt_utils_expression_is_true_crm_prd_info_prd_cost___0.605c9255ee": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.accepted_values_crm_prd_info_prd_line__Mountains__Road__Sales__Touring__n_a.2e1af5bd62": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.not_null_crm_prd_info_prd_start_date.83b2f0095a": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.not_null_crm_prd_info_prd_end_date.4bac02b05d": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.dbt_utils_expression_is_true_crm_prd_info_prd_end_date___prd_start_date.6cc3176193": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.not_null_crm_prd_info_ingested_at.6858ecc3e5": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.not_null_crm_prd_info_updated_at.fc3e5e584c": ["model.dbt_transform.crm_prd_info"], "test.dbt_transform.not_null_crm_sales_details_sls_ord_num.284ab08e44": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.custom_trimmed_check_crm_sales_details_sls_ord_num.167f0728aa": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.not_null_crm_sales_details_sls_prd_key.1a14bfff89": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.custom_trimmed_check_crm_sales_details_sls_prd_key.a501150291": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.not_null_crm_sales_details_sls_cust_id.0a46ca14bf": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.not_null_crm_sales_details_sls_sales.9250f7ded0": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_sales___0.32b636e941": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.not_null_crm_sales_details_sls_quantity.4c23255cdd": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_quantity___0.80310b3b9b": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.not_null_crm_sales_details_sls_price.ab8d58b73d": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_price___0.88b98ec27b": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.not_null_crm_sales_details_ingested_at.665ecb63bb": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.not_null_crm_sales_details_updated_at.329e7c70af": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_order_dt_sls_ship_dt_AND_sls_order_dt_sls_due_dt.76971c3329": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_ABS_sls_sales_sls_quantity_sls_price_0_01.d2788e1779": ["model.dbt_transform.crm_sales_details"], "test.dbt_transform.not_null_erp_cust_az12_cid.85e0f9c5c3": ["model.dbt_transform.erp_cust_az12"], "test.dbt_transform.custom_trimmed_check_erp_cust_az12_cid.0e1740cd50": ["model.dbt_transform.erp_cust_az12"], "test.dbt_transform.accepted_values_erp_cust_az12_gen__Male__Female__n_a.a4899b28d0": ["model.dbt_transform.erp_cust_az12"], "test.dbt_transform.not_null_erp_cust_az12_ingested_at.a86586ca8a": ["model.dbt_transform.erp_cust_az12"], "test.dbt_transform.not_null_erp_cust_az12_updated_at.9fd920946d": ["model.dbt_transform.erp_cust_az12"], "test.dbt_transform.not_null_erp_loc_a101_cid.babef803af": ["model.dbt_transform.erp_loc_a101"], "test.dbt_transform.custom_trimmed_check_erp_loc_a101_cid.b5c96a26e9": ["model.dbt_transform.erp_loc_a101"], "test.dbt_transform.custom_trimmed_check_erp_loc_a101_cntry.e764b06576": ["model.dbt_transform.erp_loc_a101"], "test.dbt_transform.accepted_values_erp_loc_a101_cntry__Australia__Canada__France__Germany__United_Kingdom__United_States__n_a.8b1d17bcc2": ["model.dbt_transform.erp_loc_a101"], "test.dbt_transform.not_null_erp_loc_a101_ingested_at.5fa40abeeb": ["model.dbt_transform.erp_loc_a101"], "test.dbt_transform.not_null_erp_loc_a101_updated_at.66ab7ce54c": ["model.dbt_transform.erp_loc_a101"], "test.dbt_transform.not_null_erp_px_cat_g1v2_id.b5825d0c02": ["model.dbt_transform.erp_px_cat_g1v2"], "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_id.92860219f5": ["model.dbt_transform.erp_px_cat_g1v2"], "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_cat.5b96c7bce1": ["model.dbt_transform.erp_px_cat_g1v2"], "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_subcat.164f225283": ["model.dbt_transform.erp_px_cat_g1v2"], "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_maintenance_status.c2f302cba9": ["model.dbt_transform.erp_px_cat_g1v2"], "test.dbt_transform.accepted_values_erp_px_cat_g1v2_maintenance_status__Yes__No.579d39cf7d": ["model.dbt_transform.erp_px_cat_g1v2"], "test.dbt_transform.not_null_erp_px_cat_g1v2_ingested_at.b8fc6358c1": ["model.dbt_transform.erp_px_cat_g1v2"], "test.dbt_transform.not_null_erp_px_cat_g1v2_updated_at.64f8508b6f": ["model.dbt_transform.erp_px_cat_g1v2"], "test.dbt_transform.not_null_dim_customers_current_customer_key.37ac625538": ["model.dbt_transform.dim_customers_current"], "test.dbt_transform.unique_dim_customers_current_customer_key.08d4b3b146": ["model.dbt_transform.dim_customers_current"], "test.dbt_transform.not_null_dim_customers_current_customer_id.1e15b0f415": ["model.dbt_transform.dim_customers_current"], "test.dbt_transform.not_null_dim_customers_current_customer_code.dc65fd1b8d": ["model.dbt_transform.dim_customers_current"], "test.dbt_transform.relationships_dim_customers_current_customer_code__cid__ref_erp_cust_az12_.0a9649b542": ["model.dbt_transform.dim_customers_current", "model.dbt_transform.erp_cust_az12"], "test.dbt_transform.relationships_dim_customers_current_customer_code__cid__ref_erp_loc_a101_.f2a45edd5c": ["model.dbt_transform.dim_customers_current", "model.dbt_transform.erp_loc_a101"], "test.dbt_transform.custom_trimmed_check_dim_customers_current_customer_firstname.6ffb6e70e8": ["model.dbt_transform.dim_customers_current"], "test.dbt_transform.custom_trimmed_check_dim_customers_current_customer_lastname.4fb9107fc7": ["model.dbt_transform.dim_customers_current"], "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_current_customer_birthdate___CURRENT_DATE_INTERVAL_18_years_.722cf38f8a": ["model.dbt_transform.dim_customers_current"], "test.dbt_transform.accepted_values_dim_customers_current_customer_gender__Male__Female__n_a.d1e41f77b4": ["model.dbt_transform.dim_customers_current"], "test.dbt_transform.accepted_values_dim_customers_current_customer_marital_status__Married__Single__n_a.f9912a886b": ["model.dbt_transform.dim_customers_current"], "test.dbt_transform.email_check_dim_customers_current_customer_email.510a4f64f7": ["model.dbt_transform.dim_customers_current"], "test.dbt_transform.not_null_dim_customers_current_customer_create_date.f9357ccf66": ["model.dbt_transform.dim_customers_current"], "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_current_customer_create_date___CURRENT_DATE.a7cb8fcbd9": ["model.dbt_transform.dim_customers_current"], "test.dbt_transform.not_null_dim_customers_hist_customer_key.60fa59698a": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.unique_dim_customers_hist_customer_key.e6329f08c7": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.not_null_dim_customers_hist_customer_id.ce18adacfe": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.not_null_dim_customers_hist_customer_code.5954a024ee": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.relationships_dim_customers_hist_customer_code__cid__ref_erp_cust_az12_.e1cbda855d": ["model.dbt_transform.dim_customers_hist", "model.dbt_transform.erp_cust_az12"], "test.dbt_transform.relationships_dim_customers_hist_customer_code__cid__ref_erp_loc_a101_.1cff523225": ["model.dbt_transform.dim_customers_hist", "model.dbt_transform.erp_loc_a101"], "test.dbt_transform.custom_trimmed_check_dim_customers_hist_customer_firstname.d868abb141": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.custom_trimmed_check_dim_customers_hist_customer_lastname.742a0744a8": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_customer_birthdate___CURRENT_DATE_INTERVAL_18_years_.31d74b4ea7": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.accepted_values_dim_customers_hist_customer_gender__Male__Female__n_a.d766a33adc": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.accepted_values_dim_customers_hist_customer_marital_status__Married__Single__n_a.cdaca57546": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.email_check_dim_customers_hist_customer_email.99784c6897": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.not_null_dim_customers_hist_customer_create_date.bd19ea11a1": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_customer_create_date___CURRENT_DATE.f81299d118": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.not_null_dim_customers_hist_valid_from.eea34cae68": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.not_null_dim_customers_hist_valid_to.1f4b64bed1": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_valid_to___valid_from.0ea133f63d": ["model.dbt_transform.dim_customers_hist"], "test.dbt_transform.not_null_dim_products_current_product_key.3e63d180f9": ["model.dbt_transform.dim_products_current"], "test.dbt_transform.unique_dim_products_current_product_key.fc3de2b35c": ["model.dbt_transform.dim_products_current"], "test.dbt_transform.not_null_dim_products_current_product_id.c8cb27b7ea": ["model.dbt_transform.dim_products_current"], "test.dbt_transform.not_null_dim_products_current_product_code.e0869b5c14": ["model.dbt_transform.dim_products_current"], "test.dbt_transform.not_null_dim_products_current_product_name.dd03b9e6f4": ["model.dbt_transform.dim_products_current"], "test.dbt_transform.custom_trimmed_check_dim_products_current_product_name.0724974f29": ["model.dbt_transform.dim_products_current"], "test.dbt_transform.not_null_dim_products_current_product_cat_id.c777c239b5": ["model.dbt_transform.dim_products_current"], "test.dbt_transform.accepted_values_dim_products_current_product_maintenance_status__Yes__No.07bfd01f6a": ["model.dbt_transform.dim_products_current"], "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_cost___0.e6c37c46c8": ["model.dbt_transform.dim_products_current"], "test.dbt_transform.accepted_values_dim_products_current_product_line__Mountains__Road__Sales__Touring__n_a.e8f2855826": ["model.dbt_transform.dim_products_current"], "test.dbt_transform.not_null_dim_products_current_product_start_date.ca24d0e0fe": ["model.dbt_transform.dim_products_current"], "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_start_date___CURRENT_DATE.2300366280": ["model.dbt_transform.dim_products_current"], "test.dbt_transform.not_null_dim_products_current_product_end_date.929c3a8649": ["model.dbt_transform.dim_products_current"], "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_end_date___product_start_date.451cdfe750": ["model.dbt_transform.dim_products_current"], "test.dbt_transform.not_null_dim_products_hist_product_key.5c97ee0e15": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.unique_dim_products_hist_product_key.a6021809c2": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.not_null_dim_products_hist_product_id.6a326106a1": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.not_null_dim_products_hist_product_code.c6aaeb0242": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.not_null_dim_products_hist_product_name.d9be5ad187": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.custom_trimmed_check_dim_products_hist_product_name.bf225459e3": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.not_null_dim_products_hist_product_cat_id.d281f01d43": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.accepted_values_dim_products_hist_product_maintenance_status__Yes__No.af5c46a5ea": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_cost___0.17db2580f3": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.accepted_values_dim_products_hist_product_line__Mountains__Road__Sales__Touring__n_a.a57388378b": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.not_null_dim_products_hist_product_start_date.54f355684a": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_start_date___CURRENT_DATE.dedbbf6f62": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.not_null_dim_products_hist_product_end_date.a81a2dc90d": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_end_date___product_start_date.939b927a80": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.not_null_dim_products_hist_valid_from.3aa7d58fff": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.not_null_dim_products_hist_valid_to.8dcbbd24da": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_valid_to___valid_from.375df757f5": ["model.dbt_transform.dim_products_hist"], "test.dbt_transform.unique_fact_sales_sales_details_key.5f8b370051": ["model.dbt_transform.fact_sales"], "test.dbt_transform.not_null_fact_sales_sales_details_key.0281f867b8": ["model.dbt_transform.fact_sales"], "test.dbt_transform.not_null_fact_sales_sales_order_number.804723385c": ["model.dbt_transform.fact_sales"], "test.dbt_transform.relationships_fact_sales_product_key__product_key__ref_dim_products_current_.004155aa94": ["model.dbt_transform.dim_products_current", "model.dbt_transform.fact_sales"], "test.dbt_transform.relationships_fact_sales_customer_key__customer_key__ref_dim_customers_current_.7f8b6f7f32": ["model.dbt_transform.dim_customers_current", "model.dbt_transform.fact_sales"], "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_amount___0.df4e090748": ["model.dbt_transform.fact_sales"], "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_quantity___0.478922c950": ["model.dbt_transform.fact_sales"], "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_order_date___CURRENT_DATE.89a8a9abbc": ["model.dbt_transform.fact_sales"], "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_shipping_date___sales_order_date.2343579795": ["model.dbt_transform.fact_sales"], "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_due_date___sales_order_date.739676ef8b": ["model.dbt_transform.fact_sales"], "test.dbt_transform.relationships_customers_snapshot_cst_code__cid__ref_erp_cust_az12_.5bf61612cf": ["model.dbt_transform.erp_cust_az12", "snapshot.dbt_transform.customers_snapshot"], "test.dbt_transform.relationships_customers_snapshot_cst_code__cid__ref_erp_loc_a101_.7922ee1486": ["model.dbt_transform.erp_loc_a101", "snapshot.dbt_transform.customers_snapshot"], "test.dbt_transform.not_null_customers_snapshot_dbt_valid_from.9ebd11d9e2": ["snapshot.dbt_transform.customers_snapshot"], "test.dbt_transform.not_null_customers_snapshot_dbt_valid_to.e956fef5d5": ["snapshot.dbt_transform.customers_snapshot"], "test.dbt_transform.not_null_customers_snapshot_dbt_updated_at.1b87573d98": ["snapshot.dbt_transform.customers_snapshot"], "test.dbt_transform.not_null_customers_snapshot_dbt_scd_id.d7c60e61aa": ["snapshot.dbt_transform.customers_snapshot"], "test.dbt_transform.unique_customers_snapshot_dbt_scd_id.bae3323096": ["snapshot.dbt_transform.customers_snapshot"], "test.dbt_transform.relationships_products_snapshot_cat_id__id__ref_erp_px_cat_g1v2_.cc6c4d367a": ["model.dbt_transform.erp_px_cat_g1v2", "snapshot.dbt_transform.products_snapshot"], "test.dbt_transform.not_null_products_snapshot_prd_cost.4ac4c0c981": ["snapshot.dbt_transform.products_snapshot"], "test.dbt_transform.dbt_utils_expression_is_true_products_snapshot_prd_cost___0.fb10396e3b": ["snapshot.dbt_transform.products_snapshot"], "test.dbt_transform.custom_trimmed_check_products_snapshot_erp_maintenance_status.837fe8b155": ["snapshot.dbt_transform.products_snapshot"], "test.dbt_transform.accepted_values_products_snapshot_erp_maintenance_status__Yes__No.8d1595112e": ["snapshot.dbt_transform.products_snapshot"], "test.dbt_transform.not_null_products_snapshot_dbt_valid_from.5230dba4ac": ["snapshot.dbt_transform.products_snapshot"], "test.dbt_transform.not_null_products_snapshot_dbt_valid_to.8a79b7bfba": ["snapshot.dbt_transform.products_snapshot"], "test.dbt_transform.not_null_products_snapshot_dbt_updated_at.f51bf4bd85": ["snapshot.dbt_transform.products_snapshot"], "test.dbt_transform.not_null_products_snapshot_dbt_scd_id.3b1bf37123": ["snapshot.dbt_transform.products_snapshot"], "test.dbt_transform.unique_products_snapshot_dbt_scd_id.64e0b38135": ["snapshot.dbt_transform.products_snapshot"], "source.dbt_transform.bronze_source.raw_crm_cust_info": [], "source.dbt_transform.bronze_source.raw_crm_prd_info": [], "source.dbt_transform.bronze_source.raw_crm_sales_details": [], "source.dbt_transform.bronze_source.raw_erp_cust_az12": [], "source.dbt_transform.bronze_source.raw_erp_loc_a101": [], "source.dbt_transform.bronze_source.raw_erp_px_cat_g1v2": [], "source.dbt_transform.silver_source.bz_crm_cust_info": [], "source.dbt_transform.silver_source.bz_crm_prd_info": [], "source.dbt_transform.silver_source.bz_crm_sales_details": [], "source.dbt_transform.silver_source.bz_erp_cust_az12": [], "source.dbt_transform.silver_source.bz_erp_loc_a101": [], "source.dbt_transform.silver_source.bz_erp_px_cat_g1v2": [], "source.dbt_transform.gold_source.crm_cust_info": [], "source.dbt_transform.gold_source.crm_prd_info": [], "source.dbt_transform.gold_source.crm_sales_details": [], "source.dbt_transform.gold_source.erp_cust_az12": [], "source.dbt_transform.gold_source.erp_loc_a101": [], "source.dbt_transform.gold_source.erp_px_cat_g1v2": [], "source.dbt_transform.analytics_source.dim_customers_current": [], "source.dbt_transform.analytics_source.dim_products_current": [], "source.dbt_transform.analytics_source.fact_sales": []}, "child_map": {"model.dbt_transform.copy_gold_tables_to_duckdb": [], "model.dbt_transform.bz_crm_cust_info": ["model.dbt_transform.crm_cust_info", "test.dbt_transform.email_check_bz_crm_cust_info_cst_email.7f2c4cbb21", "test.dbt_transform.not_null_bz_crm_cust_info_cst_create_date.909692acce", "test.dbt_transform.not_null_bz_crm_cust_info_cst_id.aa1840220b", "test.dbt_transform.not_null_bz_crm_cust_info_cst_key.6fe1d2bf24", "test.dbt_transform.not_null_bz_crm_cust_info_ingested_at.4d159ceaac", "test.dbt_transform.not_null_bz_crm_cust_info_updated_at.f4d174cd12", "test.dbt_transform.unique_bz_crm_cust_info_cst_email.28870d8715", "test.dbt_transform.unique_bz_crm_cust_info_cst_id.a9d22060cc"], "model.dbt_transform.bz_erp_loc_a101": ["model.dbt_transform.erp_loc_a101", "test.dbt_transform.not_null_bz_erp_loc_a101_cid.91e1f30b67", "test.dbt_transform.not_null_bz_erp_loc_a101_ingested_at.749d640110", "test.dbt_transform.not_null_bz_erp_loc_a101_updated_at.674384578b"], "model.dbt_transform.bz_erp_px_cat_g1v2": ["model.dbt_transform.erp_px_cat_g1v2", "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_id.965f4cf4ac", "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_ingested_at.b4f577cb11", "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_updated_at.210fe71e5d"], "model.dbt_transform.bz_crm_prd_info": ["model.dbt_transform.crm_prd_info", "test.dbt_transform.not_null_bz_crm_prd_info_ingested_at.2893c430a5", "test.dbt_transform.not_null_bz_crm_prd_info_prd_id.de20ac871d", "test.dbt_transform.not_null_bz_crm_prd_info_prd_key.18db73cec9", "test.dbt_transform.not_null_bz_crm_prd_info_prd_start_dt.620afd0a00", "test.dbt_transform.not_null_bz_crm_prd_info_updated_at.8742d3673b", "test.dbt_transform.unique_bz_crm_prd_info_prd_id.12fd88857e"], "model.dbt_transform.bz_crm_sales_details": ["model.dbt_transform.crm_sales_details", "test.dbt_transform.not_null_bz_crm_sales_details_ingested_at.23dcba1d80", "test.dbt_transform.not_null_bz_crm_sales_details_sls_cust_id.01831db7c4", "test.dbt_transform.not_null_bz_crm_sales_details_sls_ord_num.56c7374457", "test.dbt_transform.not_null_bz_crm_sales_details_sls_prd_key.8a92f0a74f", "test.dbt_transform.not_null_bz_crm_sales_details_sls_quantity.d87cd738e5", "test.dbt_transform.not_null_bz_crm_sales_details_updated_at.d78d14353f", "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_due_dt.53fba7324b", "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_order_dt.7f1b4100eb", "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_ship_dt.7335e91999"], "model.dbt_transform.bz_erp_cust_az12": ["model.dbt_transform.erp_cust_az12", "test.dbt_transform.not_null_bz_erp_cust_az12_cid.774c60760d", "test.dbt_transform.not_null_bz_erp_cust_az12_ingested_at.c3826ee9f9", "test.dbt_transform.not_null_bz_erp_cust_az12_updated_at.aed585f42f"], "model.dbt_transform.crm_prd_info": ["model.dbt_transform.crm_sales_details", "snapshot.dbt_transform.products_snapshot", "test.dbt_transform.accepted_values_crm_prd_info_prd_line__Mountains__Road__Sales__Touring__n_a.2e1af5bd62", "test.dbt_transform.custom_trimmed_check_crm_prd_info_prd_code.05162b5d85", "test.dbt_transform.custom_trimmed_check_crm_prd_info_prd_nm.d1865c7e7d", "test.dbt_transform.dbt_utils_expression_is_true_crm_prd_info_prd_cost___0.605c9255ee", "test.dbt_transform.dbt_utils_expression_is_true_crm_prd_info_prd_end_date___prd_start_date.6cc3176193", "test.dbt_transform.not_null_crm_prd_info_cat_id.5024f04cdb", "test.dbt_transform.not_null_crm_prd_info_ingested_at.6858ecc3e5", "test.dbt_transform.not_null_crm_prd_info_prd_code.a15839d0cd", "test.dbt_transform.not_null_crm_prd_info_prd_cost.279fd05d93", "test.dbt_transform.not_null_crm_prd_info_prd_end_date.4bac02b05d", "test.dbt_transform.not_null_crm_prd_info_prd_id.2f30e67051", "test.dbt_transform.not_null_crm_prd_info_prd_nm.119673e4d4", "test.dbt_transform.not_null_crm_prd_info_prd_start_date.83b2f0095a", "test.dbt_transform.not_null_crm_prd_info_updated_at.fc3e5e584c", "test.dbt_transform.unique_crm_prd_info_prd_id.f3cfe19adf"], "model.dbt_transform.crm_sales_details": ["model.dbt_transform.fact_sales", "test.dbt_transform.custom_trimmed_check_crm_sales_details_sls_ord_num.167f0728aa", "test.dbt_transform.custom_trimmed_check_crm_sales_details_sls_prd_key.a501150291", "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_ABS_sls_sales_sls_quantity_sls_price_0_01.d2788e1779", "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_order_dt_sls_ship_dt_AND_sls_order_dt_sls_due_dt.76971c3329", "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_price___0.88b98ec27b", "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_quantity___0.80310b3b9b", "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_sales___0.32b636e941", "test.dbt_transform.not_null_crm_sales_details_ingested_at.665ecb63bb", "test.dbt_transform.not_null_crm_sales_details_sls_cust_id.0a46ca14bf", "test.dbt_transform.not_null_crm_sales_details_sls_ord_num.284ab08e44", "test.dbt_transform.not_null_crm_sales_details_sls_prd_key.1a14bfff89", "test.dbt_transform.not_null_crm_sales_details_sls_price.ab8d58b73d", "test.dbt_transform.not_null_crm_sales_details_sls_quantity.4c23255cdd", "test.dbt_transform.not_null_crm_sales_details_sls_sales.9250f7ded0", "test.dbt_transform.not_null_crm_sales_details_updated_at.329e7c70af"], "model.dbt_transform.erp_cust_az12": ["snapshot.dbt_transform.customers_snapshot", "test.dbt_transform.accepted_values_erp_cust_az12_gen__Male__Female__n_a.a4899b28d0", "test.dbt_transform.custom_trimmed_check_erp_cust_az12_cid.0e1740cd50", "test.dbt_transform.not_null_erp_cust_az12_cid.85e0f9c5c3", "test.dbt_transform.not_null_erp_cust_az12_ingested_at.a86586ca8a", "test.dbt_transform.not_null_erp_cust_az12_updated_at.9fd920946d", "test.dbt_transform.relationships_customers_snapshot_cst_code__cid__ref_erp_cust_az12_.5bf61612cf", "test.dbt_transform.relationships_dim_customers_current_customer_code__cid__ref_erp_cust_az12_.0a9649b542", "test.dbt_transform.relationships_dim_customers_hist_customer_code__cid__ref_erp_cust_az12_.e1cbda855d"], "model.dbt_transform.erp_px_cat_g1v2": ["snapshot.dbt_transform.products_snapshot", "test.dbt_transform.accepted_values_erp_px_cat_g1v2_maintenance_status__Yes__No.579d39cf7d", "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_cat.5b96c7bce1", "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_id.92860219f5", "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_maintenance_status.c2f302cba9", "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_subcat.164f225283", "test.dbt_transform.not_null_erp_px_cat_g1v2_id.b5825d0c02", "test.dbt_transform.not_null_erp_px_cat_g1v2_ingested_at.b8fc6358c1", "test.dbt_transform.not_null_erp_px_cat_g1v2_updated_at.64f8508b6f", "test.dbt_transform.relationships_products_snapshot_cat_id__id__ref_erp_px_cat_g1v2_.cc6c4d367a"], "model.dbt_transform.erp_loc_a101": ["snapshot.dbt_transform.customers_snapshot", "test.dbt_transform.accepted_values_erp_loc_a101_cntry__Australia__Canada__France__Germany__United_Kingdom__United_States__n_a.8b1d17bcc2", "test.dbt_transform.custom_trimmed_check_erp_loc_a101_cid.b5c96a26e9", "test.dbt_transform.custom_trimmed_check_erp_loc_a101_cntry.e764b06576", "test.dbt_transform.not_null_erp_loc_a101_cid.babef803af", "test.dbt_transform.not_null_erp_loc_a101_ingested_at.5fa40abeeb", "test.dbt_transform.not_null_erp_loc_a101_updated_at.66ab7ce54c", "test.dbt_transform.relationships_customers_snapshot_cst_code__cid__ref_erp_loc_a101_.7922ee1486", "test.dbt_transform.relationships_dim_customers_current_customer_code__cid__ref_erp_loc_a101_.f2a45edd5c", "test.dbt_transform.relationships_dim_customers_hist_customer_code__cid__ref_erp_loc_a101_.1cff523225"], "model.dbt_transform.crm_cust_info": ["snapshot.dbt_transform.customers_snapshot", "test.dbt_transform.accepted_values_crm_cust_info_cst_gndr__Male__Female__n_a.ddceddf11e", "test.dbt_transform.accepted_values_crm_cust_info_cst_marital_status__Married__Single__n_a.d012437934", "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_code.ab58decf40", "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_firstname.96efd6996d", "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_lastname.2a16cae8de", "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_place.2e379fe18c", "test.dbt_transform.email_check_crm_cust_info_cst_email.e0248dc48c", "test.dbt_transform.not_null_crm_cust_info_cst_code.58506a711c", "test.dbt_transform.not_null_crm_cust_info_cst_create_date.9a462c5eb4", "test.dbt_transform.not_null_crm_cust_info_cst_id.91241b201c", "test.dbt_transform.not_null_crm_cust_info_ingested_at.4df149d26c", "test.dbt_transform.not_null_crm_cust_info_updated_at.3308fe3c4e", "test.dbt_transform.unique_crm_cust_info_cst_email.139300d73f", "test.dbt_transform.unique_crm_cust_info_cst_id.7c73f5004c"], "model.dbt_transform.fact_sales": ["test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_amount___0.df4e090748", "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_due_date___sales_order_date.739676ef8b", "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_order_date___CURRENT_DATE.89a8a9abbc", "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_quantity___0.478922c950", "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_shipping_date___sales_order_date.2343579795", "test.dbt_transform.fact_sales_join_check", "test.dbt_transform.not_null_fact_sales_sales_details_key.0281f867b8", "test.dbt_transform.not_null_fact_sales_sales_order_number.804723385c", "test.dbt_transform.relationships_fact_sales_customer_key__customer_key__ref_dim_customers_current_.7f8b6f7f32", "test.dbt_transform.relationships_fact_sales_product_key__product_key__ref_dim_products_current_.004155aa94", "test.dbt_transform.unique_fact_sales_sales_details_key.5f8b370051"], "model.dbt_transform.dim_customers_current": ["model.dbt_transform.fact_sales", "test.dbt_transform.accepted_values_dim_customers_current_customer_gender__Male__Female__n_a.d1e41f77b4", "test.dbt_transform.accepted_values_dim_customers_current_customer_marital_status__Married__Single__n_a.f9912a886b", "test.dbt_transform.custom_trimmed_check_dim_customers_current_customer_firstname.6ffb6e70e8", "test.dbt_transform.custom_trimmed_check_dim_customers_current_customer_lastname.4fb9107fc7", "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_current_customer_birthdate___CURRENT_DATE_INTERVAL_18_years_.722cf38f8a", "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_current_customer_create_date___CURRENT_DATE.a7cb8fcbd9", "test.dbt_transform.email_check_dim_customers_current_customer_email.510a4f64f7", "test.dbt_transform.fact_sales_join_check", "test.dbt_transform.not_null_dim_customers_current_customer_code.dc65fd1b8d", "test.dbt_transform.not_null_dim_customers_current_customer_create_date.f9357ccf66", "test.dbt_transform.not_null_dim_customers_current_customer_id.1e15b0f415", "test.dbt_transform.not_null_dim_customers_current_customer_key.37ac625538", "test.dbt_transform.relationships_dim_customers_current_customer_code__cid__ref_erp_cust_az12_.0a9649b542", "test.dbt_transform.relationships_dim_customers_current_customer_code__cid__ref_erp_loc_a101_.f2a45edd5c", "test.dbt_transform.relationships_fact_sales_customer_key__customer_key__ref_dim_customers_current_.7f8b6f7f32", "test.dbt_transform.unique_dim_customers_current_customer_key.08d4b3b146"], "model.dbt_transform.dim_products_current": ["model.dbt_transform.fact_sales", "test.dbt_transform.accepted_values_dim_products_current_product_line__Mountains__Road__Sales__Touring__n_a.e8f2855826", "test.dbt_transform.accepted_values_dim_products_current_product_maintenance_status__Yes__No.07bfd01f6a", "test.dbt_transform.custom_trimmed_check_dim_products_current_product_name.0724974f29", "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_cost___0.e6c37c46c8", "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_end_date___product_start_date.451cdfe750", "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_start_date___CURRENT_DATE.2300366280", "test.dbt_transform.fact_sales_join_check", "test.dbt_transform.not_null_dim_products_current_product_cat_id.c777c239b5", "test.dbt_transform.not_null_dim_products_current_product_code.e0869b5c14", "test.dbt_transform.not_null_dim_products_current_product_end_date.929c3a8649", "test.dbt_transform.not_null_dim_products_current_product_id.c8cb27b7ea", "test.dbt_transform.not_null_dim_products_current_product_key.3e63d180f9", "test.dbt_transform.not_null_dim_products_current_product_name.dd03b9e6f4", "test.dbt_transform.not_null_dim_products_current_product_start_date.ca24d0e0fe", "test.dbt_transform.relationships_fact_sales_product_key__product_key__ref_dim_products_current_.004155aa94", "test.dbt_transform.unique_dim_products_current_product_key.fc3de2b35c"], "model.dbt_transform.dim_products_hist": ["test.dbt_transform.accepted_values_dim_products_hist_product_line__Mountains__Road__Sales__Touring__n_a.a57388378b", "test.dbt_transform.accepted_values_dim_products_hist_product_maintenance_status__Yes__No.af5c46a5ea", "test.dbt_transform.custom_trimmed_check_dim_products_hist_product_name.bf225459e3", "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_cost___0.17db2580f3", "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_end_date___product_start_date.939b927a80", "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_start_date___CURRENT_DATE.dedbbf6f62", "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_valid_to___valid_from.375df757f5", "test.dbt_transform.not_null_dim_products_hist_product_cat_id.d281f01d43", "test.dbt_transform.not_null_dim_products_hist_product_code.c6aaeb0242", "test.dbt_transform.not_null_dim_products_hist_product_end_date.a81a2dc90d", "test.dbt_transform.not_null_dim_products_hist_product_id.6a326106a1", "test.dbt_transform.not_null_dim_products_hist_product_key.5c97ee0e15", "test.dbt_transform.not_null_dim_products_hist_product_name.d9be5ad187", "test.dbt_transform.not_null_dim_products_hist_product_start_date.54f355684a", "test.dbt_transform.not_null_dim_products_hist_valid_from.3aa7d58fff", "test.dbt_transform.not_null_dim_products_hist_valid_to.8dcbbd24da", "test.dbt_transform.unique_dim_products_hist_product_key.a6021809c2"], "model.dbt_transform.dim_customers_hist": ["test.dbt_transform.accepted_values_dim_customers_hist_customer_gender__Male__Female__n_a.d766a33adc", "test.dbt_transform.accepted_values_dim_customers_hist_customer_marital_status__Married__Single__n_a.cdaca57546", "test.dbt_transform.custom_trimmed_check_dim_customers_hist_customer_firstname.d868abb141", "test.dbt_transform.custom_trimmed_check_dim_customers_hist_customer_lastname.742a0744a8", "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_customer_birthdate___CURRENT_DATE_INTERVAL_18_years_.31d74b4ea7", "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_customer_create_date___CURRENT_DATE.f81299d118", "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_valid_to___valid_from.0ea133f63d", "test.dbt_transform.email_check_dim_customers_hist_customer_email.99784c6897", "test.dbt_transform.not_null_dim_customers_hist_customer_code.5954a024ee", "test.dbt_transform.not_null_dim_customers_hist_customer_create_date.bd19ea11a1", "test.dbt_transform.not_null_dim_customers_hist_customer_id.ce18adacfe", "test.dbt_transform.not_null_dim_customers_hist_customer_key.60fa59698a", "test.dbt_transform.not_null_dim_customers_hist_valid_from.eea34cae68", "test.dbt_transform.not_null_dim_customers_hist_valid_to.1f4b64bed1", "test.dbt_transform.relationships_dim_customers_hist_customer_code__cid__ref_erp_cust_az12_.e1cbda855d", "test.dbt_transform.relationships_dim_customers_hist_customer_code__cid__ref_erp_loc_a101_.1cff523225", "test.dbt_transform.unique_dim_customers_hist_customer_key.e6329f08c7"], "model.dbt_transform.report_products": [], "model.dbt_transform.report_customers": [], "snapshot.dbt_transform.products_snapshot": ["model.dbt_transform.dim_products_current", "model.dbt_transform.dim_products_hist", "test.dbt_transform.accepted_values_products_snapshot_erp_maintenance_status__Yes__No.8d1595112e", "test.dbt_transform.custom_trimmed_check_products_snapshot_erp_maintenance_status.837fe8b155", "test.dbt_transform.dbt_utils_expression_is_true_products_snapshot_prd_cost___0.fb10396e3b", "test.dbt_transform.not_null_products_snapshot_dbt_scd_id.3b1bf37123", "test.dbt_transform.not_null_products_snapshot_dbt_updated_at.f51bf4bd85", "test.dbt_transform.not_null_products_snapshot_dbt_valid_from.5230dba4ac", "test.dbt_transform.not_null_products_snapshot_dbt_valid_to.8a79b7bfba", "test.dbt_transform.not_null_products_snapshot_prd_cost.4ac4c0c981", "test.dbt_transform.relationships_products_snapshot_cat_id__id__ref_erp_px_cat_g1v2_.cc6c4d367a", "test.dbt_transform.unique_products_snapshot_dbt_scd_id.64e0b38135"], "snapshot.dbt_transform.customers_snapshot": ["model.dbt_transform.dim_customers_current", "model.dbt_transform.dim_customers_hist", "test.dbt_transform.not_null_customers_snapshot_dbt_scd_id.d7c60e61aa", "test.dbt_transform.not_null_customers_snapshot_dbt_updated_at.1b87573d98", "test.dbt_transform.not_null_customers_snapshot_dbt_valid_from.9ebd11d9e2", "test.dbt_transform.not_null_customers_snapshot_dbt_valid_to.e956fef5d5", "test.dbt_transform.relationships_customers_snapshot_cst_code__cid__ref_erp_cust_az12_.5bf61612cf", "test.dbt_transform.relationships_customers_snapshot_cst_code__cid__ref_erp_loc_a101_.7922ee1486", "test.dbt_transform.unique_customers_snapshot_dbt_scd_id.bae3323096"], "analysis.dbt_transform.ranking_exploration": [], "analysis.dbt_transform.performance_analysis": [], "analysis.dbt_transform.magnitude_exploration": [], "analysis.dbt_transform.part_to_whole_analysis": [], "analysis.dbt_transform.segmentation_analysis": [], "analysis.dbt_transform.cumulative_analysis": [], "analysis.dbt_transform.change_over_time": [], "analysis.dbt_transform.measures_exploration": [], "analysis.dbt_transform.dimension_exploration": [], "analysis.dbt_transform.date_exploration": [], "test.dbt_transform.fact_sales_join_check": [], "test.dbt_transform.not_null_bz_crm_cust_info_cst_id.aa1840220b": [], "test.dbt_transform.unique_bz_crm_cust_info_cst_id.a9d22060cc": [], "test.dbt_transform.not_null_bz_crm_cust_info_cst_key.6fe1d2bf24": [], "test.dbt_transform.not_null_bz_crm_cust_info_cst_create_date.909692acce": [], "test.dbt_transform.unique_bz_crm_cust_info_cst_email.28870d8715": [], "test.dbt_transform.email_check_bz_crm_cust_info_cst_email.7f2c4cbb21": [], "test.dbt_transform.not_null_bz_crm_cust_info_ingested_at.4d159ceaac": [], "test.dbt_transform.not_null_bz_crm_cust_info_updated_at.f4d174cd12": [], "test.dbt_transform.not_null_bz_crm_prd_info_prd_id.de20ac871d": [], "test.dbt_transform.unique_bz_crm_prd_info_prd_id.12fd88857e": [], "test.dbt_transform.not_null_bz_crm_prd_info_prd_key.18db73cec9": [], "test.dbt_transform.not_null_bz_crm_prd_info_prd_start_dt.620afd0a00": [], "test.dbt_transform.not_null_bz_crm_prd_info_ingested_at.2893c430a5": [], "test.dbt_transform.not_null_bz_crm_prd_info_updated_at.8742d3673b": [], "test.dbt_transform.not_null_bz_crm_sales_details_sls_ord_num.56c7374457": [], "test.dbt_transform.not_null_bz_crm_sales_details_sls_prd_key.8a92f0a74f": [], "test.dbt_transform.not_null_bz_crm_sales_details_sls_cust_id.01831db7c4": [], "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_order_dt.7f1b4100eb": [], "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_ship_dt.7335e91999": [], "test.dbt_transform.valid_date_format_bz_crm_sales_details_sls_due_dt.53fba7324b": [], "test.dbt_transform.not_null_bz_crm_sales_details_sls_quantity.d87cd738e5": [], "test.dbt_transform.not_null_bz_crm_sales_details_ingested_at.23dcba1d80": [], "test.dbt_transform.not_null_bz_crm_sales_details_updated_at.d78d14353f": [], "test.dbt_transform.not_null_bz_erp_cust_az12_cid.774c60760d": [], "test.dbt_transform.not_null_bz_erp_cust_az12_ingested_at.c3826ee9f9": [], "test.dbt_transform.not_null_bz_erp_cust_az12_updated_at.aed585f42f": [], "test.dbt_transform.not_null_bz_erp_loc_a101_cid.91e1f30b67": [], "test.dbt_transform.not_null_bz_erp_loc_a101_ingested_at.749d640110": [], "test.dbt_transform.not_null_bz_erp_loc_a101_updated_at.674384578b": [], "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_id.965f4cf4ac": [], "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_ingested_at.b4f577cb11": [], "test.dbt_transform.not_null_bz_erp_px_cat_g1v2_updated_at.210fe71e5d": [], "test.dbt_transform.not_null_crm_cust_info_cst_id.91241b201c": [], "test.dbt_transform.unique_crm_cust_info_cst_id.7c73f5004c": [], "test.dbt_transform.not_null_crm_cust_info_cst_code.58506a711c": [], "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_code.ab58decf40": [], "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_firstname.96efd6996d": [], "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_lastname.2a16cae8de": [], "test.dbt_transform.accepted_values_crm_cust_info_cst_marital_status__Married__Single__n_a.d012437934": [], "test.dbt_transform.accepted_values_crm_cust_info_cst_gndr__Male__Female__n_a.ddceddf11e": [], "test.dbt_transform.unique_crm_cust_info_cst_email.139300d73f": [], "test.dbt_transform.email_check_crm_cust_info_cst_email.e0248dc48c": [], "test.dbt_transform.custom_trimmed_check_crm_cust_info_cst_place.2e379fe18c": [], "test.dbt_transform.not_null_crm_cust_info_cst_create_date.9a462c5eb4": [], "test.dbt_transform.not_null_crm_cust_info_ingested_at.4df149d26c": [], "test.dbt_transform.not_null_crm_cust_info_updated_at.3308fe3c4e": [], "test.dbt_transform.not_null_crm_prd_info_prd_id.2f30e67051": [], "test.dbt_transform.unique_crm_prd_info_prd_id.f3cfe19adf": [], "test.dbt_transform.not_null_crm_prd_info_cat_id.5024f04cdb": [], "test.dbt_transform.not_null_crm_prd_info_prd_code.a15839d0cd": [], "test.dbt_transform.custom_trimmed_check_crm_prd_info_prd_code.05162b5d85": [], "test.dbt_transform.not_null_crm_prd_info_prd_nm.119673e4d4": [], "test.dbt_transform.custom_trimmed_check_crm_prd_info_prd_nm.d1865c7e7d": [], "test.dbt_transform.not_null_crm_prd_info_prd_cost.279fd05d93": [], "test.dbt_transform.dbt_utils_expression_is_true_crm_prd_info_prd_cost___0.605c9255ee": [], "test.dbt_transform.accepted_values_crm_prd_info_prd_line__Mountains__Road__Sales__Touring__n_a.2e1af5bd62": [], "test.dbt_transform.not_null_crm_prd_info_prd_start_date.83b2f0095a": [], "test.dbt_transform.not_null_crm_prd_info_prd_end_date.4bac02b05d": [], "test.dbt_transform.dbt_utils_expression_is_true_crm_prd_info_prd_end_date___prd_start_date.6cc3176193": [], "test.dbt_transform.not_null_crm_prd_info_ingested_at.6858ecc3e5": [], "test.dbt_transform.not_null_crm_prd_info_updated_at.fc3e5e584c": [], "test.dbt_transform.not_null_crm_sales_details_sls_ord_num.284ab08e44": [], "test.dbt_transform.custom_trimmed_check_crm_sales_details_sls_ord_num.167f0728aa": [], "test.dbt_transform.not_null_crm_sales_details_sls_prd_key.1a14bfff89": [], "test.dbt_transform.custom_trimmed_check_crm_sales_details_sls_prd_key.a501150291": [], "test.dbt_transform.not_null_crm_sales_details_sls_cust_id.0a46ca14bf": [], "test.dbt_transform.not_null_crm_sales_details_sls_sales.9250f7ded0": [], "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_sales___0.32b636e941": [], "test.dbt_transform.not_null_crm_sales_details_sls_quantity.4c23255cdd": [], "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_quantity___0.80310b3b9b": [], "test.dbt_transform.not_null_crm_sales_details_sls_price.ab8d58b73d": [], "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_price___0.88b98ec27b": [], "test.dbt_transform.not_null_crm_sales_details_ingested_at.665ecb63bb": [], "test.dbt_transform.not_null_crm_sales_details_updated_at.329e7c70af": [], "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_sls_order_dt_sls_ship_dt_AND_sls_order_dt_sls_due_dt.76971c3329": [], "test.dbt_transform.dbt_utils_expression_is_true_crm_sales_details_ABS_sls_sales_sls_quantity_sls_price_0_01.d2788e1779": [], "test.dbt_transform.not_null_erp_cust_az12_cid.85e0f9c5c3": [], "test.dbt_transform.custom_trimmed_check_erp_cust_az12_cid.0e1740cd50": [], "test.dbt_transform.accepted_values_erp_cust_az12_gen__Male__Female__n_a.a4899b28d0": [], "test.dbt_transform.not_null_erp_cust_az12_ingested_at.a86586ca8a": [], "test.dbt_transform.not_null_erp_cust_az12_updated_at.9fd920946d": [], "test.dbt_transform.not_null_erp_loc_a101_cid.babef803af": [], "test.dbt_transform.custom_trimmed_check_erp_loc_a101_cid.b5c96a26e9": [], "test.dbt_transform.custom_trimmed_check_erp_loc_a101_cntry.e764b06576": [], "test.dbt_transform.accepted_values_erp_loc_a101_cntry__Australia__Canada__France__Germany__United_Kingdom__United_States__n_a.8b1d17bcc2": [], "test.dbt_transform.not_null_erp_loc_a101_ingested_at.5fa40abeeb": [], "test.dbt_transform.not_null_erp_loc_a101_updated_at.66ab7ce54c": [], "test.dbt_transform.not_null_erp_px_cat_g1v2_id.b5825d0c02": [], "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_id.92860219f5": [], "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_cat.5b96c7bce1": [], "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_subcat.164f225283": [], "test.dbt_transform.custom_trimmed_check_erp_px_cat_g1v2_maintenance_status.c2f302cba9": [], "test.dbt_transform.accepted_values_erp_px_cat_g1v2_maintenance_status__Yes__No.579d39cf7d": [], "test.dbt_transform.not_null_erp_px_cat_g1v2_ingested_at.b8fc6358c1": [], "test.dbt_transform.not_null_erp_px_cat_g1v2_updated_at.64f8508b6f": [], "test.dbt_transform.not_null_dim_customers_current_customer_key.37ac625538": [], "test.dbt_transform.unique_dim_customers_current_customer_key.08d4b3b146": [], "test.dbt_transform.not_null_dim_customers_current_customer_id.1e15b0f415": [], "test.dbt_transform.not_null_dim_customers_current_customer_code.dc65fd1b8d": [], "test.dbt_transform.relationships_dim_customers_current_customer_code__cid__ref_erp_cust_az12_.0a9649b542": [], "test.dbt_transform.relationships_dim_customers_current_customer_code__cid__ref_erp_loc_a101_.f2a45edd5c": [], "test.dbt_transform.custom_trimmed_check_dim_customers_current_customer_firstname.6ffb6e70e8": [], "test.dbt_transform.custom_trimmed_check_dim_customers_current_customer_lastname.4fb9107fc7": [], "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_current_customer_birthdate___CURRENT_DATE_INTERVAL_18_years_.722cf38f8a": [], "test.dbt_transform.accepted_values_dim_customers_current_customer_gender__Male__Female__n_a.d1e41f77b4": [], "test.dbt_transform.accepted_values_dim_customers_current_customer_marital_status__Married__Single__n_a.f9912a886b": [], "test.dbt_transform.email_check_dim_customers_current_customer_email.510a4f64f7": [], "test.dbt_transform.not_null_dim_customers_current_customer_create_date.f9357ccf66": [], "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_current_customer_create_date___CURRENT_DATE.a7cb8fcbd9": [], "test.dbt_transform.not_null_dim_customers_hist_customer_key.60fa59698a": [], "test.dbt_transform.unique_dim_customers_hist_customer_key.e6329f08c7": [], "test.dbt_transform.not_null_dim_customers_hist_customer_id.ce18adacfe": [], "test.dbt_transform.not_null_dim_customers_hist_customer_code.5954a024ee": [], "test.dbt_transform.relationships_dim_customers_hist_customer_code__cid__ref_erp_cust_az12_.e1cbda855d": [], "test.dbt_transform.relationships_dim_customers_hist_customer_code__cid__ref_erp_loc_a101_.1cff523225": [], "test.dbt_transform.custom_trimmed_check_dim_customers_hist_customer_firstname.d868abb141": [], "test.dbt_transform.custom_trimmed_check_dim_customers_hist_customer_lastname.742a0744a8": [], "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_customer_birthdate___CURRENT_DATE_INTERVAL_18_years_.31d74b4ea7": [], "test.dbt_transform.accepted_values_dim_customers_hist_customer_gender__Male__Female__n_a.d766a33adc": [], "test.dbt_transform.accepted_values_dim_customers_hist_customer_marital_status__Married__Single__n_a.cdaca57546": [], "test.dbt_transform.email_check_dim_customers_hist_customer_email.99784c6897": [], "test.dbt_transform.not_null_dim_customers_hist_customer_create_date.bd19ea11a1": [], "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_customer_create_date___CURRENT_DATE.f81299d118": [], "test.dbt_transform.not_null_dim_customers_hist_valid_from.eea34cae68": [], "test.dbt_transform.not_null_dim_customers_hist_valid_to.1f4b64bed1": [], "test.dbt_transform.dbt_utils_expression_is_true_dim_customers_hist_valid_to___valid_from.0ea133f63d": [], "test.dbt_transform.not_null_dim_products_current_product_key.3e63d180f9": [], "test.dbt_transform.unique_dim_products_current_product_key.fc3de2b35c": [], "test.dbt_transform.not_null_dim_products_current_product_id.c8cb27b7ea": [], "test.dbt_transform.not_null_dim_products_current_product_code.e0869b5c14": [], "test.dbt_transform.not_null_dim_products_current_product_name.dd03b9e6f4": [], "test.dbt_transform.custom_trimmed_check_dim_products_current_product_name.0724974f29": [], "test.dbt_transform.not_null_dim_products_current_product_cat_id.c777c239b5": [], "test.dbt_transform.accepted_values_dim_products_current_product_maintenance_status__Yes__No.07bfd01f6a": [], "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_cost___0.e6c37c46c8": [], "test.dbt_transform.accepted_values_dim_products_current_product_line__Mountains__Road__Sales__Touring__n_a.e8f2855826": [], "test.dbt_transform.not_null_dim_products_current_product_start_date.ca24d0e0fe": [], "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_start_date___CURRENT_DATE.2300366280": [], "test.dbt_transform.not_null_dim_products_current_product_end_date.929c3a8649": [], "test.dbt_transform.dbt_utils_expression_is_true_dim_products_current_product_end_date___product_start_date.451cdfe750": [], "test.dbt_transform.not_null_dim_products_hist_product_key.5c97ee0e15": [], "test.dbt_transform.unique_dim_products_hist_product_key.a6021809c2": [], "test.dbt_transform.not_null_dim_products_hist_product_id.6a326106a1": [], "test.dbt_transform.not_null_dim_products_hist_product_code.c6aaeb0242": [], "test.dbt_transform.not_null_dim_products_hist_product_name.d9be5ad187": [], "test.dbt_transform.custom_trimmed_check_dim_products_hist_product_name.bf225459e3": [], "test.dbt_transform.not_null_dim_products_hist_product_cat_id.d281f01d43": [], "test.dbt_transform.accepted_values_dim_products_hist_product_maintenance_status__Yes__No.af5c46a5ea": [], "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_cost___0.17db2580f3": [], "test.dbt_transform.accepted_values_dim_products_hist_product_line__Mountains__Road__Sales__Touring__n_a.a57388378b": [], "test.dbt_transform.not_null_dim_products_hist_product_start_date.54f355684a": [], "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_start_date___CURRENT_DATE.dedbbf6f62": [], "test.dbt_transform.not_null_dim_products_hist_product_end_date.a81a2dc90d": [], "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_product_end_date___product_start_date.939b927a80": [], "test.dbt_transform.not_null_dim_products_hist_valid_from.3aa7d58fff": [], "test.dbt_transform.not_null_dim_products_hist_valid_to.8dcbbd24da": [], "test.dbt_transform.dbt_utils_expression_is_true_dim_products_hist_valid_to___valid_from.375df757f5": [], "test.dbt_transform.unique_fact_sales_sales_details_key.5f8b370051": [], "test.dbt_transform.not_null_fact_sales_sales_details_key.0281f867b8": [], "test.dbt_transform.not_null_fact_sales_sales_order_number.804723385c": [], "test.dbt_transform.relationships_fact_sales_product_key__product_key__ref_dim_products_current_.004155aa94": [], "test.dbt_transform.relationships_fact_sales_customer_key__customer_key__ref_dim_customers_current_.7f8b6f7f32": [], "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_amount___0.df4e090748": [], "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_quantity___0.478922c950": [], "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_order_date___CURRENT_DATE.89a8a9abbc": [], "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_shipping_date___sales_order_date.2343579795": [], "test.dbt_transform.dbt_utils_expression_is_true_fact_sales_sales_due_date___sales_order_date.739676ef8b": [], "test.dbt_transform.relationships_customers_snapshot_cst_code__cid__ref_erp_cust_az12_.5bf61612cf": [], "test.dbt_transform.relationships_customers_snapshot_cst_code__cid__ref_erp_loc_a101_.7922ee1486": [], "test.dbt_transform.not_null_customers_snapshot_dbt_valid_from.9ebd11d9e2": [], "test.dbt_transform.not_null_customers_snapshot_dbt_valid_to.e956fef5d5": [], "test.dbt_transform.not_null_customers_snapshot_dbt_updated_at.1b87573d98": [], "test.dbt_transform.not_null_customers_snapshot_dbt_scd_id.d7c60e61aa": [], "test.dbt_transform.unique_customers_snapshot_dbt_scd_id.bae3323096": [], "test.dbt_transform.relationships_products_snapshot_cat_id__id__ref_erp_px_cat_g1v2_.cc6c4d367a": [], "test.dbt_transform.not_null_products_snapshot_prd_cost.4ac4c0c981": [], "test.dbt_transform.dbt_utils_expression_is_true_products_snapshot_prd_cost___0.fb10396e3b": [], "test.dbt_transform.custom_trimmed_check_products_snapshot_erp_maintenance_status.837fe8b155": [], "test.dbt_transform.accepted_values_products_snapshot_erp_maintenance_status__Yes__No.8d1595112e": [], "test.dbt_transform.not_null_products_snapshot_dbt_valid_from.5230dba4ac": [], "test.dbt_transform.not_null_products_snapshot_dbt_valid_to.8a79b7bfba": [], "test.dbt_transform.not_null_products_snapshot_dbt_updated_at.f51bf4bd85": [], "test.dbt_transform.not_null_products_snapshot_dbt_scd_id.3b1bf37123": [], "test.dbt_transform.unique_products_snapshot_dbt_scd_id.64e0b38135": [], "source.dbt_transform.bronze_source.raw_crm_cust_info": ["model.dbt_transform.bz_crm_cust_info"], "source.dbt_transform.bronze_source.raw_crm_prd_info": ["model.dbt_transform.bz_crm_prd_info"], "source.dbt_transform.bronze_source.raw_crm_sales_details": ["model.dbt_transform.bz_crm_sales_details"], "source.dbt_transform.bronze_source.raw_erp_cust_az12": ["model.dbt_transform.bz_erp_cust_az12"], "source.dbt_transform.bronze_source.raw_erp_loc_a101": ["model.dbt_transform.bz_erp_loc_a101"], "source.dbt_transform.bronze_source.raw_erp_px_cat_g1v2": ["model.dbt_transform.bz_erp_px_cat_g1v2"], "source.dbt_transform.silver_source.bz_crm_cust_info": [], "source.dbt_transform.silver_source.bz_crm_prd_info": [], "source.dbt_transform.silver_source.bz_crm_sales_details": [], "source.dbt_transform.silver_source.bz_erp_cust_az12": [], "source.dbt_transform.silver_source.bz_erp_loc_a101": [], "source.dbt_transform.silver_source.bz_erp_px_cat_g1v2": [], "source.dbt_transform.gold_source.crm_cust_info": [], "source.dbt_transform.gold_source.crm_prd_info": [], "source.dbt_transform.gold_source.crm_sales_details": [], "source.dbt_transform.gold_source.erp_cust_az12": [], "source.dbt_transform.gold_source.erp_loc_a101": [], "source.dbt_transform.gold_source.erp_px_cat_g1v2": [], "source.dbt_transform.analytics_source.dim_customers_current": ["analysis.dbt_transform.date_exploration", "analysis.dbt_transform.magnitude_exploration", "analysis.dbt_transform.measures_exploration", "analysis.dbt_transform.ranking_exploration", "analysis.dbt_transform.segmentation_analysis", "model.dbt_transform.report_customers"], "source.dbt_transform.analytics_source.dim_products_current": ["analysis.dbt_transform.dimension_exploration", "analysis.dbt_transform.magnitude_exploration", "analysis.dbt_transform.measures_exploration", "analysis.dbt_transform.part_to_whole_analysis", "analysis.dbt_transform.performance_analysis", "analysis.dbt_transform.ranking_exploration", "analysis.dbt_transform.segmentation_analysis", "model.dbt_transform.report_products"], "source.dbt_transform.analytics_source.fact_sales": ["analysis.dbt_transform.change_over_time", "analysis.dbt_transform.cumulative_analysis", "analysis.dbt_transform.date_exploration", "analysis.dbt_transform.magnitude_exploration", "analysis.dbt_transform.measures_exploration", "analysis.dbt_transform.part_to_whole_analysis", "analysis.dbt_transform.performance_analysis", "analysis.dbt_transform.ranking_exploration", "analysis.dbt_transform.segmentation_analysis", "model.dbt_transform.report_customers", "model.dbt_transform.report_products"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}